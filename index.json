[{"uri":"http://localhost:8901/reference/hol.html","title":"HOL","content":"Bool \nBoolAlg \nBoolClass \nCoreThry \nDLTree \nDef1 \nDef2 \nDmodes \nEqCong \nEqual \nExn \nGenericTree \nInd \nLexer \nLib \nNames \nNat \nNatArith \nNatEval \nNatNumrl \nNatRel \nPair \nParser \nPreterm \nPrinter \nProofManagement \nProofTree \nReader \nStore \nTerm \nThm \nType \nTypeAnal \nTypeAnnot \nUtils1 \nUtils2 \nWrap"},{"uri":"http://localhost:8901/reference/hol-bool.html","title":"Bool","content":"Bool \n\nThis module extends the boolean-related theory by giving definitions for  \nclassic predicate logic theory objects not introduced in \u0027CoreThry\u0027, and  \nadds various derived syntax functions, theorems and inference rules.  Note\nthat derivations relying on the Axiom of Choice are separated out into the\n\u0027BoolClass\u0027 module.\n \nBool.is_bool_eqthm \nis_bool_eqthm \nBool.p \np \nBool.q \nq \nBool.r \nr \nBool.p_ \np_ \nBool.p1_ \np1_ \nBool.p2_ \np2_ \nBool.false_def \nfalse_def \nBool.false_tm \nfalse_tm \nBool.disj_def \ndisj_def \nBool.mk_disj \nmk_disj \nBool.list_mk_disj \nlist_mk_disj \nBool.dest_disj \ndest_disj \nBool.strip_disj \nstrip_disj \nBool.flatstrip_disj \nflatstrip_disj \nBool.is_disj \nis_disj \nBool.not_def \nnot_def \nBool.mk_not \nmk_not \nBool.dest_not \ndest_not \nBool.is_not \nis_not \nBool.uexists_def \nuexists_def \nBool.mk_uexists \nmk_uexists \nBool.dest_uexists \ndest_uexists \nBool.is_uexists \nis_uexists \nBool.cond_def \ncond_def \nBool.mk_cond \nmk_cond \nBool.dest_cond \ndest_cond \nBool.is_cond \nis_cond \nBool.truth_thm \ntruth_thm \nBool.eqt_elim_rule \neqt_elim_rule \nBool.undisch_rule \nundisch_rule \nBool.add_asm_rule \nadd_asm_rule \nBool.prove_asm_rule \nprove_asm_rule \nBool.eq_imp_rule1 \neq_imp_rule1 \nBool.eq_imp_rule2 \neq_imp_rule2 \nBool.not_intro_rule \nnot_intro_rule \nBool.not_elim_rule \nnot_elim_rule \nBool.deduct_contrapos_rule \ndeduct_contrapos_rule \nBool.eqf_elim_rule \neqf_elim_rule \nBool.imp_trans_rule \nimp_trans_rule \nBool.list_imp_trans_rule \nlist_imp_trans_rule \nBool.spec_rule \nspec_rule \nBool.list_spec_rule \nlist_spec_rule \nBool.spec_all_rule \nspec_all_rule \nBool.beta_patt_conv \nbeta_patt_conv \nBool.beta_patt_rule \nbeta_patt_rule \nBool.bspec_rule \nbspec_rule \nBool.list_bspec_rule \nlist_bspec_rule \nBool.contr_rule \ncontr_rule \nBool.eta_conv \neta_conv \nBool.imp_antisym_rule \nimp_antisym_rule \nBool.deduct_antisym_rule \ndeduct_antisym_rule \nBool.sym_conv \nsym_conv \nBool.eqt_intro_rule \neqt_intro_rule \nBool.eqf_intro_rule \neqf_intro_rule \nBool.gen_rule \ngen_rule \nBool.list_gen_rule \nlist_gen_rule \nBool.conj_lemma0 \nconj_lemma0 \nBool.conj_lemma \nconj_lemma \nBool.conj_rule \nconj_rule \nBool.conjunct1_lemma \nconjunct1_lemma \nBool.conjunct1_rule \nconjunct1_rule \nBool.conjunct2_lemma \nconjunct2_lemma \nBool.conjunct2_rule \nconjunct2_rule \nBool.disj_lemma0 \ndisj_lemma0 \nBool.disj_cases_lemma \ndisj_cases_lemma \nBool.disj_cases_rule \ndisj_cases_rule \nBool.disj1_lemma \ndisj1_lemma \nBool.disj1_rule \ndisj1_rule \nBool.disj2_lemma \ndisj2_lemma \nBool.disj2_rule \ndisj2_rule \nBool.choose_rule \nchoose_rule \nBool.fun_eq_thm \nfun_eq_thm \nBool.load \nload"},{"uri":"http://localhost:8901/reference/hol-bool.html#is_bool_eqthm","title":"Bool.is_bool_eqthm","content":"Bool.is_bool_eqthm \nis_bool_eqthm \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#p","title":"Bool.p","content":"Bool.p \np \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#q","title":"Bool.q","content":"Bool.q \nq \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#r","title":"Bool.r","content":"Bool.r \nr \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#p_","title":"Bool.p_","content":"Bool.p_ \np_ \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#p1_","title":"Bool.p1_","content":"Bool.p1_ \np1_ \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#p2_","title":"Bool.p2_","content":"Bool.p2_ \np2_ \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#false_def","title":"Bool.false_def","content":"Bool.false_def \nfalse_def \n\n  Falsity\n \n |- false \u003C=\u003E (!p. p) \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#false_tm","title":"Bool.false_tm","content":"Bool.false_tm \nfalse_tm \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#disj_def","title":"Bool.disj_def","content":"Bool.disj_def \ndisj_def \n\n Disjunction\n\n |- $\\/ = (\\p1 p2. !p. (p1 ==\u003E p) ==\u003E (p2 ==\u003E p) ==\u003E p)\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#mk_disj","title":"Bool.mk_disj","content":"Bool.mk_disj \nmk_disj \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#list_mk_disj","title":"Bool.list_mk_disj","content":"Bool.list_mk_disj \nlist_mk_disj \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#dest_disj","title":"Bool.dest_disj","content":"Bool.dest_disj \ndest_disj \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#strip_disj","title":"Bool.strip_disj","content":"Bool.strip_disj \nstrip_disj \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#flatstrip_disj","title":"Bool.flatstrip_disj","content":"Bool.flatstrip_disj \nflatstrip_disj \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#is_disj","title":"Bool.is_disj","content":"Bool.is_disj \nis_disj \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#not_def","title":"Bool.not_def","content":"Bool.not_def \nnot_def \n\n |- $~ = (\\p. p ==\u003E false)\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#mk_not","title":"Bool.mk_not","content":"Bool.mk_not \nmk_not \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#dest_not","title":"Bool.dest_not","content":"Bool.dest_not \ndest_not \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#is_not","title":"Bool.is_not","content":"Bool.is_not \nis_not \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#uexists_def","title":"Bool.uexists_def","content":"Bool.uexists_def \nuexists_def \n\n Unique existential quantification \n\n |- $?! = (\\(P:\u0027a-\u003Ebool). ?x. P x /\\ (!y. P y ==\u003E y = x))\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#mk_uexists","title":"Bool.mk_uexists","content":"Bool.mk_uexists \nmk_uexists \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#dest_uexists","title":"Bool.dest_uexists","content":"Bool.dest_uexists \ndest_uexists \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#is_uexists","title":"Bool.is_uexists","content":"Bool.is_uexists \nis_uexists \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#cond_def","title":"Bool.cond_def","content":"Bool.cond_def \ncond_def \n\n Conditional\n\n The internal constant for conditional expressions is called \u0022COND\u0022.  It    *)\n has special support in the parser/printer, so that                         *)\n    \u0060if c then t1 else t2\u0060                                                  *)\n is parsed/printed for the internal term                                    *)\n    \u0060COND c t1 t2\u0060.                                                         *)\n\n |- COND =\n (\\p (t1:\u0027a) t2.\n     @x. ((p \u003C=\u003E true) ==\u003E x = t1) /\\ ((p \u003C=\u003E false) ==\u003E x = t2))\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#mk_cond","title":"Bool.mk_cond","content":"Bool.mk_cond \nmk_cond \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#dest_cond","title":"Bool.dest_cond","content":"Bool.dest_cond \ndest_cond \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#is_cond","title":"Bool.is_cond","content":"Bool.is_cond \nis_cond \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#truth_thm","title":"Bool.truth_thm","content":"Bool.truth_thm \ntruth_thm \n\n |- true\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#eqt_elim_rule","title":"Bool.eqt_elim_rule","content":"Bool.eqt_elim_rule \neqt_elim_rule \n\n This is the truth equivalence elimination rule.  It takes an equality    \n theorem that has truth on the RHS, and returns a theorem stating that the\n LHS holds, under the same assumptions.                                   \n                                                                          \n    A |- p \u003C=\u003E true                                                       \n    ---------------                                                       \n        A |- p                                                            \n\n See also: eqt_intro_rule, eqf_elim_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#undisch_rule","title":"Bool.undisch_rule","content":"Bool.undisch_rule \nundisch_rule \n\n This is the undischarge rule.  It takes an implication theorem, and       \n removes the antecedent from the conclusion and adds it to the assumptions.\n                                                                           \n    A |- p ==\u003E q                                                           \n    ------------                                                           \n    A u {p} |- q                                                           \n\n See also: disch_rule, mp_rule, prove_asm_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#add_asm_rule","title":"Bool.add_asm_rule","content":"Bool.add_asm_rule \nadd_asm_rule \n\n This is the assumption insertion rule.  It takes a boolean term and a     \n theorem, and returns the same theorem but with the supplied term added to \n its assumptions.  The returned theorem is the inputted theorem if the term\n is already in the assumptions.\n \n    \u0060q\u0060   A |- p                                                           \n    ------------                                                           \n    A u {q} |- p                 \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#prove_asm_rule","title":"Bool.prove_asm_rule","content":"Bool.prove_asm_rule \nprove_asm_rule \n\n This is the assumption proving rule.  It takes two theorems, and returns  \n the second theorem but with the conclusion of the first theorem removed   \n from the assumptions (if present) and the assumptions from the first      \n theorem added.  Note that the first theorem\u0027s conclusion does not have to \n be in the second\u0027s assumptions for the rule to succeed.                   \n                                                                           \n    A1 |- p    A2 |- q                                                     \n    ------------------                                                     \n    A1 u (A2\\{p}) |- q                                                     \n\n See also: mp_rule, undisch_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#eq_imp_rule1","title":"Bool.eq_imp_rule1","content":"Bool.eq_imp_rule1 \neq_imp_rule1 \n\n This is the first equivalence elimination rule.  It takes a theorem\n stating the equivalence of two boolean terms, and returns a theorem\n stating that the LHS implies the RHS, under the same assumptions.  \n                                                                    \n    A |- p \u003C=\u003E q                                                    \n    ------------                                                    \n    A |- p ==\u003E q                                  \n\n See also: eq_imp_rule2, imp_antisym_rule, eq_mp_rule, undisch_rule, mk_imp_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#eq_imp_rule2","title":"Bool.eq_imp_rule2","content":"Bool.eq_imp_rule2 \neq_imp_rule2 \n\n This is the second equivalence elimination rule.  It takes a theorem\n stating the equivalence of two boolean terms, and returns a theorem \n stating that the RHS implies the LHS, under the same assumptions.   \n                                                                     \n    A |- p \u003C=\u003E q                                                     \n    ------------                                                     \n    A |- q ==\u003E p             \n\n See also: eq_imp_rule1, imp_antisym_rule, eq_mp_rule, undisch_rule, mk_imp_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#not_intro_rule","title":"Bool.not_intro_rule","content":"Bool.not_intro_rule \nnot_intro_rule \n\n This is the logical negation introduction rule.  It takes an implication \n theorem where the RHS is falsity, and returns the logical negation of the\n LHS, under the same assumptions.                                         \n                                                                          \n    A |- p ==\u003E false                                                      \n    ----------------                                                      \n        A |- ~ p                                                          \n\n See also: not_elim_rule, eqf_elim_rule, eqf_intro_rule, deduct_contrapos_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#not_elim_rule","title":"Bool.not_elim_rule","content":"Bool.not_elim_rule \nnot_elim_rule \n\n This is the logical negation elimination rule.  It takes a logical       \n negation theorem, and returns an implication with the negated term on the\n LHS and falsity on the RHS, under the same assumptions.                  \n                                                                          \n        A |- ~ p                                                          \n    ----------------                                                      \n    A |- p ==\u003E false                                                      \n\n See also: not_intro_rule, eqf_intro_rule, eqf_elim_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#deduct_contrapos_rule","title":"Bool.deduct_contrapos_rule","content":"Bool.deduct_contrapos_rule \ndeduct_contrapos_rule \n\n This is the contraposition rule for deduction.  It swaps and logically  \n negates the supplied assumption term and the conclusion of the supplied \n theorem.  Note that the supplied term does not have to be present in the\n assumptions of the supplied theorem for the rule to succeed.  If the    \n logical negation of the supplied theorem\u0027s conclusion is the supplied   \n term, then it will not occur in the resulting theorem\u0027s assumptions.    \n                                                                         \n        \u0060q\u0060   A |- p                                                     \n    ---------------------                                                \n    (A u {~p})\\{q} |- ~ q                                                \n\n See also: not_intro_rule, disch_rule, contr_rule, ccontr_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#eqf_elim_rule","title":"Bool.eqf_elim_rule","content":"Bool.eqf_elim_rule \neqf_elim_rule \n\n This is the falsity equivalence elimination rule.  It takes an equality  \n theorem with falsity on the RHS, and returns the logical negation of the\n LHS, under the same assumptions.                                        \n                                                                         \n    A |- p \u003C=\u003E false                                                     \n    ----------------                                                     \n        A |- ~ p                                                         \n\n See also: eqf_intro_rule, not_intro_rule, not_elim_rule, mk_not_rule,\n eqt_elim_rule, deduct_contrapos_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#imp_trans_rule","title":"Bool.imp_trans_rule","content":"Bool.imp_trans_rule \nimp_trans_rule \n\n imp_trans_rule : thm -\u003E thm -\u003E thm                                       \n                                                                          \n This is the transitivity rule for implication.  It takes two implication \n theorem arguments, where the first theorem\u0027s RHS is the same (modulo     \n alpha-equivalence) as the second theorem\u0027s LHS.  It returns a theorem    \n stating that the first theorem\u0027s LHS implies the second theorem\u0027s RHS,   \n under the unioned assumptions of the two theorems.                       \n                                                                          \n    A1 |- p ==\u003E q    A2 |- q ==\u003E r                                        \n    ------------------------------                                        \n          A1 u A2 |- p ==\u003E r                                              \n\n See also: list_imp_trans_rule, eq_trans_rule, disch_rule, imp_anitsym_asm_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#list_imp_trans_rule","title":"Bool.list_imp_trans_rule","content":"Bool.list_imp_trans_rule \nlist_imp_trans_rule \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#spec_rule","title":"Bool.spec_rule","content":"Bool.spec_rule \nspec_rule \n\n This is the universal elimination rule.  It strips off the outermost     \n universal quantifier from the supplied theorem, and replaces in the body \n each occurrence of the stripped binding variable with the supplied term. \n The type of the supplied term must equal the type of the stripped binding\n variable.                                                                \n                                                                          \n    \u0060t\u0060   A |- !x. p                                                      \n    ----------------                                                      \n      A |- p[t/x]                                                         \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#list_spec_rule","title":"Bool.list_spec_rule","content":"Bool.list_spec_rule \nlist_spec_rule \n\n This is the compound universal elimination rule.  It strips off an       \n outermost universal quantifier from the supplied theorem for each item in\n the supplied term list, replacing each occurrence of a stripped binding  \n variable in the body with its corresponding item in the term list.  The  \n type of each term in the term list must equal the type of its            \n corresponding binding variable.                                          \n                                                                          \n    [\u0060t1\u0060;\u0060t2\u0060;..]   A |- !x1 x2 .. . p                                   \n    -----------------------------------                                   \n           A |- p[t1/x1;t2/x2;..]                                         \n\n See also: spec_rule, spec_all_rule, bspec_rule, list_gen_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#spec_all_rule","title":"Bool.spec_all_rule","content":"Bool.spec_all_rule \nspec_all_rule \n\n This is the compound default universal elimination rule.  It strips off  \n all the outer universal quantifiers from the supplied theorem.  Note that\n the supplied theorem does not have to be a universal quantification for  \n the rule to succeed (in which case the resulting theorem is the same as  \n the supplied theorem).                                                   \n                                                                          \n    A |- !x1 x2 .. xn. p                                                  \n    --------------------                                                  \n           A |- p                                                         \n\n See also: spec_rule, list_spec_rule, bspec_rule, list_gen_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#beta_patt_conv","title":"Bool.beta_patt_conv","content":"Bool.beta_patt_conv \nbeta_patt_conv \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#beta_patt_rule","title":"Bool.beta_patt_rule","content":"Bool.beta_patt_rule \nbeta_patt_rule \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#bspec_rule","title":"Bool.bspec_rule","content":"Bool.bspec_rule \nbspec_rule \n\n This is the beta-reducing universal elimination rule.  It strips off the\n outermost universal quantifier from the supplied theorem, and replaces in the\n body each occurrence of the stripped binding variable with the supplied term.\n If the supplied term is a lambda abstraction, it also performs beta-reduction on\n each substituted occurrence that is applied to an argument.  The type of the\n supplied term must equal the type of the stripped binding variable.\n \n             \u0060\\y. t\u0060   A |- !x. p\n       --------------------------------\n       A |- p[ \\y.t / x; t[s/y] / x s ]\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#list_bspec_rule","title":"Bool.list_bspec_rule","content":"Bool.list_bspec_rule \nlist_bspec_rule \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#contr_rule","title":"Bool.contr_rule","content":"Bool.contr_rule \ncontr_rule \n\n This is the intuitionistic contradiction rule.  It takes a boolean term   \n and a theorem with falsity as its conclusion.  It returns a theorem with  \n the supplied term as its conclusion, under the same assumptions as the    \n supplied theorem.                                                         \n                                                                           \n    \u0060p\u0060   A |- false                                                       \n    ----------------                                                       \n         A |- p                                               \n\n See also: ccontr_rule, deduct_contrapos_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#eta_conv","title":"Bool.eta_conv","content":"Bool.eta_conv \neta_conv \n\n eta_conv : term -\u003E thm                                                    \n                                                                           \n This is the eta reduction rule.  It takes a lambda abstraction term, where\n the body is a function application, and the binding variable is the       \n argument subterm of the function application and not free in the function \n subterm.  It returns a theorem stating that the term is equal to the      \n function subterm, under no assumptions.                                   \n                                                                           \n       \u0060\\x. f x\u0060                                                           \n    ----------------                                                       \n    |- (\\x. f x) = f                                                       \n\n See also: beta_conv.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#imp_antisym_rule","title":"Bool.imp_antisym_rule","content":"Bool.imp_antisym_rule \nimp_antisym_rule \n\n This is the antisymmetry rule for implication.  It takes two implication\n theorem arguments, where the LHS of each is the same (modulo alpha-     \n equivalence) as the RHS of the other.  It returns a theorem stating the \n logical equivalence of the two sides, under the unioned assumptions.    \n                                                                         \n    A1 |- p ==\u003E q    A2 |- q ==\u003E p                                       \n    ------------------------------                                       \n          A1 u A2 |- p \u003C=\u003E q                                             \n\n See also: eq_imp_rule1, eq_imp_rule2, deduct_antisym_rule, disch_rule,\n eqt_intro_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#deduct_antisym_rule","title":"Bool.deduct_antisym_rule","content":"Bool.deduct_antisym_rule \ndeduct_antisym_rule \n\n This is the antisymmetry rule for deduction.  It takes two theorem        \n arguments.  It returns a theorem stating that the supplied conclusions are\n equivalent, under the unioned assumptions but with each theorem\u0027s         \n conclusion removed from the other\u0027s assumptions.                          \n                                                                           \n        A1 |- p    A2 |- q      \n    --------------------------              \n    A1\\{q} u A2\\{p} |- p \u003C=\u003E q                      \n\n See also: imp_antisym_rule, undisch_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#sym_conv","title":"Bool.sym_conv","content":"Bool.sym_conv \nsym_conv \n\n This is the symmetry conversion for equality.  It transforms the supplied\n equality term by swapping its LHS with its RHS, under no assumptions.    \n                                                                          \n           \u0060t1 = t2\u0060                                                      \n    ----------------------                                                \n    |- t1 = t2 \u003C=\u003E t2 = t1                                                \n\n See also: sym_rule, refl_conv.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#eqt_intro_rule","title":"Bool.eqt_intro_rule","content":"Bool.eqt_intro_rule \neqt_intro_rule \n\n This is the truth equivalence introduction rule.  It takes any theorem,\n and returns the theorem stating that the conclusion is equivalent to   \n truth, under the same assumptions.                                     \n                                                                        \n         A |- p                                                         \n    ---------------                                                     \n    A |- p \u003C=\u003E true                                                     \n\n See also: eqt_elim_rule, eqf_intro_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#eqf_intro_rule","title":"Bool.eqf_intro_rule","content":"Bool.eqf_intro_rule \neqf_intro_rule \n\n This is the falsity equivalence introduction rule.  It takes a theorem    \n with logical negation at its top level, and returns a theorem stating that\n the body of the negation is equivalent to falsity, under the same         \n assumptions.                                                              \n                                                                           \n        A |- ~ p                                                           \n    ----------------                                                       \n    A |- p \u003C=\u003E false                                                       \n\n See also: eqf_elim_rule, not_elim_rule, not_intro_rule, mk_not_rule,\n eqt_intro_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#gen_rule","title":"Bool.gen_rule","content":"Bool.gen_rule \ngen_rule \n\n gen_rule : term -\u003E thm -\u003E thm                                             \n                                                                           \n This is the universal introduction rule.  It universally quantifies the   \n supplied theorem with the supplied binding variable, under the same       \n assumptions.  The binding variable must not occur free in the assumptions.\n                                                                           \n    \u0060x\u0060   A |- p         [ \u0022x\u0022 not free in \u0060A\u0060 ]                           \n    ------------                                                           \n     A |- !x. p                                                            \n\n See also: list_gen_rule, spec_rule, mk_forall_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#list_gen_rule","title":"Bool.list_gen_rule","content":"Bool.list_gen_rule \nlist_gen_rule \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#conj_lemma0","title":"Bool.conj_lemma0","content":"Bool.conj_lemma0 \nconj_lemma0 \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#conj_lemma","title":"Bool.conj_lemma","content":"Bool.conj_lemma \nconj_lemma \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#conj_rule","title":"Bool.conj_rule","content":"Bool.conj_rule \nconj_rule \n\n This is the conjunction introduction rule.  It conjoins the two supplied\n theorems and unions their assumptions.                                  \n                                                                         \n    A1 |- p    A2 |- q                                                   \n    ------------------                                                   \n    A1 u A2 |- p /\\ q                                                    \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#conjunct1_lemma","title":"Bool.conjunct1_lemma","content":"Bool.conjunct1_lemma \nconjunct1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#conjunct1_rule","title":"Bool.conjunct1_rule","content":"Bool.conjunct1_rule \nconjunct1_rule \n\n This is the conjunction elimination rule for the LHS.  It removes the RHS  \n conjunct from the supplied conjunction theorem.                            \n                                                                            \n    A |- p /\\ q                                                             \n    -----------                                                             \n      A |- p                       \n\n See also: conjunct2_rule, conjunct_rule, mk_conj_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#conjunct2_lemma","title":"Bool.conjunct2_lemma","content":"Bool.conjunct2_lemma \nconjunct2_lemma \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#conjunct2_rule","title":"Bool.conjunct2_rule","content":"Bool.conjunct2_rule \nconjunct2_rule \n\n This is the conjunction elimination rule for the RHS.  It removes the LHS  \n conjunct from the supplied conjunction theorem.                            \n                                                                            \n    A |- p /\\ q                                                             \n    -----------                                                             \n      A |- q                                                               \n\n See also: conjunct1_rule, conjunct_rule, mk_conj_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#disj_lemma0","title":"Bool.disj_lemma0","content":"Bool.disj_lemma0 \ndisj_lemma0 \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#disj_cases_lemma","title":"Bool.disj_cases_lemma","content":"Bool.disj_cases_lemma \ndisj_cases_lemma \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#disj_cases_rule","title":"Bool.disj_cases_rule","content":"Bool.disj_cases_rule \ndisj_cases_rule \n\n This is the disjunction elimination rule.  It takes a disjunction theorem  \n and two extra theorems that share the same conclusion.  It returns a       \n theorem with the same conclusion as the extra theorems.  The assumptions   \n of the returned theorem union the assumptions of the extra theorems, but   \n with the disjunction theorem\u0027s LHS removed from the first\u0027s assumptions    \n and its RHS removed from the second\u0027s, unioned together with the           \n disjunction theorem\u0027s assumptions.                                         \n                                                                            \n    A |- p \\/ q    A1 |- r    A2 |- r                                       \n    ---------------------------------                                       \n        A u A1\\{p} u A2\\{q} |- r                \n\n See also: disj1_rule, disj2_rule, mk_disj_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#disj1_lemma","title":"Bool.disj1_lemma","content":"Bool.disj1_lemma \ndisj1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#disj1_rule","title":"Bool.disj1_rule","content":"Bool.disj1_rule \ndisj1_rule \n\n This is the disjunction introduction rule for the LHS.  It disjoins the supplied\n boolean term to the RHS of the supplied theorem.\n \n       A |- p   \u0060q\u0060\n       ------------\n       A |- p \\/ q\n \n See also: disj2_rule, disj_cases_rule, mk_disj1_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#disj2_lemma","title":"Bool.disj2_lemma","content":"Bool.disj2_lemma \ndisj2_lemma \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#disj2_rule","title":"Bool.disj2_rule","content":"Bool.disj2_rule \ndisj2_rule \n\n This is the disjunction introduction rule for the RHS.  It disjoins the   \n supplied boolean term to LHS of the supplied theorem.                     \n                                                                           \n    \u0060p\u0060   A |- q                                                           \n    ------------                                                           \n    A |- p \\/ q                                         \n\n Si veda anche: disj1_rule, disj_cases_rule, mk_disj2_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#choose_rule","title":"Bool.choose_rule","content":"Bool.choose_rule \nchoose_rule \n\n This is the existential elimination rule.  It removes, from the            \n assumptions of a supplied main theorem, the body of a supplied existential \n theorem (but with all occurrences of the binding variable replaced with a  \n supplied variable), and adds the assumptions of the existential theorem.   \n The supplied variable is not allowed to be free in existential theorem\u0027s   \n conclusion or in the original main theorem\u0027s other assumptions or its      \n conclusion.  Note that the altered body of the existential theorem does    \n not have to be present in the assumptions of the main theorem for the rule \n to succeed.                                                                \n                                                                            \n    \u0060y\u0060   A1 |- ?x. p    A2 |- q      [ \u0022y\u0022 not free in:                    \n    ----------------------------          \u0060?x. p\u0060, \u0060q\u0060 or \u0060A2\\{p[y/x]}\u0060 ]   \n        A1 u A2\\{p[y/x]} |- q                                               \n\n See also: exists_rule, mk_exists_rule.\n"},{"uri":"http://localhost:8901/reference/hol-bool.html#fun_eq_thm","title":"Bool.fun_eq_thm","content":"Bool.fun_eq_thm \nfun_eq_thm \n\n |- !f g. f = g \u003C=\u003E (!x. f x = g x)         \n"},{"uri":"http://localhost:8901/reference/hol-bool.html#load","title":"Bool.load","content":"Bool.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html","title":"BoolAlg","content":"BoolAlg \n\nThis module proves various algebraic property theorems for the predicate\nlogic operators.                                                                  \n \nBoolAlg.p \np \nBoolAlg.q \nq \nBoolAlg.r \nr \nBoolAlg.x \nx \nBoolAlg.not_true_thm \nnot_true_thm \nBoolAlg.not_false_thm \nnot_false_thm \nBoolAlg.true_not_eq_false_thm \ntrue_not_eq_false_thm \nBoolAlg.not_dist_disj_thm \nnot_dist_disj_thm \nBoolAlg.conj_id_thm \nconj_id_thm \nBoolAlg.conj_zero_thm \nconj_zero_thm \nBoolAlg.conj_idem_thm \nconj_idem_thm \nBoolAlg.conj_comm_thm \nconj_comm_thm \nBoolAlg.conj_assoc_thm \nconj_assoc_thm \nBoolAlg.conj_absorb_disj_thm \nconj_absorb_disj_thm \nBoolAlg.conj_dist_right_disj_thm \nconj_dist_right_disj_thm \nBoolAlg.conj_dist_left_disj_thm \nconj_dist_left_disj_thm \nBoolAlg.conj_contr_thm \nconj_contr_thm \nBoolAlg.disj_id_thm \ndisj_id_thm \nBoolAlg.disj_zero_thm \ndisj_zero_thm \nBoolAlg.disj_idem_thm \ndisj_idem_thm \nBoolAlg.disj_comm_thm \ndisj_comm_thm \nBoolAlg.disj_assoc_thm \ndisj_assoc_thm \nBoolAlg.disj_absorb_conj_thm \ndisj_absorb_conj_thm \nBoolAlg.disj_dist_right_conj_thm \ndisj_dist_right_conj_thm \nBoolAlg.disj_dist_left_conj_thm \ndisj_dist_left_conj_thm \nBoolAlg.imp_right_zero_thm \nimp_right_zero_thm \nBoolAlg.imp_left_id_thm \nimp_left_id_thm \nBoolAlg.imp_left_zero_thm \nimp_left_zero_thm \nBoolAlg.imp_refl_thm \nimp_refl_thm \nBoolAlg.imp_dist_left_disj_thm \nimp_dist_left_disj_thm \nBoolAlg.imp_dist_right_conj_thm \nimp_dist_right_conj_thm \nBoolAlg.forall_dist_conj_thm \nforall_dist_conj_thm \nBoolAlg.forall_one_point_thm \nforall_one_point_thm \nBoolAlg.forall_null_thm \nforall_null_thm \nBoolAlg.load \nload"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#p","title":"BoolAlg.p","content":"BoolAlg.p \np \n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#q","title":"BoolAlg.q","content":"BoolAlg.q \nq \n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#r","title":"BoolAlg.r","content":"BoolAlg.r \nr \n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#x","title":"BoolAlg.x","content":"BoolAlg.x \nx \n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#not_true_thm","title":"BoolAlg.not_true_thm","content":"BoolAlg.not_true_thm \nnot_true_thm \n\n |- ~ true \u003C=\u003E false\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#not_false_thm","title":"BoolAlg.not_false_thm","content":"BoolAlg.not_false_thm \nnot_false_thm \n\n |- ~ false \u003C=\u003E true\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#true_not_eq_false_thm","title":"BoolAlg.true_not_eq_false_thm","content":"BoolAlg.true_not_eq_false_thm \ntrue_not_eq_false_thm \n\n |- ~ (true \u003C=\u003E false)   \n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#not_dist_disj_thm","title":"BoolAlg.not_dist_disj_thm","content":"BoolAlg.not_dist_disj_thm \nnot_dist_disj_thm \n\n |- !p q. ~ (p \\/ q) \u003C=\u003E ~ p /\\ ~ q\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_id_thm","title":"BoolAlg.conj_id_thm","content":"BoolAlg.conj_id_thm \nconj_id_thm \n\n |- !p. p /\\ true \u003C=\u003E p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_zero_thm","title":"BoolAlg.conj_zero_thm","content":"BoolAlg.conj_zero_thm \nconj_zero_thm \n\n |- !p. p /\\ false \u003C=\u003E false\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_idem_thm","title":"BoolAlg.conj_idem_thm","content":"BoolAlg.conj_idem_thm \nconj_idem_thm \n\n |- !p. p /\\ p \u003C=\u003E p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_comm_thm","title":"BoolAlg.conj_comm_thm","content":"BoolAlg.conj_comm_thm \nconj_comm_thm \n\n |- !p q. p /\\ q \u003C=\u003E q /\\ p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_assoc_thm","title":"BoolAlg.conj_assoc_thm","content":"BoolAlg.conj_assoc_thm \nconj_assoc_thm \n\n |- !p q r. p /\\ (q /\\ r) \u003C=\u003E (p /\\ q) /\\ r                              *)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_absorb_disj_thm","title":"BoolAlg.conj_absorb_disj_thm","content":"BoolAlg.conj_absorb_disj_thm \nconj_absorb_disj_thm \n\n |- !p q. p /\\ (p \\/ q) \u003C=\u003E p                                            *)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_dist_right_disj_thm","title":"BoolAlg.conj_dist_right_disj_thm","content":"BoolAlg.conj_dist_right_disj_thm \nconj_dist_right_disj_thm \n\n |- !p q r. p /\\ (q \\/ r) \u003C=\u003E (p /\\ q) \\/ (p /\\ r)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_dist_left_disj_thm","title":"BoolAlg.conj_dist_left_disj_thm","content":"BoolAlg.conj_dist_left_disj_thm \nconj_dist_left_disj_thm \n\n |- !p q r. (p \\/ q) /\\ r \u003C=\u003E (p /\\ r) \\/ (q /\\ r)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#conj_contr_thm","title":"BoolAlg.conj_contr_thm","content":"BoolAlg.conj_contr_thm \nconj_contr_thm \n\n |- !p. p /\\ ~ p \u003C=\u003E false\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#disj_id_thm","title":"BoolAlg.disj_id_thm","content":"BoolAlg.disj_id_thm \ndisj_id_thm \n\n |- !p. p \\/ false \u003C=\u003E p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#disj_zero_thm","title":"BoolAlg.disj_zero_thm","content":"BoolAlg.disj_zero_thm \ndisj_zero_thm \n\n |- !p. p \\/ true \u003C=\u003E true\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#disj_idem_thm","title":"BoolAlg.disj_idem_thm","content":"BoolAlg.disj_idem_thm \ndisj_idem_thm \n\n |- !p. p \\/ p \u003C=\u003E p \n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#disj_comm_thm","title":"BoolAlg.disj_comm_thm","content":"BoolAlg.disj_comm_thm \ndisj_comm_thm \n\n |- !p q. p \\/ q \u003C=\u003E q \\/ p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#disj_assoc_thm","title":"BoolAlg.disj_assoc_thm","content":"BoolAlg.disj_assoc_thm \ndisj_assoc_thm \n\n |- !p q r. p \\/ (q \\/ r) \u003C=\u003E (p \\/ q) \\/ r\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#disj_absorb_conj_thm","title":"BoolAlg.disj_absorb_conj_thm","content":"BoolAlg.disj_absorb_conj_thm \ndisj_absorb_conj_thm \n\n |- !p q. p \\/ (p /\\ q) \u003C=\u003E p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#disj_dist_right_conj_thm","title":"BoolAlg.disj_dist_right_conj_thm","content":"BoolAlg.disj_dist_right_conj_thm \ndisj_dist_right_conj_thm \n\n |- !p q r. p \\/ (q /\\ r) \u003C=\u003E (p \\/ q) /\\ (p \\/ r)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#disj_dist_left_conj_thm","title":"BoolAlg.disj_dist_left_conj_thm","content":"BoolAlg.disj_dist_left_conj_thm \ndisj_dist_left_conj_thm \n\n |- !p q r. (p /\\ q) \\/ r \u003C=\u003E (p \\/ r) /\\ (q \\/ r)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#imp_right_zero_thm","title":"BoolAlg.imp_right_zero_thm","content":"BoolAlg.imp_right_zero_thm \nimp_right_zero_thm \n\n |- !p. p ==\u003E true\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#imp_left_id_thm","title":"BoolAlg.imp_left_id_thm","content":"BoolAlg.imp_left_id_thm \nimp_left_id_thm \n\n |- !p. (true ==\u003E p) \u003C=\u003E p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#imp_left_zero_thm","title":"BoolAlg.imp_left_zero_thm","content":"BoolAlg.imp_left_zero_thm \nimp_left_zero_thm \n\n |- !p. false ==\u003E p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#imp_refl_thm","title":"BoolAlg.imp_refl_thm","content":"BoolAlg.imp_refl_thm \nimp_refl_thm \n\n |- !p. p ==\u003E p\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#imp_dist_left_disj_thm","title":"BoolAlg.imp_dist_left_disj_thm","content":"BoolAlg.imp_dist_left_disj_thm \nimp_dist_left_disj_thm \n\n |- !p q r. (p \\/ q ==\u003E r) \u003C=\u003E (p ==\u003E r) /\\ (q ==\u003E r)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#imp_dist_right_conj_thm","title":"BoolAlg.imp_dist_right_conj_thm","content":"BoolAlg.imp_dist_right_conj_thm \nimp_dist_right_conj_thm \n\n |- !p q r. (p ==\u003E q /\\ r) \u003C=\u003E (p ==\u003E q) /\\ (p ==\u003E r)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#forall_dist_conj_thm","title":"BoolAlg.forall_dist_conj_thm","content":"BoolAlg.forall_dist_conj_thm \nforall_dist_conj_thm \n\n |- !P Q. (!x. P x /\\ Q x) \u003C=\u003E (!x. P x) /\\ (!x. Q x)\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#forall_one_point_thm","title":"BoolAlg.forall_one_point_thm","content":"BoolAlg.forall_one_point_thm \nforall_one_point_thm \n\n |- !P a. (!x. x = a ==\u003E P x) \u003C=\u003E P a\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#forall_null_thm","title":"BoolAlg.forall_null_thm","content":"BoolAlg.forall_null_thm \nforall_null_thm \n\n |- !t. (!(x:\u0027a). t) \u003C=\u003E t\n"},{"uri":"http://localhost:8901/reference/hol-boolalg.html#load","title":"BoolAlg.load","content":"BoolAlg.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html","title":"BoolClass","content":"BoolClass \n\n This module derives further predicate logic theorems and inference rules.\n Unlike all preceding derivations, these all use the Axiom of Choice (i.e.\n \u0027select_ax\u0027), and thus could be considered as classical logic.  However, \n note that some of these (such as \u0027exists_rule\u0027) are actually derivable in\n intuitionistic logic if an alternative definition of existential         \n quantification is used (as in HOL Light).                                                                                        \n \nBoolClass.select_rule \nselect_rule \nBoolClass.exists_rule \nexists_rule \nBoolClass.select_eq_thm \nselect_eq_thm \nBoolClass.exists_dist_disj_thm \nexists_dist_disj_thm \nBoolClass.exists_one_point_thm \nexists_one_point_thm \nBoolClass.exists_null_thm \nexists_null_thm \nBoolClass.uexists_thm1 \nuexists_thm1 \nBoolClass.uexists_thm2 \nuexists_thm2 \nBoolClass.uexists_thm3 \nuexists_thm3 \nBoolClass.uexists_one_point_thm \nuexists_one_point_thm \nBoolClass.skolem_thm \nskolem_thm \nBoolClass.unique_skolem_thm \nunique_skolem_thm \nBoolClass.not_dist_exists_thm \nnot_dist_exists_thm \nBoolClass.excluded_middle_thm \nexcluded_middle_thm \nBoolClass.bool_cases_thm \nbool_cases_thm \nBoolClass.ccontr_lemma \nccontr_lemma \nBoolClass.ccontr_rule \nccontr_rule \nBoolClass.not_dneg_thm \nnot_dneg_thm \nBoolClass.imp_disj_thm \nimp_disj_thm \nBoolClass.not_dist_conj_thm \nnot_dist_conj_thm \nBoolClass.not_dist_forall_thm \nnot_dist_forall_thm \nBoolClass.cond_true_thm \ncond_true_thm \nBoolClass.cond_false_thm \ncond_false_thm \nBoolClass.cond_idem_thm \ncond_idem_thm \nBoolClass.cond_not_thm \ncond_not_thm \nBoolClass.load \nload"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#select_rule","title":"BoolClass.select_rule","content":"BoolClass.select_rule \nselect_rule \n\n This is the existential selection rule.  It strips off the existential   \n quantifier from the supplied theorem, and replaces each occurrence of the\n binding variable in the body with the selection operator applied to the  \n original body (with the same binding variable).                          \n                                                                          \n       A |- ?x. p                                                         \n    ----------------                                                      \n    A |- p[(@x.p)/x]                                                      \n\n See also: exists_rule.\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#exists_rule","title":"BoolClass.exists_rule","content":"BoolClass.exists_rule \nexists_rule \n\n This is the existential introduction rule.  It takes an existential term, \n a witness term and a theorem, where the theorem\u0027s conclusion is the body  \n of the existential term but with the witness term replacing occurrences of\n its binding variable.  It returns a theorem stating that the supplied     \n existential term holds, under the same assumptions as the supplied        \n theorem.                                                                  \n                                                                           \n    \u0060?x. p\u0060   \u0060t\u0060   A |- p[t/x]                                            \n    ---------------------------                                            \n            A |- ?x. p                                                     \n \n See also: choose_rule, select_rule, mk_exists_rule.\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#select_eq_thm","title":"BoolClass.select_eq_thm","content":"BoolClass.select_eq_thm \nselect_eq_thm \n\n |- !(a:\u0027a). (@x. x = a) = a\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#exists_dist_disj_thm","title":"BoolClass.exists_dist_disj_thm","content":"BoolClass.exists_dist_disj_thm \nexists_dist_disj_thm \n\n |- !P Q. (?x. P x \\/ Q x) \u003C=\u003E (?x. P x) \\/ (?x. Q x)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#exists_one_point_thm","title":"BoolClass.exists_one_point_thm","content":"BoolClass.exists_one_point_thm \nexists_one_point_thm \n\n |- !P a. (?x. x = a /\\ P x) \u003C=\u003E P a\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#exists_null_thm","title":"BoolClass.exists_null_thm","content":"BoolClass.exists_null_thm \nexists_null_thm \n\n |- !t. (?x. t) \u003C=\u003E t\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#uexists_thm1","title":"BoolClass.uexists_thm1","content":"BoolClass.uexists_thm1 \nuexists_thm1 \n\n |- !P. (?!x. P x) \u003C=\u003E (?x. P x /\\ (!y. P y ==\u003E y = x))\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#uexists_thm2","title":"BoolClass.uexists_thm2","content":"BoolClass.uexists_thm2 \nuexists_thm2 \n\n |- !P. (?!x. P x) \u003C=\u003E (?x. !y. P y \u003C=\u003E x = y)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#uexists_thm3","title":"BoolClass.uexists_thm3","content":"BoolClass.uexists_thm3 \nuexists_thm3 \n\n |- !P. (?!x. P x) \u003C=\u003E (?x. P x) /\\ (!x x\u0027. P x /\\ P x\u0027 ==\u003E x = x\u0027)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#uexists_one_point_thm","title":"BoolClass.uexists_one_point_thm","content":"BoolClass.uexists_one_point_thm \nuexists_one_point_thm \n\n |- !P a. (?!x. x = a /\\ P x) \u003C=\u003E P a\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#skolem_thm","title":"BoolClass.skolem_thm","content":"BoolClass.skolem_thm \nskolem_thm \n\n |- !P. (!x. ?y. P x y) \u003C=\u003E (?f. !x. P x (f x))\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#unique_skolem_thm","title":"BoolClass.unique_skolem_thm","content":"BoolClass.unique_skolem_thm \nunique_skolem_thm \n\n |- !P. (!x. ?!y. P x y) \u003C=\u003E (?f. !x y. P x y \u003C=\u003E f x = y)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#not_dist_exists_thm","title":"BoolClass.not_dist_exists_thm","content":"BoolClass.not_dist_exists_thm \nnot_dist_exists_thm \n\n |- !P. ~ (?x. P x) \u003C=\u003E (!x. ~ P x)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#excluded_middle_thm","title":"BoolClass.excluded_middle_thm","content":"BoolClass.excluded_middle_thm \nexcluded_middle_thm \n\n    |- !p. p \\/ ~p\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#bool_cases_thm","title":"BoolClass.bool_cases_thm","content":"BoolClass.bool_cases_thm \nbool_cases_thm \n\n |- !p. (p \u003C=\u003E true) \\/ (p \u003C=\u003E false)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#ccontr_lemma","title":"BoolClass.ccontr_lemma","content":"BoolClass.ccontr_lemma \nccontr_lemma \n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#ccontr_rule","title":"BoolClass.ccontr_rule","content":"BoolClass.ccontr_rule \nccontr_rule \n\n This is the classical contradiction rule.  It takes a boolean term and a theorem\n with falsity as its conclusion.  It returns a theorem with the supplied term as\n its conclusion, and with the same assumptions as the supplied theorem but with\n the logical negation of the supplied term removed.  Note that the logical\n negation of the supplied term does not have to be in the supplied theorem\u0027s\n assumptions for the rule to succeed.\n \n       \u0060p\u0060   A |- false\n       ----------------\n         A\\{~p} |- p\n \n See also: contr_rule, deduct_contrapos_rule.\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#not_dneg_thm","title":"BoolClass.not_dneg_thm","content":"BoolClass.not_dneg_thm \nnot_dneg_thm \n\n |- !p. ~ ~ p \u003C=\u003E p\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#imp_disj_thm","title":"BoolClass.imp_disj_thm","content":"BoolClass.imp_disj_thm \nimp_disj_thm \n\n |- !p q. (p ==\u003E q) \u003C=\u003E (~ p \\/ q)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#not_dist_conj_thm","title":"BoolClass.not_dist_conj_thm","content":"BoolClass.not_dist_conj_thm \nnot_dist_conj_thm \n\n |- !p q. ~ (p /\\ q) \u003C=\u003E ~ p \\/ ~ q\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#not_dist_forall_thm","title":"BoolClass.not_dist_forall_thm","content":"BoolClass.not_dist_forall_thm \nnot_dist_forall_thm \n\n |- !P. ~ (!x. P x) \u003C=\u003E (?x. ~ P x)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#cond_true_thm","title":"BoolClass.cond_true_thm","content":"BoolClass.cond_true_thm \ncond_true_thm \n\n |- !t1 t2. (if true then t1 else t2) = t1\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#cond_false_thm","title":"BoolClass.cond_false_thm","content":"BoolClass.cond_false_thm \ncond_false_thm \n\n |- !t1 t2. (if false then t1 else t2) = t2 \n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#cond_idem_thm","title":"BoolClass.cond_idem_thm","content":"BoolClass.cond_idem_thm \ncond_idem_thm \n\n |- !p t. (if p then t else t) = t\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#cond_not_thm","title":"BoolClass.cond_not_thm","content":"BoolClass.cond_not_thm \ncond_not_thm \n\n |- !p t1 t2. (if ~ p then t1 else t2) = (if p then t2 else t1)\n"},{"uri":"http://localhost:8901/reference/hol-boolclass.html#load","title":"BoolClass.load","content":"BoolClass.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html","title":"CoreThry","content":"CoreThry \n\nThis module completes the logical core for HOL by defining the core       \ntheory.  This involves giving declarations, definitions and axioms for all\nthe HOL theory objects anticipated by the language and inference kernels. \n \nCoreThry.bool_ty \nbool_ty \nCoreThry.true_def \ntrue_def \nCoreThry.true_tm \ntrue_tm \nCoreThry.forall_def \nforall_def \nCoreThry.conj_def \nconj_def \nCoreThry.exists_def \nexists_def \nCoreThry.one_one_def \none_one_def \nCoreThry.type_definition_def \ntype_definition_def \nCoreThry.eta_ax \neta_ax \nCoreThry.imp_antisym_ax \nimp_antisym_ax \nCoreThry.select_ax \nselect_ax \nCoreThry.load \nload"},{"uri":"http://localhost:8901/reference/hol-corethry.html#bool_ty","title":"CoreThry.bool_ty","content":"CoreThry.bool_ty \nbool_ty \n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#true_def","title":"CoreThry.true_def","content":"CoreThry.true_def \ntrue_def \n\n It is the instance of the equality reflexive property for the boolean      \n identity function.\n\n |- true \u003C=\u003E (\\(p:bool). p) = (\\p. p)\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#true_tm","title":"CoreThry.true_tm","content":"CoreThry.true_tm \ntrue_tm \n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#forall_def","title":"CoreThry.forall_def","content":"CoreThry.forall_def \nforall_def \n\n The universal quantifier is defined using equality and truth, simply as  \n the function that returns whether its predicate argument returns true for\n every input.                                                             \n\n |- $! = (\\(P:\u0027a-\u003Ebool). P = (\\x. true))\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#conj_def","title":"CoreThry.conj_def","content":"CoreThry.conj_def \nconj_def \n\n Conjunction is defined here using implication and the universal         \n quantifier, as the binary function that returns whether, for any boolean\n value, the arguments together implying the value necessarily implies the\n value.                                                                  \n\n |- $/\\ = (\\p1 p2. !p. (p1 ==\u003E (p2 ==\u003E p)) ==\u003E p)\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#exists_def","title":"CoreThry.exists_def","content":"CoreThry.exists_def \nexists_def \n\n The existential quantifier is defined using just selection, as the      \n function that returns whether any element selected as satisfying the    \n function\u0027s predicate argument necessarily satisfies the predicate.  Note\n that if there is no element satisfying the predicate, then not even the \n result of the selection operation can satisfy the predicate.            \n\n |- $? = (\\(P:\u0027a-\u003Ebool). P ($@ P))\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#one_one_def","title":"CoreThry.one_one_def","content":"CoreThry.one_one_def \none_one_def \n\n The one-to-one predicate is defined as the function that returns whether \n its function argument having the same result when applied to two elements\n necessarily implies that the two elements are equal.                     \n\n |- ONE_ONE = (\\(f:\u0027a-\u003E\u0027b). !x1 x2. f x1 = f x2 ==\u003E x1 = x2)\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#type_definition_def","title":"CoreThry.type_definition_def","content":"CoreThry.type_definition_def \ntype_definition_def \n\n This predicate is used in the theorem created by the primitive type     \n constant definition command to assert that there is a bijection from the\n new type to its representation type.  It is defined as the function that\n takes a characteristic function (a predicate for elements of the        \n representation type) and a representation function (mapping elements of \n the new type to the representation type), and returns whether the       \n representation function is one-to-one and maps onto precisely those     \n elements in the representation type that satisfy the characteristic     \n function.                                                               \n\n |- TYPE_DEFINITION = (\\P (rep:\u0027b-\u003E\u0027a). ONE_ONE rep /\\ (!x. P x \u003C=\u003E (?y. x = rep y)))\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#eta_ax","title":"CoreThry.eta_ax","content":"CoreThry.eta_ax \neta_ax \n\n This axiom states that, for any given function, the lambda abstraction  \n formed by applying the function to the binding variable is equal to the \n function.                                                               \n\n |- !(f:\u0027a-\u003E\u0027b). (\\x. f x) = f\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#imp_antisym_ax","title":"CoreThry.imp_antisym_ax","content":"CoreThry.imp_antisym_ax \nimp_antisym_ax \n\n This axiom states the antisymmetry property for implication.\n\n |- !p1 p2. (p1 ==\u003E p2) ==\u003E ((p2 ==\u003E p1) ==\u003E (p1 \u003C=\u003E p2))\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#select_ax","title":"CoreThry.select_ax","content":"CoreThry.select_ax \nselect_ax \n\n This axiom states a crucial property about the selection operator, namely\n that any element satisfying a given predicate implies that the selected  \n element for the predicate satisfies the predicate.  Note that it says    \n nothing about when there is no element that can satisfy the predicate.   \n\n |- !(P:\u0027a-\u003Ebool) x. P x ==\u003E P ($@ P)\n"},{"uri":"http://localhost:8901/reference/hol-corethry.html#load","title":"CoreThry.load","content":"CoreThry.load \nload \n"},{"uri":"http://localhost:8901/reference/hol-dltree.html","title":"DLTree","content":"DLTree \n\n Questo modulo costituisce una libreria di operazioni su alberi dinamici \n di ricerca - alberi binari auto-bilanciati che memorizzano informazioni \n su nodi ordinati in base a un indice rispetto alla relazione (\u003C).\n \nDLTree.dltree\u003C\u0027a, \u0027b\u003E \ndltree\u003C\u0027a, \u0027b\u003E \nDLTree.dltree_empty \ndltree_empty \nDLTree.dltree_elems \ndltree_elems \nDLTree.level \nlevel \nDLTree.rightmost_elem \nrightmost_elem \nDLTree.right_app \nright_app \nDLTree.decrease_level \ndecrease_level \nDLTree.skew \nskew \nDLTree.split \nsplit \nDLTree.dltree_insert \ndltree_insert \nDLTree.dltree_delete \ndltree_delete \nDLTree.dltree_elem \ndltree_elem \nDLTree.dltree_lookup \ndltree_lookup \nDLTree.dltree_mem \ndltree_mem"},{"uri":"http://localhost:8901/reference/hol-dltree.html#dltree_empty","title":"DLTree.dltree_empty","content":"DLTree.dltree_empty \ndltree_empty \n\n Restituisce un nuovo dltree vuoto.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#dltree_elems","title":"DLTree.dltree_elems","content":"DLTree.dltree_elems \ndltree_elems \n\n Converte l\u0027informazione mantenuta in un dato albero di ricerca \n binario in una lista di associazione ordinata per indice.                                   \n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#level","title":"DLTree.level","content":"DLTree.level \nlevel \n\n Restituisce il livello dell\u0027albero.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#rightmost_elem","title":"DLTree.rightmost_elem","content":"DLTree.rightmost_elem \nrightmost_elem \n\n Restituisce come una coppia il nodo pi\u00F9 a destra nell\u0027albero. \n Se l\u0027albero \u00E8 solo una Leaf, allora non ha nodi e in questo \n caso la funzione restituisce solo la coppia in input.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#right_app","title":"DLTree.right_app","content":"DLTree.right_app \nright_app \n\n Applica una funzione al primo nodo pi\u00F9 a destra di un albero.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#decrease_level","title":"DLTree.decrease_level","content":"DLTree.decrease_level \ndecrease_level \n\n Decresce il livello della radice di un albero a un dato livello pi\u00F9 basso. \n Se il livello dato \u00E8 maggiore o uguale al livello originario l\u0027albero rimane \n invariato.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#skew","title":"DLTree.skew","content":"DLTree.skew \nskew \n\n L\u0027operazione skew esegue una singola rotazione a destra per\n ribilanciare quando il figlio sinistro ha lo stesso livello\n del suo padre.     \n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#split","title":"DLTree.split","content":"DLTree.split \nsplit \n\n L\u0027operazione di split esegue una singola rotazione a sinistra per  \n ribilanciare quando il nipote destro-destro ha lo stesso livello  \n del suo nonno, incrementando il livello del nodo radice risultante.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#dltree_insert","title":"DLTree.dltree_insert","content":"DLTree.dltree_insert \ndltree_insert \n\n Inserisce in un dato albero di ricerca un singolo elemento indicizzato.\n Fallisce se l\u0027albero contiene gi\u00E0 un entry per l\u0027indicie fornito.      \n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#dltree_delete","title":"DLTree.dltree_delete","content":"DLTree.dltree_delete \ndltree_delete \n\n Cancella l\u0027entry all\u0027indice fornito in un dato albero di ricerca. \n Fallisce se l\u0027albero non contiene alcuna entry per l\u0027indice fornito.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#dltree_elem","title":"DLTree.dltree_elem","content":"DLTree.dltree_elem \ndltree_elem \n\n Restituisce l\u0027indice e l\u0027elemento mantenuto all\u0027indice fornito in \n un dato albero di ricerca. Fallisce se l\u0027albero non ha entry per \n l\u0027indice fornito.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#dltree_lookup","title":"DLTree.dltree_lookup","content":"DLTree.dltree_lookup \ndltree_lookup \n\n Restituisce l\u0027elemento mantenuto all\u0027indice fornito in un dato albero \n di ricerca.\n"},{"uri":"http://localhost:8901/reference/hol-dltree.html#dltree_mem","title":"DLTree.dltree_mem","content":"DLTree.dltree_mem \ndltree_mem \n\n Restituisce \u0022true\u0022 sse l\u0027indice fornito occorre in un dato albero di ricerca.\n"},{"uri":"http://localhost:8901/reference/hol-dltree-dltree-2.html","title":"dltree\u003C\u0027a, \u0027b\u003E","content":"dltree\u003C\u0027a, \u0027b\u003E \n\n Il datatype \u0027dltree\u0027 \u00E8 un datatype di albero di ricerca binario, dove ad \n ogni nodo sono mantenuti un indice e un elemento, e le foglie non hanno \n alcuna informazione. Il confronto tra indici \u00E8 fatto usando la relazione \n di oridinamento totale polimorfica \u0027(\u003C)\u0027. Ogni nodo mantiene anche un \n intero per il suo livello AA, per poter mantenere l\u0027invariante AA. Si noti \n che non c\u0027\u00E8 alcuna necessit\u00E0 che le foglie mantengano il proprio livello \n perch\u00E9 esso \u00E8 sempre 0.\n \ndltree\u003C\u0027a, \u0027b\u003E.Node \nNode \ndltree\u003C\u0027a, \u0027b\u003E.Leaf \nLeaf"},{"uri":"http://localhost:8901/reference/hol-dltree-dltree-2.html#Node","title":"dltree\u003C\u0027a, \u0027b\u003E.Node","content":"dltree\u003C\u0027a, \u0027b\u003E.Node \nNode \n"},{"uri":"http://localhost:8901/reference/hol-dltree-dltree-2.html#Leaf","title":"dltree\u003C\u0027a, \u0027b\u003E.Leaf","content":"dltree\u003C\u0027a, \u0027b\u003E.Leaf \nLeaf \n"},{"uri":"http://localhost:8901/reference/hol-def1.html","title":"Def1","content":"Def1 \n\nThis module defines a command for defining type bijection constants for a\ngiven type constant definition.                                                                                                                                \n \nDef1.the_type_bijections \nthe_type_bijections \nDef1.get_type_bijection_info \nget_type_bijection_info \nDef1.get_type_bijections \nget_type_bijections \nDef1.get_all_type_bijections \nget_all_type_bijections \nDef1.get_all_type_bijection_info \nget_all_type_bijection_info \nDef1.new_type_bijections \nnew_type_bijections"},{"uri":"http://localhost:8901/reference/hol-def1.html#the_type_bijections","title":"Def1.the_type_bijections","content":"Def1.the_type_bijections \nthe_type_bijections \n"},{"uri":"http://localhost:8901/reference/hol-def1.html#get_type_bijection_info","title":"Def1.get_type_bijection_info","content":"Def1.get_type_bijection_info \nget_type_bijection_info \n"},{"uri":"http://localhost:8901/reference/hol-def1.html#get_type_bijections","title":"Def1.get_type_bijections","content":"Def1.get_type_bijections \nget_type_bijections \n"},{"uri":"http://localhost:8901/reference/hol-def1.html#get_all_type_bijections","title":"Def1.get_all_type_bijections","content":"Def1.get_all_type_bijections \nget_all_type_bijections \n"},{"uri":"http://localhost:8901/reference/hol-def1.html#get_all_type_bijection_info","title":"Def1.get_all_type_bijection_info","content":"Def1.get_all_type_bijection_info \nget_all_type_bijection_info \n"},{"uri":"http://localhost:8901/reference/hol-def1.html#new_type_bijections","title":"Def1.new_type_bijections","content":"Def1.new_type_bijections \nnew_type_bijections \n"},{"uri":"http://localhost:8901/reference/hol-def2.html","title":"Def2","content":"Def2 \n\nThis module defines two specialised forms of definition for function    \nconstants.  The first form is for non-recursive functions and the second\nis for recursive functions.                                                                                                                                                                                                                                   \n \nDef2.extract \nextract \nDef2.inject \ninject \nDef2.remove \nremove \nDef2.bag_subtract \nbag_subtract \nDef2.flat_conjuncts_rule0 \nflat_conjuncts_rule0 \nDef2.flat_conjuncts_rule \nflat_conjuncts_rule \nDef2.the_fun_defs \nthe_fun_defs \nDef2.get_fun_definition \nget_fun_definition \nDef2.get_all_fun_definitions \nget_all_fun_definitions \nDef2.fst_snd_conv \nfst_snd_conv \nDef2.depair_instns0 \ndepair_instns0 \nDef2.depair_instns \ndepair_instns \nDef2.new_fun_definition \nnew_fun_definition \nDef2.strip_vararg_comb \nstrip_vararg_comb \nDef2.primrec_theorem_info \nprimrec_theorem_info \nDef2.def_term_info \ndef_term_info \nDef2.create_primrec_instns \ncreate_primrec_instns \nDef2.new_recursive_fun_definition \nnew_recursive_fun_definition"},{"uri":"http://localhost:8901/reference/hol-def2.html#extract","title":"Def2.extract","content":"Def2.extract \nextract \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#inject","title":"Def2.inject","content":"Def2.inject \ninject \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#remove","title":"Def2.remove","content":"Def2.remove \nremove \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#bag_subtract","title":"Def2.bag_subtract","content":"Def2.bag_subtract \nbag_subtract \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#flat_conjuncts_rule0","title":"Def2.flat_conjuncts_rule0","content":"Def2.flat_conjuncts_rule0 \nflat_conjuncts_rule0 \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#flat_conjuncts_rule","title":"Def2.flat_conjuncts_rule","content":"Def2.flat_conjuncts_rule \nflat_conjuncts_rule \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#the_fun_defs","title":"Def2.the_fun_defs","content":"Def2.the_fun_defs \nthe_fun_defs \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#get_fun_definition","title":"Def2.get_fun_definition","content":"Def2.get_fun_definition \nget_fun_definition \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#get_all_fun_definitions","title":"Def2.get_all_fun_definitions","content":"Def2.get_all_fun_definitions \nget_all_fun_definitions \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#fst_snd_conv","title":"Def2.fst_snd_conv","content":"Def2.fst_snd_conv \nfst_snd_conv \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#depair_instns0","title":"Def2.depair_instns0","content":"Def2.depair_instns0 \ndepair_instns0 \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#depair_instns","title":"Def2.depair_instns","content":"Def2.depair_instns \ndepair_instns \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#new_fun_definition","title":"Def2.new_fun_definition","content":"Def2.new_fun_definition \nnew_fun_definition \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#strip_vararg_comb","title":"Def2.strip_vararg_comb","content":"Def2.strip_vararg_comb \nstrip_vararg_comb \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#primrec_theorem_info","title":"Def2.primrec_theorem_info","content":"Def2.primrec_theorem_info \nprimrec_theorem_info \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#def_term_info","title":"Def2.def_term_info","content":"Def2.def_term_info \ndef_term_info \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#create_primrec_instns","title":"Def2.create_primrec_instns","content":"Def2.create_primrec_instns \ncreate_primrec_instns \n"},{"uri":"http://localhost:8901/reference/hol-def2.html#new_recursive_fun_definition","title":"Def2.new_recursive_fun_definition","content":"Def2.new_recursive_fun_definition \nnew_recursive_fun_definition \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html","title":"Dmodes","content":"Dmodes \n\nThis module implements the display modes mechanism, for configuring how  \nthe pretty printers display types and terms.  Note that the display modes\nmake no difference to the way that types and terms are parsed.   \n \nDmodes.level \nlevel \nDmodes.string_of_level \nstring_of_level \nDmodes.the_type_annotation_mode \nthe_type_annotation_mode \nDmodes.set_type_annotation_mode \nset_type_annotation_mode \nDmodes.get_type_annotation_mode \nget_type_annotation_mode \nDmodes.the_tyvar_marking_mode \nthe_tyvar_marking_mode \nDmodes.set_tyvar_marking_mode \nset_tyvar_marking_mode \nDmodes.get_tyvar_marking_mode \nget_tyvar_marking_mode \nDmodes.the_var_marking_mode \nthe_var_marking_mode \nDmodes.set_var_marking_mode \nset_var_marking_mode \nDmodes.get_var_marking_mode \nget_var_marking_mode \nDmodes.the_language_level_mode \nthe_language_level_mode \nDmodes.set_language_level_mode \nset_language_level_mode \nDmodes.get_language_level_mode \nget_language_level_mode \nDmodes.show_display_modes \nshow_display_modes"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#string_of_level","title":"Dmodes.string_of_level","content":"Dmodes.string_of_level \nstring_of_level \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#the_type_annotation_mode","title":"Dmodes.the_type_annotation_mode","content":"Dmodes.the_type_annotation_mode \nthe_type_annotation_mode \n\nThis is used to determine which term atoms are type-annotated in printed\noutput.  In \u0027Minimal\u0027 mode, which is sufficient for disambiguation, a   \nminimal set of atoms to be annotated is chosen according to a heuristic \nwith the intention of maximising readability.  In \u0027Full\u0027 mode, every var\natom and every polymorphic const atom is type-annotated.  The default   \nsetting is \u0027Minimal\u0027.                                                   \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#set_type_annotation_mode","title":"Dmodes.set_type_annotation_mode","content":"Dmodes.set_type_annotation_mode \nset_type_annotation_mode \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#get_type_annotation_mode","title":"Dmodes.get_type_annotation_mode","content":"Dmodes.get_type_annotation_mode \nget_type_annotation_mode \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#the_tyvar_marking_mode","title":"Dmodes.the_tyvar_marking_mode","content":"Dmodes.the_tyvar_marking_mode \nthe_tyvar_marking_mode \n\nThis is used to determine which tyvars are marked with an apostrophe char\nprepended to their name in printed output.  In \u0027Minimal\u0027 mode, which is  \nsufficient for disambiguation, only those tyvars with a name that clashes\nwith a type constant\u0027s name are marked.  In \u0027Full\u0027 mode, all tyvars are  \nmarked.  The default setting is \u0027Full\u0027.                                  \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#set_tyvar_marking_mode","title":"Dmodes.set_tyvar_marking_mode","content":"Dmodes.set_tyvar_marking_mode \nset_tyvar_marking_mode \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#get_tyvar_marking_mode","title":"Dmodes.get_tyvar_marking_mode","content":"Dmodes.get_tyvar_marking_mode \nget_tyvar_marking_mode \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#the_var_marking_mode","title":"Dmodes.the_var_marking_mode","content":"Dmodes.the_var_marking_mode \nthe_var_marking_mode \n\nThis is used to determine which vars are marked with a \u0027%\u0027 char prepended \nto their name in printed output.  In \u0027Minimal\u0027 mode, which is sufficient  \nfor disambiguation, only those vars with a name that clashes with a       \nconstant\u0027s name are marked.  In \u0027Full\u0027 mode, all variables are marked.    \nThe default setting is \u0027Minimal\u0027.                                         \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#set_var_marking_mode","title":"Dmodes.set_var_marking_mode","content":"Dmodes.set_var_marking_mode \nset_var_marking_mode \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#get_var_marking_mode","title":"Dmodes.get_var_marking_mode","content":"Dmodes.get_var_marking_mode \nget_var_marking_mode \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#the_language_level_mode","title":"Dmodes.the_language_level_mode","content":"Dmodes.the_language_level_mode \nthe_language_level_mode \n\nThis is used to determine whether primitive or full HOL language terms\nare printed.  The \u0027Minimal\u0027 mode is for primitive HOL language.  The  \ndefault setting is \u0027Full\u0027.\n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#set_language_level_mode","title":"Dmodes.set_language_level_mode","content":"Dmodes.set_language_level_mode \nset_language_level_mode \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#get_language_level_mode","title":"Dmodes.get_language_level_mode","content":"Dmodes.get_language_level_mode \nget_language_level_mode \n"},{"uri":"http://localhost:8901/reference/hol-dmodes.html#show_display_modes","title":"Dmodes.show_display_modes","content":"Dmodes.show_display_modes \nshow_display_modes \n"},{"uri":"http://localhost:8901/reference/hol-dmodes-level.html","title":"level","content":"level \n \nlevel.Minimal \nMinimal \nlevel.Full \nFull"},{"uri":"http://localhost:8901/reference/hol-dmodes-level.html#Minimal","title":"level.Minimal","content":"level.Minimal \nMinimal \n"},{"uri":"http://localhost:8901/reference/hol-dmodes-level.html#Full","title":"level.Full","content":"level.Full \nFull \n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html","title":"EqCong","content":"EqCong \n\n This module implements equality congruence rules for equality, function\n application and predicate logic operators.  These are all trivial      \n derivations of the primitive congruence rules \u0027mk_comb_rule\u0027 and       \n \u0027mk_abs_rule\u0027 (see \u0027Thm\u0027 module) and the derived congruence rules      \n \u0027mk_comb1_rule\u0027 and \u0027mk_comb2_rule\u0027 (see \u0027Equal\u0027 module).              \n \nEqCong.is_bool_eqthm \nis_bool_eqthm \nEqCong.mk_bin_rule \nmk_bin_rule \nEqCong.mk_bin1_rule \nmk_bin1_rule \nEqCong.mk_bin2_rule \nmk_bin2_rule \nEqCong.mk_eq_rule \nmk_eq_rule \nEqCong.mk_eq1_rule \nmk_eq1_rule \nEqCong.mk_eq2_rule \nmk_eq2_rule \nEqCong.not_fn \nnot_fn \nEqCong.mk_not_rule \nmk_not_rule \nEqCong.conj_fn \nconj_fn \nEqCong.mk_conj_rule \nmk_conj_rule \nEqCong.mk_conj1_rule \nmk_conj1_rule \nEqCong.mk_conj2_rule \nmk_conj2_rule \nEqCong.disj_fn \ndisj_fn \nEqCong.mk_disj_rule \nmk_disj_rule \nEqCong.mk_disj1_rule \nmk_disj1_rule \nEqCong.mk_disj2_rule \nmk_disj2_rule \nEqCong.imp_fn \nimp_fn \nEqCong.mk_imp_rule \nmk_imp_rule \nEqCong.mk_imp1_rule \nmk_imp1_rule \nEqCong.mk_imp2_rule \nmk_imp2_rule \nEqCong.mk_forall_rule \nmk_forall_rule \nEqCong.mk_exists_rule \nmk_exists_rule \nEqCong.mk_uexists_rule \nmk_uexists_rule \nEqCong.mk_select_rule \nmk_select_rule"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#is_bool_eqthm","title":"EqCong.is_bool_eqthm","content":"EqCong.is_bool_eqthm \nis_bool_eqthm \n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_bin_rule","title":"EqCong.mk_bin_rule","content":"EqCong.mk_bin_rule \nmk_bin_rule \n\n This is the equality congruence rule for binary function application.  It\n takes a binary function term and two equality theorems, and applies the  \n function in curried form to corresponding sides of each theorem, under   \n their unioned assumptions.  The type of the supplied function must be a  \n binary curried function type, with first and second domain types equal to\n the type of each side of their corresponding theorems.                   \n                                                                          \n    \u0060f\u0060   A1 |- s1 = s2    A2 |- t1 = t2                                  \n    ------------------------------------                                  \n        A1 u A2 |- f s1 t1 = f s2 t2                                      \n\n See also: mk_bin1_rule, mk_bin2_rule, mk_comb_rule, mk_conj_rule, mk_disj_rule,\n mk_imp_rule, mk_eq_rule, mk_pair_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_bin1_rule","title":"EqCong.mk_bin1_rule","content":"EqCong.mk_bin1_rule \nmk_bin1_rule \n\n This is the equality congruence rule for binary function LHS application.\n It takes a binary function term, an equality theorem and a RHS argument  \n term, and applies the function in curried form to corresponding sides of \n the theorem as its LHS argument and the supplied RHS argument.  The type \n of the supplied function must be a binary curried function type, with    \n first domain type equal to the type of each side of the theorem, and     \n second domain type equal to the type of the RHS argument term.           \n                                                                          \n    \u0060f\u0060   |- s1 = s2   \u0060t\u0060                                                \n    ----------------------                                                \n      |- f s1 t = f s2 t                                                  \n\n See also: mk_bin2_rule, mk_bin_rule, mk_comb_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_bin2_rule","title":"EqCong.mk_bin2_rule","content":"EqCong.mk_bin2_rule \nmk_bin2_rule \n\n This is the equality congruence rule for binary function RHS application. \n It takes a binary function term, a LHS argument term and an equality      \n theorem, and applies the function in curried form to the supplied LHS     \n argument and corresponding sides of the theorem as its RHS argument.  The \n type of the supplied function must be a binary curried function type, with\n first domain type equal to the type of the LHS argument term, and second  \n domain type equal to the type of each side of the theorem.                \n                                                                           \n    \u0060f\u0060   \u0060s\u0060   |- t1 = t2                                                 \n    ----------------------                                                 \n      |- f s t1 = f s t2                                                   \n\n See also: mk_bin1_rule, mk_bin_rule, mk_comb_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_eq_rule","title":"EqCong.mk_eq_rule","content":"EqCong.mk_eq_rule \nmk_eq_rule \n\n This is the equality congruence rule for equality.  It takes two equality  \n theorems, and equates corresponding sides of the first theorem with the    \n second, unioning the assumptions.  The types of each side of each equation \n must all be equal.                                                         \n                                                                            \n    A1 |- s1 = s2    A2 |- t1 = t2                                          \n    ------------------------------                                          \n    A1 u A2 |- s1 = t1 \u003C=\u003E s2 = t2                                          \n\n See also: mk_eq1_rule, mk_eq2_rule, mk_eq_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_eq1_rule","title":"EqCong.mk_eq1_rule","content":"EqCong.mk_eq1_rule \nmk_eq1_rule \n\n This is the equality congruence rule for equality LHS.  It takes an       \n equality theorem and a term, and equates each side of the theorem with the\n supplied term.  The type of the supplied term must equal the types of each\n side of the supplied theorem.                                             \n                                                                           \n      A |- s1 = s2   \u0060t\u0060                                                   \n    ----------------------                                                 \n    A |- s1 = t \u003C=\u003E s2 = t                                                 \n\n See also: mk_eq2_rule, mk_eq_rule, mk_eq1_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_eq2_rule","title":"EqCong.mk_eq2_rule","content":"EqCong.mk_eq2_rule \nmk_eq2_rule \n\n This is the equality congruence rule for equality RHS.  It takes a term   \n and an equality theorem, and equates the term to each side of the theorem.\n The type of the supplied term must equal the types of each side of the    \n supplied theorem.                                                         \n                                                                           \n      \u0060s\u0060   A |- t1 = t2                                                   \n    ----------------------                                                 \n    A |- s = t1 \u003C=\u003E s = t2                                                 \n\n See also: mk_eq1_rule, mk_eq_rule, mk_eq2_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#not_fn","title":"EqCong.not_fn","content":"EqCong.not_fn \nnot_fn \n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_not_rule","title":"EqCong.mk_not_rule","content":"EqCong.mk_not_rule \nmk_not_rule \n\n This is the equality congruence rule for logical negation.  Its takes a  \n boolean equality theorem, and logically negates each side of the theorem.\n                                                                          \n      A |- p1 \u003C=\u003E p2                                                      \n    ------------------                                                    \n    A |- ~ p1 \u003C=\u003E ~ p2                                                    \n\n See also: mk_comb_rule, eqf_intro_rule, eqf_elim_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#conj_fn","title":"EqCong.conj_fn","content":"EqCong.conj_fn \nconj_fn \n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_conj_rule","title":"EqCong.mk_conj_rule","content":"EqCong.mk_conj_rule \nmk_conj_rule \n\n This is the equality congruence rule for conjunction.  It takes two     \n boolean equality theorems, and conjoins corresponding sides of the first\n theorem with the second, unioning the assumptions.                      \n                                                                         \n    A1 |- p1 \u003C=\u003E p2    A2 |- q1 \u003C=\u003E q2                                   \n    ----------------------------------                                   \n     A1 u A2 |- p1 /\\ q1 \u003C=\u003E p2 /\\ q2     \n\n See also: mk_conj1_rule, mk_conj2_rule, mk_bin_rule, conj_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_conj1_rule","title":"EqCong.mk_conj1_rule","content":"EqCong.mk_conj1_rule \nmk_conj1_rule \n\n This is the equality congruence rule for conjunction LHS.  It takes a     \n boolean equality theorem and a boolean term, and conjoins each side of the\n theorem with the supplied term.                                           \n                                                                           \n      A |- p1 \u003C=\u003E p2   \u0060q\u0060                                                 \n    ------------------------                                               \n    A |- p1 /\\ q \u003C=\u003E p2 /\\ q                                               \n \n See also: mk_conj2_rule, mk_conj_rule, mk_bin1_rule, conj_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_conj2_rule","title":"EqCong.mk_conj2_rule","content":"EqCong.mk_conj2_rule \nmk_conj2_rule \n\n mk_conj2_rule : term -\u003E thm -\u003E thm                                    \n                                                                       \n This is the equality congruence rule for conjunction RHS.  It takes a \n boolean term and a boolean equality theorem, and conjoins the supplied\n term with each side of the theorem.                                   \n                                                                       \n      \u0060p\u0060   A |- q1 \u003C=\u003E q2                                             \n    ------------------------                                           \n    A |- p /\\ q1 \u003C=\u003E p /\\ q2                                           \n\n See also: mk_conj1_rule, mk_conj_rule, mk_bin2_rule, conj_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#disj_fn","title":"EqCong.disj_fn","content":"EqCong.disj_fn \ndisj_fn \n\n This is the equality congruence rule for disjunction.    It takes two   \n boolean equality theorems, and disjoins corresponding sides of the first\n theorem with the second, unioning the assumptions.                      \n                                                                         \n    A1 |- p1 \u003C=\u003E p2    A2 |- q1 \u003C=\u003E q2                                   \n    ----------------------------------                                   \n     A1 u A2 |- p1 \\/ q1 \u003C=\u003E p2 \\/ q2                                    \n\n See also: mk_disj1_rule, mk_disj2_rule, mk_bin_rule, disj1_rule, disj2_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_disj_rule","title":"EqCong.mk_disj_rule","content":"EqCong.mk_disj_rule \nmk_disj_rule \n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_disj1_rule","title":"EqCong.mk_disj1_rule","content":"EqCong.mk_disj1_rule \nmk_disj1_rule \n\n This is the equality congruence rule for disjunction LHS.  It takes a     \n boolean equality theorem and a boolean term, and disjoins each side of the\n theorem with the supplied term.                                           \n                                                                           \n      A |- p1 \u003C=\u003E p2   \u0060q\u0060                                                 \n    ------------------------                                               \n    A |- p1 \\/ q \u003C=\u003E p2 \\/ q                                               \n\n See also: mk_disj2_rule, mk_disj_rule, mk_bin1_rule, disj1_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_disj2_rule","title":"EqCong.mk_disj2_rule","content":"EqCong.mk_disj2_rule \nmk_disj2_rule \n\n This is the equality congruence rule for disjunction RHS.  It takes a \n boolean term and a boolean equality theorem, and disjoins the supplied\n term with each side of the theorem.                                   \n                                                                       \n      \u0060p\u0060   A |- q1 \u003C=\u003E q2                                             \n    ------------------------                                           \n    A |- p \\/ q1 \u003C=\u003E p \\/ q2                                           \n\n See also: mk_disj1_rule, mk_disj_rule, mk_bin2_rule, disj2_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#imp_fn","title":"EqCong.imp_fn","content":"EqCong.imp_fn \nimp_fn \n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_imp_rule","title":"EqCong.mk_imp_rule","content":"EqCong.mk_imp_rule \nmk_imp_rule \n\n This is the equality congruence rule for implication.  It takes two      \n boolean equality theorems, and creates implications out of corresponding \n sides of the first theorem and the second, unioning the assumptions.     \n                                                                          \n    A1 |- p1 \u003C=\u003E p2    A2 |- q1 \u003C=\u003E q2                                    \n    ----------------------------------                                    \n    A1 u A2 |- p1 ==\u003E q1 \u003C=\u003E p2 ==\u003E q2 \n\n See also: mk_imp1_rule, mk_imp2_rule, mk_bin_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_imp1_rule","title":"EqCong.mk_imp1_rule","content":"EqCong.mk_imp1_rule \nmk_imp1_rule \n\n This is the equality congruence rule for implication LHS.  It takes a    \n boolean equality theorem and a boolean term, and creates implications out\n of each side of the theorem, with the theorem side as the antecedent and \n the term as the consequent.                                              \n                                                                          \n       A |- p1 \u003C=\u003E p2   \u0060q\u0060                                               \n    --------------------------                                            \n    A |- p1 ==\u003E q \u003C=\u003E p2 ==\u003E q                                            \n\n See also: mk_imp2_rule, mk_imp_rule, mk_bin1_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_imp2_rule","title":"EqCong.mk_imp2_rule","content":"EqCong.mk_imp2_rule \nmk_imp2_rule \n\n This is the equality congruence rule for implication RHS.  It takes a\n boolean term and a boolean equality theorem, and makes the term an   \n antecedent of each side of the theorem.                              \n                                                                      \n      \u0060p\u0060   A |- q1 \u003C=\u003E q2                                            \n    --------------------------                                        \n    A |- p ==\u003E q1 \u003C=\u003E p ==\u003E q2                                        \n\n See also: mk_imp1_rule, mk_imp_rule, mk_bin2_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_forall_rule","title":"EqCong.mk_forall_rule","content":"EqCong.mk_forall_rule \nmk_forall_rule \n\n This is the equality congruence rule for universal quantification.  It  \n takes a variable and an equality theorem, and universally quantifies the\n variable on both sides of the theorem.  The variable must not occur free\n in the assumptions of the supplied theorem.                             \n                                                                         \n       \u0060x\u0060   A |- p1 \u003C=\u003E p2         [ \u0022x\u0022 not free in \u0060A\u0060 ]              \n    --------------------------                                           \n    A |- (!x. p1) \u003C=\u003E (!x. p2)                                           \n\n See also: mk_abs_rule, mk_comb_rule, gen_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_exists_rule","title":"EqCong.mk_exists_rule","content":"EqCong.mk_exists_rule \nmk_exists_rule \n\n This is the equality congruence rule for existential quantification.  It  \n takes a variable and an equality theorem, and existentially quantifies the\n variable on both sides of the theorem.  The variable must not occur free  \n in the assumptions of the supplied theorem.                               \n                                                                           \n       \u0060x\u0060   A |- p1 \u003C=\u003E p2         [ \u0022x\u0022 not free in \u0060A\u0060 ]                \n    --------------------------                                             \n    A |- (?x. p1) \u003C=\u003E (?x. p2)                                             \n\n See also: mk_uexists_rule, mk_abs_rule, mk_comb_rule, exists_rule.\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_uexists_rule","title":"EqCong.mk_uexists_rule","content":"EqCong.mk_uexists_rule \nmk_uexists_rule \n\n This is the equality congruence rule for unique existential              \n quantification.  It takes a variable and an equality theorem, and unique-\n existentially quantifies the variable on both sides of the theorem.  The \n variable must not occur free in the assumptions of the supplied theorem. \n                                                                          \n        \u0060x\u0060   A |- p1 \u003C=\u003E p2        [ \u0022x\u0022 not free in \u0060A\u0060 ]               \n    ----------------------------                                          \n    A |- (?!x. p1) \u003C=\u003E (?!x. p2)                                          \n\n See also: mk_exists_rule, mk_abs_rule, mk_comb_rule\n"},{"uri":"http://localhost:8901/reference/hol-eqcong.html#mk_select_rule","title":"EqCong.mk_select_rule","content":"EqCong.mk_select_rule \nmk_select_rule \n\n This is the equality congruence rule for selection.  It takes a variable\n and an equality theorem, and selects the variable from both sides of the\n theorem.  The variable must not occur free in the assumptions of the    \n supplied theorem.                                                       \n                                                                         \n      \u0060x\u0060   A |- p1 \u003C=\u003E p2        [ \u0022x\u0022 not free in \u0060A\u0060 ]                \n    ------------------------                                             \n    A |- (@x. p1) = (@x. p2)                                             \n\n See also: mk_abs_rule, mk_comb_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html","title":"Equal","content":"Equal \n\nThis module adds more constants and inference rules for basic reasoning\nusing equality.                                                                                                       \n \nEqual.let_def \nlet_def \nEqual.mk_let \nmk_let \nEqual.dest_let \ndest_let \nEqual.is_let \nis_let \nEqual.onto_def \nonto_def \nEqual.mk_comb1_rule \nmk_comb1_rule \nEqual.mk_comb2_rule \nmk_comb2_rule \nEqual.trans_rule \ntrans_rule \nEqual.list_trans_rule \nlist_trans_rule \nEqual.sym_rule \nsym_rule \nEqual.app_beta_rhs_rule \napp_beta_rhs_rule \nEqual.list_app_beta_rhs_rule \nlist_app_beta_rhs_rule \nEqual.app_beta_rule \napp_beta_rule \nEqual.list_app_beta_rule \nlist_app_beta_rule \nEqual.alpha_link_conv \nalpha_link_conv \nEqual.alpha_conv \nalpha_conv \nEqual.beta_thm_rule \nbeta_thm_rule \nEqual.list_beta_thm_rule \nlist_beta_thm_rule \nEqual.subs_conv \nsubs_conv \nEqual.subs_rule \nsubs_rule \nEqual.subst_conv \nsubst_conv \nEqual.subst_rule \nsubst_rule \nEqual.conv_rule \nconv_rule \nEqual.load \nload"},{"uri":"http://localhost:8901/reference/hol-equal.html#let_def","title":"Equal.let_def","content":"Equal.let_def \nlet_def \n\n The internal constant for let-expressions is called \u0022LET\u0022.  It has special\n support in the parser/printer, so that the quotation                      \n    \u0060let x1 = s1 and x2 = s2 in t\u0060                                         \n is parsed/printed for the internal term                                   \n    \u0060LET (LET (\\x1 x2. t) s1) s2\u0060.                                         \n\n |- LET = (\\(f:\u0027a-\u003E\u0027b) x. f x) \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#mk_let","title":"Equal.mk_let","content":"Equal.mk_let \nmk_let \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#dest_let","title":"Equal.dest_let","content":"Equal.dest_let \ndest_let \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#is_let","title":"Equal.is_let","content":"Equal.is_let \nis_let \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#onto_def","title":"Equal.onto_def","content":"Equal.onto_def \nonto_def \n\n ONTO\n\n |- ONTO = (\\(f:\u0027a-\u003E\u0027b). !y. ?x. y = f x)\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#mk_comb1_rule","title":"Equal.mk_comb1_rule","content":"Equal.mk_comb1_rule \nmk_comb1_rule \n\n This is the equality congruence rule for function application functions.\n It takes an equality theorem over functions and a term, and supplies the\n term as the argument to each side of the theorem.  The type of the      \n supplied term must be the same as the domain type of the functions.     \n                                                                         \n    A |- f1 = f2   \u0060t\u0060                                                   \n    ------------------                                                   \n     A |- f1 t = f2 t                                                    \n\n See also: mk_comb2_rule, mk_comb_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#mk_comb2_rule","title":"Equal.mk_comb2_rule","content":"Equal.mk_comb2_rule \nmk_comb2_rule \n\n This is the equality congruence rule for function application arguments.  \n It takes a function term and an equality theorem, and applies the function\n to each side of the theorem.  The domain type of the supplied function    \n must be the same as the type of the theorem LHS/RHS.                      \n                                                                           \n    \u0060f\u0060   A |- t1 = t2                                                     \n    ------------------                                                     \n     A |- f t1 = f t2                                                      \n\n See also: mk_comb1_rule, mk_comb_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#trans_rule","title":"Equal.trans_rule","content":"Equal.trans_rule \ntrans_rule \n\n This is the transitivity rule for equality.  It takes two equality theorem \n arguments, where the first theorem\u0027s RHS is the same (modulo alpha-        \n equivalence) as the second theorem\u0027s LHS.  It returns a theorem stating    \n that the first theorem\u0027s LHS equals the second theorem\u0027s RHS, under the    \n unioned assumptions of the two theorems.                                   \n                                                                            \n    A1 |- t1 = t2    A2 |- t2 = t3                                          \n    ------------------------------                                          \n          A1 u A2 |- t1 = t3                                                \n\n See also: list_trans_rule, refl_conv, sym_rule, imp_trans_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#list_trans_rule","title":"Equal.list_trans_rule","content":"Equal.list_trans_rule \nlist_trans_rule \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#sym_rule","title":"Equal.sym_rule","content":"Equal.sym_rule \nsym_rule \n\n This is the symmetry rule for equality.  It swaps the LHS with the RHS in \n the supplied equality theorem.                                            \n                                                                           \n    A |- t1 = t2                                                           \n    ------------                                                           \n    A |- t2 = t1                                                           \n\n See also: sym_conv, refl_conv, trans_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#app_beta_rhs_rule","title":"Equal.app_beta_rhs_rule","content":"Equal.app_beta_rhs_rule \napp_beta_rhs_rule \n\n This rule is for expanding a function defined in terms of a lambda         \n abstraction.  It takes an equality theorem and a term argument, where the  \n theorem RHS is a lambda abstraction with a binding variable of the same    \n type as the term argument.  It returns a theorem stating that the theorem  \n argument\u0027s LHS applied to the term argument is equal to the beta reduction \n of the lambda abstraction applied to the term argument.                    \n                                                                            \n    A |- f = (\\v. t)   \u0060s\u0060                                                  \n    ----------------------                                                  \n      A |- f s = t[s/v]                                                     \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#list_app_beta_rhs_rule","title":"Equal.list_app_beta_rhs_rule","content":"Equal.list_app_beta_rhs_rule \nlist_app_beta_rhs_rule \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#app_beta_rule","title":"Equal.app_beta_rule","content":"Equal.app_beta_rule \napp_beta_rule \n\n app_beta_rule : thm -\u003E term -\u003E thm  \n                                     \n    A |- (\\v1. t1) = (\\v2. t2)   \u0060s\u0060 \n    -------------------------------- \n       A |- t1[s/v1] = t2[s/v2]      \n\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#list_app_beta_rule","title":"Equal.list_app_beta_rule","content":"Equal.list_app_beta_rule \nlist_app_beta_rule \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#alpha_link_conv","title":"Equal.alpha_link_conv","content":"Equal.alpha_link_conv \nalpha_link_conv \n\n This is the alpha linking conversion.  It takes two alpha-equivalent terms \n and returns a theorem stating that the second is equal to the first, under \n no assumptions.  Fails if the supplied terms are not alpha-equivalent.     \n                                                                            \n    \u0060t\u0027\u0060   \u0060t\u0060                                                              \n    ----------                                                              \n    |- t = t\u0027                                                               \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#alpha_conv","title":"Equal.alpha_conv","content":"Equal.alpha_conv \nalpha_conv \n\n This is the alpha renaming conversion.  It replaces the binding variable   \n and all occurrences of it in the supplied lambda abstraction term (the 2nd \n argument) with the supplied variable (the 1st argument).  The supplied     \n variable must have the same type as the original binding variable, and     \n must not occur free in the original body.                                  \n                                                                            \n          \u0060y\u0060   \u0060\\x. t\u0060                                                    \n    -------------------------                                              \n    |- (\\x. t) = (\\y. t[y/x])                                              \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#beta_thm_rule","title":"Equal.beta_thm_rule","content":"Equal.beta_thm_rule \nbeta_thm_rule \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#list_beta_thm_rule","title":"Equal.list_beta_thm_rule","content":"Equal.list_beta_thm_rule \nlist_beta_thm_rule \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#subs_conv","title":"Equal.subs_conv","content":"Equal.subs_conv \nsubs_conv \n\n This is the basic substitution conversion.  It takes a list of equality   \n theorems and a term, and transforms the term by performing a single       \n parallel substitution of its free subterms according to the equality      \n theorems.  All free occurrences of equality theorem LHSs in the term get  \n replaced.  The resulting theorem has the unioned assumptions of all the   \n supplied theorems (regardless of whether they apply to the supplied       \n theorem).                                                                 \n                                                                           \n Binding variables in the resulting theorem\u0027s RHS are renamed as necessary \n to avoid variable capture.  Note that if one equality theorem\u0027s LHS occurs\n free in another\u0027s, then the theorem with the larger LHS gets used in      \n preference, and if two equality theorems have alpha-equivalent LHSs, then \n the earlier theorem in the list gets used in preference.  If no equality  \n theorems apply, then the returned theorem\u0027s conclusion\u0027s RHS is the same  \n as its LHS.                                                               \n                                                                           \n    A1 |- s1 = t1   A2 |- s2 = t2   ..   \u0060t\u0060                               \n    ----------------------------------------                               \n     A1 u A2 u .. |- t = t[t1/s1,t2/s2,..]   \n\n See also: subs_rule, subst_conv, inst_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#subs_rule","title":"Equal.subs_rule","content":"Equal.subs_rule \nsubs_rule \n\n This is the basic substitution rule.  It takes a list of equality theorems\n and a theorem, and performs a single parallel substitution of free        \n subterms in the theorem\u0027s conclusion according to the equality theorems.  \n All free occurrences of equality theorem LHSs in the theorem get replaced.\n The resulting theorem has the unioned assumptions of all the supplied     \n theorems (regardless of whether they apply to the supplied theorem).      \n                                                                           \n Binding variables in the resulting theorem are renamed as necessary to    \n avoid variable capture.  Note that if one equality theorem\u0027s LHS occurs   \n free in another\u0027s, then the theorem with the larger LHS gets used in      \n preference, and if two equality theorems have alpha-equivalent LHSs, then \n the earlier theorem in the list gets used in preference.  If no equality  \n theorems apply, then the returned theorem\u0027s conclusion is the same as the \n input\u0027s.                                                                  \n                                                                           \n    A1 |- s1 = t1   A2 |- s2 = t2   ..    A |- t                           \n    --------------------------------------------                           \n         A1 u A2 u .. |- t[t1/s1,t2/s2,..]                                 \n\n See also: subs_conv, subst_rule, inst_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#subst_conv","title":"Equal.subst_conv","content":"Equal.subst_conv \nsubst_conv \n\n This is the template substitution conversion.  It takes a substitution    \n scheme (in the form of an association list and a template term) followed  \n by a main term, and transforms the main term by performing a single       \n parallel substitution of its free subterms, according to the substitution \n scheme.  The template term determines which free occurrences of equality  \n theorem LHSs in the main term get replaced, and reflects the syntactic    \n structure of the term, except having template variable atoms in place of  \n subterms due for replacement.  The association list maps each template    \n variable to an equality theorem, with equality theorem LHS for the main   \n term\u0027s original subterm and RHS for the subterm that replaces it.  The    \n resulting theorem has the unioned assumptions of all the supplied theorems\n (regardless of whether they apply to the supplied template).              \n                                                                           \n Binding variables in the resulting theorem are renamed as necessary to    \n avoid variable capture.  Note that if two entries appear in the           \n association list for the same template variable, then the earlier entry   \n gets used, and that entries for variables that don\u0027t appear in the        \n template are ignored.  If no entries apply, then the returned theorem\u0027s   \n conclusion\u0027s RHS is the same as its LHS.                                  \n                                                                           \n       \u0060v1\u0060           \u0060v2\u0060          ..                                     \n    A1 |- s1 = t1   A2 |- s2 = t2   ..   \u0060t\u0060   \u0060t[s1/v1,s2/v2,..]\u0060         \n    --------------------------------------------------------------         \n        A1 u A2 u .. |- t[s1/v1,s2/v2,..] = t[t1/v1,t2/v2,..]              \n\n See also: subst_rule, subs_conv, inst_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#subst_rule","title":"Equal.subst_rule","content":"Equal.subst_rule \nsubst_rule \n\n This is the template substitution rule.  It takes a substitution scheme    \n (in the form of an association list and a template term) followed by a     \n theorem, and performs a single parallel substitution of free subterms in   \n the theorem\u0027s conclusion, according to the substitution scheme.  The       \n template term determines which free occurrences of equality theorem LHSs   \n in the supplied theorem get replaced, and reflects the syntactic structure \n of the theorem\u0027s conclusion, except having template variable atoms in      \n place of subterms due for replacement.  The association list maps each     \n template variable to an equality theorem, with equality theorem LHS for    \n the supplied theorem\u0027s original subterm and RHS for the subterm that       \n replaces it.  The resulting theorem has the unioned assumptions of all the \n supplied theorems (regardless of whether they apply to the supplied        \n template).                                                                 \n                                                                            \n Abstraction variables in the resulting theorem are renamed as necessary to \n avoid variable capture.  Note that if two entries appear in the            \n association list for the same template variable, then the earlier entry    \n gets used, and that entries for variables that don\u0027t appear in the         \n template are ignored.  If no entries apply, then the returned theorem\u0027s    \n conclusion is the same as the input\u0027s.                                     \n                                                                            \n      \u0060v1\u0060            \u0060v2\u0060          ..                                      \n    A1 |- s1 = t1   A2 |- s2 = t2   ..   \u0060t\u0060   A |- t[s1/v1,s2/v2,..]       \n    -----------------------------------------------------------------       \n                   A1 u A2 u .. |- t[t1/v1,t2/v2,..]                        \n\n See also: subst_conv, subs_rule, inst_rule.\n"},{"uri":"http://localhost:8901/reference/hol-equal.html#conv_rule","title":"Equal.conv_rule","content":"Equal.conv_rule \nconv_rule \n"},{"uri":"http://localhost:8901/reference/hol-equal.html#load","title":"Equal.load","content":"Equal.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-exn.html","title":"Exn","content":"Exn \n\n Questo modulo definisce tre nuove eccezioni di uso generale, insieme a una \n stampa di queste eccezioni.\n \nExn.Assert_failure \nAssert_failure \nExn.HolErr \nHolErr \nExn.HolFail \nHolFail \nExn.LocalFail \nLocalFail \nExn.hol_fail \nhol_fail \nExn.hol_err \nhol_err \nExn.internal_err \ninternal_err \nExn.build_err \nbuild_err"},{"uri":"http://localhost:8901/reference/hol-exn.html#hol_fail","title":"Exn.hol_fail","content":"Exn.hol_fail \nhol_fail \n\n Solleva un\u0027eccezione HolFail\n"},{"uri":"http://localhost:8901/reference/hol-exn.html#hol_err","title":"Exn.hol_err","content":"Exn.hol_err \nhol_err \n\n Solleva un\u0027eccezione HolErr\n"},{"uri":"http://localhost:8901/reference/hol-exn.html#internal_err","title":"Exn.internal_err","content":"Exn.internal_err \ninternal_err \n\n Solleva un\u0027eccezione HolErr exception per errori interni\n"},{"uri":"http://localhost:8901/reference/hol-exn.html#build_err","title":"Exn.build_err","content":"Exn.build_err \nbuild_err \n\n Solleva un\u0027eccezione HolErr exception per errori di compilazione\n"},{"uri":"http://localhost:8901/reference/hol-exn-assert_failure.html","title":"Assert_failure","content":"Assert_failure \n\n Exception raised when an assertion fails.\n The arguments are the location of the assert keyword in the source code (file name, line number, column number). \n \nAssert_failure.Data0 \nData0 \nAssert_failure.Data1 \nData1 \nAssert_failure.Data2 \nData2"},{"uri":"http://localhost:8901/reference/hol-exn-assert_failure.html#Data0","title":"Assert_failure.Data0","content":"Assert_failure.Data0 \nData0 \n"},{"uri":"http://localhost:8901/reference/hol-exn-assert_failure.html#Data1","title":"Assert_failure.Data1","content":"Assert_failure.Data1 \nData1 \n"},{"uri":"http://localhost:8901/reference/hol-exn-assert_failure.html#Data2","title":"Assert_failure.Data2","content":"Assert_failure.Data2 \nData2 \n"},{"uri":"http://localhost:8901/reference/hol-exn-holerr.html","title":"HolErr","content":"HolErr \n\n Questa eccezione \uFFFD per errori di corto-circuito che si ritirano direttamente al \n top level, evitando qualsiasi gestione per l\u0027eccezioni di tipo HolFail.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u003C/p\u003E \n \n Essa consiste di una stringa (per convenzione in maiuscolo) che classifica l\u0027eccezione i  \n in modo generico, e di un messaggio che descrive l\u0027eccezione in qualche dettaglio.\n  \nHolErr.Data0 \nData0"},{"uri":"http://localhost:8901/reference/hol-exn-holerr.html#Data0","title":"HolErr.Data0","content":"HolErr.Data0 \nData0 \n"},{"uri":"http://localhost:8901/reference/hol-exn-holfail.html","title":"HolFail","content":"HolFail \n\n Questa eccezione \uFFFD per errori che possono raggiungere alla fine il top level, \n ma che possono anche essere trappate chiamando delle funzioni. E\u0027 l\u0027eccezione\n classica per casi di errore nelle funzioni di HOL Zero.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u003C/p\u003E\n \n Consiste del nome della funzione che fallisce e di un messaggio che descrive  \n l\u0027errore con qualche dettaglio. Di sotto sono definite varie funzioni per \n sollevare e trappare gli HolFails\n  \nHolFail.Data0 \nData0"},{"uri":"http://localhost:8901/reference/hol-exn-holfail.html#Data0","title":"HolFail.Data0","content":"HolFail.Data0 \nData0 \n"},{"uri":"http://localhost:8901/reference/hol-exn-localfail.html","title":"LocalFail","content":"LocalFail \n\n Questa eccezzione \uFFFD per semplici flussi di controllo locali, sollevata per uscire \n dalla parte principale di una funzione e tipicamente gestita da un try-catch pi\uFFFD  \n esterno della stessa funzione.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u003C/p\u003E \n \n Questa pu\uFFFD essere utile per rimuovere segnalazioni disordinate di errore \n dal corpo principale di una funzione e raggrupparle insieme alla \n fine. E\u0027 anche usata come ultima spiaggia in flussi di controllo senza errori, \u003Cp class=\u0027fsdocs-para\u0027\u003E\u003C/p\u003E \n quando non c\u0027\uFFFD nulla di pi\uFFFD elegante.\n "},{"uri":"http://localhost:8901/reference/hol-generictree.html","title":"GenericTree","content":"GenericTree \n \nGenericTree.\u0027a Location \n\u0027a Location \nGenericTree.\u0027a Path \n\u0027a Path \nGenericTree.\u0027a Tree \n\u0027a Tree \nGenericTree.mkTree \nmkTree \nGenericTree.left \nleft \nGenericTree.right \nright \nGenericTree.down \ndown \nGenericTree.up \nup \nGenericTree.root \nroot \nGenericTree.zipper \nzipper \nGenericTree.change \nchange \nGenericTree.insert_right \ninsert_right \nGenericTree.insert_left \ninsert_left \nGenericTree.insert_down \ninsert_down \nGenericTree.delete \ndelete \nGenericTree.findNodePath \nfindNodePath"},{"uri":"http://localhost:8901/reference/hol-generictree.html#mkTree","title":"GenericTree.mkTree","content":"GenericTree.mkTree \nmkTree \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#left","title":"GenericTree.left","content":"GenericTree.left \nleft \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#right","title":"GenericTree.right","content":"GenericTree.right \nright \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#down","title":"GenericTree.down","content":"GenericTree.down \ndown \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#up","title":"GenericTree.up","content":"GenericTree.up \nup \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#root","title":"GenericTree.root","content":"GenericTree.root \nroot \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#zipper","title":"GenericTree.zipper","content":"GenericTree.zipper \nzipper \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#change","title":"GenericTree.change","content":"GenericTree.change \nchange \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#insert_right","title":"GenericTree.insert_right","content":"GenericTree.insert_right \ninsert_right \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#insert_left","title":"GenericTree.insert_left","content":"GenericTree.insert_left \ninsert_left \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#insert_down","title":"GenericTree.insert_down","content":"GenericTree.insert_down \ninsert_down \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#delete","title":"GenericTree.delete","content":"GenericTree.delete \ndelete \n"},{"uri":"http://localhost:8901/reference/hol-generictree.html#findNodePath","title":"GenericTree.findNodePath","content":"GenericTree.findNodePath \nfindNodePath \n"},{"uri":"http://localhost:8901/reference/hol-generictree-location-1.html","title":"\u0027a Location","content":"\u0027a Location \n \n\u0027a Location.Loc \nLoc"},{"uri":"http://localhost:8901/reference/hol-generictree-location-1.html#Loc","title":"\u0027a Location.Loc","content":"\u0027a Location.Loc \nLoc \n"},{"uri":"http://localhost:8901/reference/hol-generictree-path-1.html","title":"\u0027a Path","content":"\u0027a Path \n \n\u0027a Path.Top \nTop \n\u0027a Path.NodePath \nNodePath"},{"uri":"http://localhost:8901/reference/hol-generictree-path-1.html#Top","title":"\u0027a Path.Top","content":"\u0027a Path.Top \nTop \n"},{"uri":"http://localhost:8901/reference/hol-generictree-path-1.html#NodePath","title":"\u0027a Path.NodePath","content":"\u0027a Path.NodePath \nNodePath \n"},{"uri":"http://localhost:8901/reference/hol-generictree-tree-1.html","title":"\u0027a Tree","content":"\u0027a Tree \n \n\u0027a Tree.Tree \nTree"},{"uri":"http://localhost:8901/reference/hol-generictree-tree-1.html#Tree","title":"\u0027a Tree.Tree","content":"\u0027a Tree.Tree \nTree \n"},{"uri":"http://localhost:8901/reference/hol-ind.html","title":"Ind","content":"Ind \n\nThis module extends the HOL logic with an infinite-cardinality base type,\ntogether with a zero and a successor function for this type.  These get  \nused in the \u0027Nat\u0027 module as the basis for defining the natural numbers.                                                                                                                                                                     \n \nInd.ind_ty \nind_ty \nInd.infinity_ax \ninfinity_ax \nInd.not_onto_lemma \nnot_onto_lemma \nInd.ind_suc_zero_exists_lemma \nind_suc_zero_exists_lemma \nInd.ind_suc_zero_spec \nind_suc_zero_spec \nInd.ind_zero_tm \nind_zero_tm \nInd.ind_suc_fn \nind_suc_fn \nInd.ind_suc_injective_thm \nind_suc_injective_thm \nInd.ind_suc_not_zero_thm \nind_suc_not_zero_thm \nInd.load \nload"},{"uri":"http://localhost:8901/reference/hol-ind.html#ind_ty","title":"Ind.ind_ty","content":"Ind.ind_ty \nind_ty \n"},{"uri":"http://localhost:8901/reference/hol-ind.html#infinity_ax","title":"Ind.infinity_ax","content":"Ind.infinity_ax \ninfinity_ax \n\n Infinity axiom\n\n This states that the newly declared individuals type is infinite, by      \n asserting that there is an injective total function from individuals to   \n individuals that is not surjective.                                       \n\n |- ?(f:ind-\u003Eind). ONE_ONE f /\\ ~ ONTO f\n"},{"uri":"http://localhost:8901/reference/hol-ind.html#not_onto_lemma","title":"Ind.not_onto_lemma","content":"Ind.not_onto_lemma \nnot_onto_lemma \n"},{"uri":"http://localhost:8901/reference/hol-ind.html#ind_suc_zero_exists_lemma","title":"Ind.ind_suc_zero_exists_lemma","content":"Ind.ind_suc_zero_exists_lemma \nind_suc_zero_exists_lemma \n"},{"uri":"http://localhost:8901/reference/hol-ind.html#ind_suc_zero_spec","title":"Ind.ind_suc_zero_spec","content":"Ind.ind_suc_zero_spec \nind_suc_zero_spec \n\n |- ONE_ONE IND_SUC /\\ (!i. ~ (IND_SUC i = IND_ZERO))\n"},{"uri":"http://localhost:8901/reference/hol-ind.html#ind_zero_tm","title":"Ind.ind_zero_tm","content":"Ind.ind_zero_tm \nind_zero_tm \n"},{"uri":"http://localhost:8901/reference/hol-ind.html#ind_suc_fn","title":"Ind.ind_suc_fn","content":"Ind.ind_suc_fn \nind_suc_fn \n"},{"uri":"http://localhost:8901/reference/hol-ind.html#ind_suc_injective_thm","title":"Ind.ind_suc_injective_thm","content":"Ind.ind_suc_injective_thm \nind_suc_injective_thm \n\n |- !i j. IND_SUC i = IND_SUC j \u003C=\u003E i = j\n"},{"uri":"http://localhost:8901/reference/hol-ind.html#ind_suc_not_zero_thm","title":"Ind.ind_suc_not_zero_thm","content":"Ind.ind_suc_not_zero_thm \nind_suc_not_zero_thm \n\n |- !i. ~(IND_SUC i = IND_ZERO)\n"},{"uri":"http://localhost:8901/reference/hol-ind.html#load","title":"Ind.load","content":"Ind.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-lexer.html","title":"Lexer","content":"Lexer \n\nThis module implements the lexical analysis stage, common to both HOL type\nand term quotation parsing.  The top-level type and term parsers are      \nimplemented in the \u0027Parser\u0027 module.  The classification of characters,    \nused to determine how lexical tokens are formed, is implemented in the    \n\u0027Names\u0027 module.           \n \nLexer.token \ntoken \nLexer.varmark \nvarmark \nLexer.lex_char_with \nlex_char_with \nLexer.lex_char_in \nlex_char_in \nLexer.lex_char_not_in \nlex_char_not_in \nLexer.lex_list \nlex_list \nLexer.lex_end \nlex_end \nLexer.lex_err \nlex_err \nLexer.(/\u002B) \n(/\u002B) \nLexer.token_name \ntoken_name \nLexer.funcPunct \nfuncPunct \nLexer.funcAlphanumeric \nfuncAlphanumeric \nLexer.funcNumeric \nfuncNumeric \nLexer.funcSymbolic \nfuncSymbolic \nLexer.lex_token0 \nlex_token0 \nLexer.lex_token \nlex_token \nLexer.lex_whitespace \nlex_whitespace \nLexer.lex \nlex"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_char_with","title":"Lexer.lex_char_with","content":"Lexer.lex_char_with \nlex_char_with \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_char_in","title":"Lexer.lex_char_in","content":"Lexer.lex_char_in \nlex_char_in \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_char_not_in","title":"Lexer.lex_char_not_in","content":"Lexer.lex_char_not_in \nlex_char_not_in \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_list","title":"Lexer.lex_list","content":"Lexer.lex_list \nlex_list \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_end","title":"Lexer.lex_end","content":"Lexer.lex_end \nlex_end \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_err","title":"Lexer.lex_err","content":"Lexer.lex_err \nlex_err \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#(/\u002B)","title":"Lexer.(/\u002B)","content":"Lexer.(/\u002B) \n(/\u002B) \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#token_name","title":"Lexer.token_name","content":"Lexer.token_name \ntoken_name \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#funcPunct","title":"Lexer.funcPunct","content":"Lexer.funcPunct \nfuncPunct \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#funcAlphanumeric","title":"Lexer.funcAlphanumeric","content":"Lexer.funcAlphanumeric \nfuncAlphanumeric \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#funcNumeric","title":"Lexer.funcNumeric","content":"Lexer.funcNumeric \nfuncNumeric \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#funcSymbolic","title":"Lexer.funcSymbolic","content":"Lexer.funcSymbolic \nfuncSymbolic \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_token0","title":"Lexer.lex_token0","content":"Lexer.lex_token0 \nlex_token0 \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_token","title":"Lexer.lex_token","content":"Lexer.lex_token \nlex_token \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex_whitespace","title":"Lexer.lex_whitespace","content":"Lexer.lex_whitespace \nlex_whitespace \n"},{"uri":"http://localhost:8901/reference/hol-lexer.html#lex","title":"Lexer.lex","content":"Lexer.lex \nlex \n"},{"uri":"http://localhost:8901/reference/hol-lexer-token.html","title":"token","content":"token \n \ntoken.Ident_tok \nIdent_tok \ntoken.Numeric_tok \nNumeric_tok \ntoken.Resword_tok \nResword_tok"},{"uri":"http://localhost:8901/reference/hol-lexer-token.html#Ident_tok","title":"token.Ident_tok","content":"token.Ident_tok \nIdent_tok \n"},{"uri":"http://localhost:8901/reference/hol-lexer-token.html#Numeric_tok","title":"token.Numeric_tok","content":"token.Numeric_tok \nNumeric_tok \n"},{"uri":"http://localhost:8901/reference/hol-lexer-token.html#Resword_tok","title":"token.Resword_tok","content":"token.Resword_tok \nResword_tok \n"},{"uri":"http://localhost:8901/reference/hol-lexer-varmark.html","title":"varmark","content":"varmark \n \nvarmark.Tyvar_mark \nTyvar_mark \nvarmark.Tmvar_mark \nTmvar_mark \nvarmark.No_mark \nNo_mark"},{"uri":"http://localhost:8901/reference/hol-lexer-varmark.html#Tyvar_mark","title":"varmark.Tyvar_mark","content":"varmark.Tyvar_mark \nTyvar_mark \n"},{"uri":"http://localhost:8901/reference/hol-lexer-varmark.html#Tmvar_mark","title":"varmark.Tmvar_mark","content":"varmark.Tmvar_mark \nTmvar_mark \n"},{"uri":"http://localhost:8901/reference/hol-lexer-varmark.html#No_mark","title":"varmark.No_mark","content":"varmark.No_mark \nNo_mark \n"},{"uri":"http://localhost:8901/reference/hol-lib.html","title":"Lib","content":"Lib \n\n Questo modulo definisce varie utilit\u00E0 di programmazione funzionale da \n usare nel corso dell\u0027implementazione.\n \nLib.check \ncheck \nLib.assert0 \nassert0 \nLib.assert1 \nassert1 \nLib.try0 \ntry0 \nLib.try1 \ntry1 \nLib.try2 \ntry2 \nLib.try_find \ntry_find \nLib.try_filter \ntry_filter \nLib.can \ncan \nLib.cannot \ncannot \nLib.repeat \nrepeat \nLib.pair \npair \nLib.switch \nswitch \nLib.length0 \nlength0 \nLib.length \nlength \nLib.length_big_int \nlength_big_int \nLib.cons \ncons \nLib.is_empty \nis_empty \nLib.is_nonempty \nis_nonempty \nLib.hd \nhd \nLib.tl \ntl \nLib.hd_tl \nhd_tl \nLib.front \nfront \nLib.last \nlast \nLib.front_last \nfront_last \nLib.list_eq \nlist_eq \nLib.rev0 \nrev0 \nLib.rev \nrev \nLib.append \nappend \nLib.flatten \nflatten \nLib.enumerate0 \nenumerate0 \nLib.enumerate \nenumerate \nLib.zip \nzip \nLib.unzip \nunzip \nLib.el \nel \nLib.el0 \nel0 \nLib.cut \ncut \nLib.cut_while0 \ncut_while0 \nLib.cut_while \ncut_while \nLib.decrement \ndecrement \nLib.up_to \nup_to \nLib.( \u003C* ) \n( \u003C* ) \nLib.curry \ncurry \nLib.uncurry \nuncurry \nLib.funpow \nfunpow \nLib.swap_arg \nswap_arg \nLib.dbl_arg \ndbl_arg \nLib.id_fn \nid_fn \nLib.arg1_fn \narg1_fn \nLib.pair_apply \npair_apply \nLib.map \nmap \nLib.map2 \nmap2 \nLib.foldl \nfoldl \nLib.foldl1 \nfoldl1 \nLib.foldr \nfoldr \nLib.foldr1 \nfoldr1 \nLib.foldl\u0027 \nfoldl\u0027 \nLib.foldr\u0027 \nfoldr\u0027 \nLib.foldl1\u0027 \nfoldl1\u0027 \nLib.foldr1\u0027 \nfoldr1\u0027 \nLib.unfoldl0 \nunfoldl0 \nLib.unfoldl \nunfoldl \nLib.unfoldl1 \nunfoldl1 \nLib.unfoldr0 \nunfoldr0 \nLib.unfoldr \nunfoldr \nLib.unfoldr1 \nunfoldr1 \nLib.unfold0 \nunfold0 \nLib.unfold \nunfold \nLib.find \nfind \nLib.filter \nfilter \nLib.partition \npartition \nLib.exists \nexists \nLib.forall \nforall \nLib.forall2 \nforall2 \nLib.assoc \nassoc \nLib.inv_assoc \ninv_assoc \nLib.fst_map \nfst_map \nLib.snd_map \nsnd_map \nLib.fst_filter \nfst_filter \nLib.snd_filter \nsnd_filter \nLib.do_map \ndo_map \nLib.mem \nmem \nLib.mem\u0027 \nmem\u0027 \nLib.insert \ninsert \nLib.insert\u0027 \ninsert\u0027 \nLib.setify \nsetify \nLib.setify\u0027 \nsetify\u0027 \nLib.union \nunion \nLib.union\u0027 \nunion\u0027 \nLib.unions \nunions \nLib.unions\u0027 \nunions\u0027 \nLib.intersect \nintersect \nLib.intersect\u0027 \nintersect\u0027 \nLib.subtract \nsubtract \nLib.subtract\u0027 \nsubtract\u0027 \nLib.subset \nsubset \nLib.subset\u0027 \nsubset\u0027 \nLib.disjoint \ndisjoint \nLib.disjoint\u0027 \ndisjoint\u0027 \nLib.set_eq \nset_eq \nLib.set_eq\u0027 \nset_eq\u0027 \nLib.no_dups0 \nno_dups0 \nLib.no_dups \nno_dups \nLib.no_dups0\u0027 \nno_dups0\u0027 \nLib.no_dups\u0027 \nno_dups\u0027 \nLib.string_of_int \nstring_of_int \nLib.char_implode \nchar_implode \nLib.char_explode \nchar_explode \nLib.implode \nimplode \nLib.explode \nexplode \nLib.string_variant \nstring_variant \nLib.quote0 \nquote0 \nLib.char_escape \nchar_escape \nLib.quote \nquote \nLib.report \nreport \nLib.warn \nwarn \nLib.merge \nmerge \nLib.mergesort \nmergesort \nLib.(||\u003E\u003E) \n(||\u003E\u003E) \nLib.int_of_string \nint_of_string"},{"uri":"http://localhost:8901/reference/hol-lib.html#check","title":"Lib.check","content":"Lib.check \ncheck \n\n Solleva un\u0027eccezione HolFail se l\u0027argomento fornito non soddisfa la \n funzione di test passata, altrimenti restituisce l\u0027argomento.          \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#assert0","title":"Lib.assert0","content":"Lib.assert0 \nassert0 \n\n Solleva l\u0027eccezione fornita se il boleano fornito \u00E8 \u0022false\u0022, \n altrimenti restituisce unit.                                  \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#assert1","title":"Lib.assert1","content":"Lib.assert1 \nassert1 \n\n Solleva un\u0027eccezione HolFail per il nome di funzione e il messaggio forniti \n se il boleano fornito \u00E8 \u0022false\u0022, e altrimenti restituisce unit.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#try0","title":"Lib.try0","content":"Lib.try0 \ntry0 \n\n Applica la funzione fornita all\u0027argomento fornito, e se questo causa \n un\u0027eccezione HolFail allora la gestisce e solleva l\u0027eccezione fornita \n come argomento al suo posto.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#try1","title":"Lib.try1","content":"Lib.try1 \ntry1 \n\n Applica la funzione fornita all\u0027argomento fornito, e se questo causa \n un\u0027eccezione HolFail allora la gestisce e solleva al suo posto un\u0027altra \n eccezione HolFail con il nome di funzione e il messaggio forniti.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#try2","title":"Lib.try2","content":"Lib.try2 \ntry2 \n\n Applica la funzinoe fornita all\u0027argomento fornito, e se questo causa \n un\u0027eccezione HolFail allora la gestisce e risolleva l\u0027HolFail con lo \n stesso messaggio ma per il nome di funzione fornito.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#try_find","title":"Lib.try_find","content":"Lib.try_find \ntry_find \n\n Applica la funzione fornita al primo elemento della lista fornita che \n non causa un\u0027eccezione HolFail. Fallisce se non c\u0027\u00E8 un tale elemento nella lista.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#try_filter","title":"Lib.try_filter","content":"Lib.try_filter \ntry_filter \n\n Applica la funzione fornita a quegli elementi della lista fornita che \n non causano un\u0027eccezione HolFail, e rimuovendo quelli che lo fanno.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#can","title":"Lib.can","content":"Lib.can \ncan \n\n Restituisce \u0022true\u0022 sse applicare la funzione fornita all\u0027argomento fornito \n non causa un\u0027eccezione HolFail.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#cannot","title":"Lib.cannot","content":"Lib.cannot \ncannot \n\n Restituisce \u0022true\u0022 sse applicare la funzione fornita all\u0027argomento fornito \n causa un\u0027eccezione HolFail.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#repeat","title":"Lib.repeat","content":"Lib.repeat \nrepeat \n\n Applica ripetutamente la funzinoe fornita a un argomento fino a quando causa  \n un\u0027eccezione HolFail, restituendo la manifestazione dell\u0027argomento che causa \n l\u0027eccezione. Si noti che questa non terminer\u00E0 mai se la funzione non solleva \n mai un\u0027eccezione.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#pair","title":"Lib.pair","content":"Lib.pair \npair \n\n L\u0027operatore binario curried per costruire coppie.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#switch","title":"Lib.switch","content":"Lib.switch \nswitch \n\n Scambia tra loro i due componenti di una coppia data.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#length0","title":"Lib.length0","content":"Lib.length0 \nlength0 \n\n Funzione tail recursive di supporto alla definizione di length.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#length","title":"Lib.length","content":"Lib.length \nlength \n\n Restituisce la lunghezza della lista fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#length_big_int","title":"Lib.length_big_int","content":"Lib.length_big_int \nlength_big_int \n\n Restituisce la lunghezza della lista fornita come un intero f# \n di precisione arbitraria.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#cons","title":"Lib.cons","content":"Lib.cons \ncons \n\n Aggiunge un dato elemento all\u0027inizio di una lista data. Si tratta di \n una forma non infissa e curried di \u0027::\u0027.   \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#is_empty","title":"Lib.is_empty","content":"Lib.is_empty \nis_empty \n\n Restituisce \u0022true\u0022 sse la lista fornita \u00E8 vuota.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#is_nonempty","title":"Lib.is_nonempty","content":"Lib.is_nonempty \nis_nonempty \n\n Restituisce \u0022true\u0022 sse la lista fornita non \u00E8 vuota.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#hd","title":"Lib.hd","content":"Lib.hd \nhd \n\n Funzione per estrarre da una lista fornita il suo elemento \n di testa. Fallisce se la lista \u00E8 vuota.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#tl","title":"Lib.tl","content":"Lib.tl \ntl \n\n Funzione per estrarre da una lista fornita la sua coda.\n Fallisce se la lista \u00E8 vuota.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#hd_tl","title":"Lib.hd_tl","content":"Lib.hd_tl \nhd_tl \n\n Funzione per dividere una lista fornita nella sua testa e nella sua coda.\n Fallisce se la lista \u00E8 vuota.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#front","title":"Lib.front","content":"Lib.front \nfront \n\n Funzione per estrarre da una lista tutti gli elementi escluso l\u0027ultimo.\n Fallisce se la lista \u00E8 vuota.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#last","title":"Lib.last","content":"Lib.last \nlast \n\n Funzione per estrarre l\u0027ultimo elemento di una lista fornita.\n Fallisce se la lista \u00E8 vuota.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#front_last","title":"Lib.front_last","content":"Lib.front_last \nfront_last \n\n Funzione per dividere una lista fornita nei suoi primi elementi e nel suo ultimo.\n Fallisce se la lista \u00E8 vuota.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#list_eq","title":"Lib.list_eq","content":"Lib.list_eq \nlist_eq \n\n Resituisce \u0022true\u0022 sse le due liste di input sono equivalenti modulo la \n relazione di equivalenza fornita \u0027eq\u0027, cio\u00E8 se le liste hanno la stessa \n lunghezza e gli elementi corrispondenti sono uguali secondo \u0027eq\u0027.   \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#rev0","title":"Lib.rev0","content":"Lib.rev0 \nrev0 \n\n Funzione tail-ricorsiva a supporto della definizione di rev\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#rev","title":"Lib.rev","content":"Lib.rev \nrev \n\n Inverte l\u0027ordine degli elementi nella lista fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#append","title":"Lib.append","content":"Lib.append \nappend \n\n Concatena insieme le due liste fornite. Si tratta della forma non \n infissa e curried di \u0027@\u0027\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#flatten","title":"Lib.flatten","content":"Lib.flatten \nflatten \n\n Appiattisce la lista di liste fornita in una lista singola.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#enumerate0","title":"Lib.enumerate0","content":"Lib.enumerate0 \nenumerate0 \n\n Funzione tail-ricorsiva a supporto della definizione di enumerate\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#enumerate","title":"Lib.enumerate","content":"Lib.enumerate \nenumerate \n\n Etichetta ciascun elemento della lista fornita con la sua posizione (a base 1) \n nella lista.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#zip","title":"Lib.zip","content":"Lib.zip \nzip \n\n Combina in coppie gli elementi corrispondenti delle due liste fornite. \n Fallisce se le due liste non hanno la stessa lunghezza.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unzip","title":"Lib.unzip","content":"Lib.unzip \nunzip \n\n Divide la lista di coppie fornita nella lista dei primi componenti \n e nella lista dei secondi componenti di ciascuna coppia.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#el","title":"Lib.el","content":"Lib.el \nel \n\n Restituisce l\u0027n-esimo elemento della lista fornita, usando una base 1 d\u0027indicizzazione.\n Fallisce se l\u0027indice \u00E8 fuori dal range.      \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#el0","title":"Lib.el0","content":"Lib.el0 \nel0 \n\n Restituisce l\u0027n-esimo elemento della lista fornita, usando una base 0 d\u0027indicizzazione.\n Fallisce se l\u0027indice \u00E8 fuori dal range.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#cut","title":"Lib.cut","content":"Lib.cut \ncut \n\n Divide la lista fornita in due secondo l\u0027indice \u0027n\u0027 a base 1, con gli elementi \n da 1 a \u0027n\u0027 nella prima lista e i restanti nella seconda.\n Fallisce se \u0027n\u0027 \u00E8 negativo o maggiore della lnghezza della lista.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#cut_while0","title":"Lib.cut_while0","content":"Lib.cut_while0 \ncut_while0 \n\n Funzione tail-ricorsiva a supporto della definizione di cut_while\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#cut_while","title":"Lib.cut_while","content":"Lib.cut_while \ncut_while \n\n Divide la lista fornita in due segmenti, dove il secondo segmento inizia \n al primo elemento che non soddisfa la funzione di test fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#decrement","title":"Lib.decrement","content":"Lib.decrement \ndecrement \n\n Sottrae 1 se l\u0027intero fornito \u00E8 positivo, altrimenti restituisce 0.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#up_to","title":"Lib.up_to","content":"Lib.up_to \nup_to \n\n Restituisce la lista degli interi crescenti contigui che partono dal primo \n intero fornito al secondo. Restituisce una lista vuota se il secondo \n argomento \u00E8 minore del primo.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#( \u003C* )","title":"Lib.( \u003C* )","content":"Lib.( \u003C* ) \n( \u003C* ) \n\n La funzione binaria infissa per la composizione di funzioni.\n Corrisponde a \u003C\u003C.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#curry","title":"Lib.curry","content":"Lib.curry \ncurry \n\n Restituisce l\u0027equivalente curried di una funzione binaria che prende una coppia come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#uncurry","title":"Lib.uncurry","content":"Lib.uncurry \nuncurry \n\n Restituisce l\u0027equivalente uncurried (che prende una coppia come argomento) della \n funzione binaria curried passata come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#funpow","title":"Lib.funpow","content":"Lib.funpow \nfunpow \n\n Applica l\u0027ennesima potenza della funzione fornita. cio\u00E8 esegue una \n ricorsione della funzione n volte, passando il risultato nuovamente come input, e\n restituendo l\u0027input originario se n \u00E8 0. Fallisce se la potenza \u00E8 negativa.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#swap_arg","title":"Lib.swap_arg","content":"Lib.swap_arg \nswap_arg \n\n Prende una funzione binaria curried, e restituisce una funzione equivalente che \n prende i suoi argomenti in ordine inverso. E\u0027 chiamata il combinatore \u0027C\u0027 \n nella logica combinatoria.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#dbl_arg","title":"Lib.dbl_arg","content":"Lib.dbl_arg \ndbl_arg \n\n Applica la funzione binaria curried fornita usando l\u0027argomento fornito \n per entrambi gli argomenti della funzione. E\u0027 chiamata il combinatore \u0027W\u0027 \n nella logica combinatoria.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#id_fn","title":"Lib.id_fn","content":"Lib.id_fn \nid_fn \n\n La funzione che restituisce il suo argomento come suo risultato. E\u0027 \n chiamata il combinatore \u0027I\u0027 nella logica combinatoria.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#arg1_fn","title":"Lib.arg1_fn","content":"Lib.arg1_fn \narg1_fn \n\n La funzione binaria curried che restituisce il suo primo argomento. E\u0027 \n chiamata il combinatore \u0027K\u0027 nella logica combinatoria.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#pair_apply","title":"Lib.pair_apply","content":"Lib.pair_apply \npair_apply \n\n Applica la coppia di funzioni fornita ai componenti corrispondenti di una coppia data                                                   \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#map","title":"Lib.map","content":"Lib.map \nmap \n\n Applicala funzione fornita a ciascun elemento della lista fornita.\n                                                                \n   map f [x1;x2;..;xn]  ==  [f x1; f x2; ..; f xn]\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#map2","title":"Lib.map2","content":"Lib.map2 \nmap2 \n\n Applica una data funzione binaria curried agli elementi corrispondenti di due \n liste date. Fallisce se le liste non hanno la stessa lunghezza.\n                                                                         \n   map2 (\u002B) [x1;x2;..;xn] [y1;y2;..;yn] = [x1 \u002B y1; x2 \u002B y2; ..; xn \u002B yn]\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#foldl","title":"Lib.foldl","content":"Lib.foldl \nfoldl \n\n Applica l\u0027operatore binario curried fornito sugli elementi della lista \n fornita, da sinistra a destra, iniziando con l\u0027operatore applicato \n all\u0027argomento extra fornito e al primo elemento della lista. Restituisce \n l\u0027argomento extra se la lista \u00E8 vuota.\n                                                                        \n   foldl (\u002B) a [x1;x2;..;xn]  ==  (..((a \u002B x1) \u002B x2) \u002B ..) \u002B xn\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#foldl1","title":"Lib.foldl1","content":"Lib.foldl1 \nfoldl1 \n\n Applica l\u0027operatore binario curried fornito sugli elementi della \n lista fornita, da sinistra a destra. Fallisce se la lista \u00E8 vuota.\n                                                                  \n   foldl1 (\u002B) [x1;x2;..;xn]  ==  (..(x1 \u002B x2) \u002B ..) \u002B xn          \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#foldr","title":"Lib.foldr","content":"Lib.foldr \nfoldr \n\n Applica l\u0027operatore binario curried fornito sugli elementi della \n lista fornita, da destra a sinistra, iniziando con l\u0027operatore applicato \n all\u0027ultimo elemento della lista e all\u0027argomento extra fornito. Restituisce \n l\u0027argomento estra se la lista \u00E8 vuota.    \n                                                                        \n   foldr (\u002B) [x1;x2;..;xn] a  ==  x1 \u002B (x2 \u002B (.. \u002B (xn \u002B a)..))\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#foldr1","title":"Lib.foldr1","content":"Lib.foldr1 \nfoldr1 \n\n Applica un dato operatore binario curried sugli elementi della lista \n fornita, da destra a sinistra. Fallisce se la lista \u00E8 vuota.      \n                                                                      \n   foldr1 (\u002B) [x1;x2;..;xn]  ==  x1 \u002B (x2 \u002B .. \u002B (xn-1 \u002B xn)..)\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#foldl\u0027","title":"Lib.foldl\u0027","content":"Lib.foldl\u0027 \nfoldl\u0027 \n\n Versione uncurried di foldl\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#foldr\u0027","title":"Lib.foldr\u0027","content":"Lib.foldr\u0027 \nfoldr\u0027 \n\n Versione uncurried di foldr\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#foldl1\u0027","title":"Lib.foldl1\u0027","content":"Lib.foldl1\u0027 \nfoldl1\u0027 \n\n Versione uncurried di foldl1\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#foldr1\u0027","title":"Lib.foldr1\u0027","content":"Lib.foldr1\u0027 \nfoldr1\u0027 \n\n Versione uncurried di foldr1\u0027\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unfoldl0","title":"Lib.unfoldl0","content":"Lib.unfoldl0 \nunfoldl0 \n\n Funzione tail-ricorsiva a supporto della definizione di unfoldl\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unfoldl","title":"Lib.unfoldl","content":"Lib.unfoldl \nunfoldl \n\n Usa un dato decostruttore binario per decostruire ripetutamente il \n ramo sinistro dell\u0027argomento fornito fino a quando il decostruttore \n causa una HolFail exception. Restituisce la parte pi\u00F9 interna sinistra \n accoppiata con la lista dei rami destri.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unfoldl1","title":"Lib.unfoldl1","content":"Lib.unfoldl1 \nunfoldl1 \n\n Usa un dato decostruttore binario per decostruire ripetutamente il ramo \n sinistro dell\u0027argomento fornito fino a quando il decostruttore casua \n una HolFail Exception. Restituisce la lista che inizia con il lato \n sinistro pi\u00F9 interno seguito dai rami destri.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unfoldr0","title":"Lib.unfoldr0","content":"Lib.unfoldr0 \nunfoldr0 \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unfoldr","title":"Lib.unfoldr","content":"Lib.unfoldr \nunfoldr \n\n Usa un dato decostruttore binario per decostruire ripetutamente il lato \n destro dell\u0027argomento fornito fino a quando il decostruttore cauasa una \n HolFail exception. Restituisce la lista dei lati sinistri, accoppiata con \n il lato destro pi\u00F9 interno.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unfoldr1","title":"Lib.unfoldr1","content":"Lib.unfoldr1 \nunfoldr1 \n\n Usa un dato decostruttore binario per decostruire ripetutamente i rami \n destri dell\u0027argomento fornito fino a quando il decostruttore causa una \n HolFail exception. Restituisce la lista dei lati sinistri e che finisce \n con il lato destro pi\u00F9 interno.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unfold0","title":"Lib.unfold0","content":"Lib.unfold0 \nunfold0 \n\n Funzione tail ricorsiva a supporto della definizione di unfold.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unfold","title":"Lib.unfold","content":"Lib.unfold \nunfold \n\n Usa un dato decostruttore binario per decostruire ripetutamente tutti i \n rami dell\u0027argomento fornito fino a quando il decostruttore causa una \n HolFail exception su ciasun sotto ramo. Restituisce una lista appiattita \n delle estremit\u00E0 risultanti.      \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#find","title":"Lib.find","content":"Lib.find \nfind \n\n Restituisce il primo elemento della lista fornita che soddisfa una data \n funzione di test. Fallisce se un tale elemento non esiste.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#filter","title":"Lib.filter","content":"Lib.filter \nfilter \n\n Rimuove tutti gli elementi della lista fornita che non soddisfano una data \n funzione di test.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#partition","title":"Lib.partition","content":"Lib.partition \npartition \n\n Separa la lista fornita in due lista, per quegli elementi che rispettivamente \n soddisfano e non soddisfano una data funzione di test.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#exists","title":"Lib.exists","content":"Lib.exists \nexists \n\n Restituisce \u0022true\u0022 sse c\u0027\u00E8 almento un elemento nella lista fornita \n che soddisfa una data funzione di test.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#forall","title":"Lib.forall","content":"Lib.forall \nforall \n\n Restituisce \u0022true\u0022 sse ogni elemento nella lista fornita soddisfa una data \n funzione di test.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#forall2","title":"Lib.forall2","content":"Lib.forall2 \nforall2 \n\n Testa se gli elementi corrispondenti di due liste soddisfano tutte una relazionze.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#assoc","title":"Lib.assoc","content":"Lib.assoc \nassoc \n\n Restituisce il componente destro della prima coppia nella lista fornita il cui \n componente sinistro \u00E8 uguale al valore fornito. Fallisce se non pu\u00F2 trovare una \n tale coppia.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#inv_assoc","title":"Lib.inv_assoc","content":"Lib.inv_assoc \ninv_assoc \n\n Restituisce il componente sinistro della prima coppia nella lista fornita il cui \n componente destro \u00E8 uguale al valore fornito. Fallisce se non pu\u00F2 trovare una \n tale coppia.                                       \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#fst_map","title":"Lib.fst_map","content":"Lib.fst_map \nfst_map \n\n Applica la funzione fornita al componente sinistro di ciascuna coppia \n nella lista di coppie fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#snd_map","title":"Lib.snd_map","content":"Lib.snd_map \nsnd_map \n\n Applica la funzione fornita al componente destro di ciascuna coppia \n nella lista di coppie fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#fst_filter","title":"Lib.fst_filter","content":"Lib.fst_filter \nfst_filter \n\n Elimina dalla lista di coppie fornita gli elementi con un componente \n sinistro che restituisce falso per la funzione di test fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#snd_filter","title":"Lib.snd_filter","content":"Lib.snd_filter \nsnd_filter \n\n Elimina dalla lista di coppie fornita gli elementi con un componente \n destro che restituisce falso per la funzione di test fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#do_map","title":"Lib.do_map","content":"Lib.do_map \ndo_map \n\n Applica la funzione con valore unit fornita a turno su ciascun elemento della \n lista fornita, restituendo a sua volta unit.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#mem","title":"Lib.mem","content":"Lib.mem \nmem \n\n Restituisce \u0022true\u0022 sse l\u0027elemento fornito \u00E8 nella lista fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#mem\u0027","title":"Lib.mem\u0027","content":"Lib.mem\u0027 \nmem\u0027 \n\n Restituisce \u0022true\u0022 sse l\u0027elemento fornito \u00E8 nella lista fornita rispetto \n a una funzione di confronto passata come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#insert","title":"Lib.insert","content":"Lib.insert \ninsert \n\n Aggiunge l\u0027elemento fornito alla lista fornita a meno che sia gi\u00E0 nella lista.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#insert\u0027","title":"Lib.insert\u0027","content":"Lib.insert\u0027 \ninsert\u0027 \n\n Aggiunge l\u0027elemento fornto alla lista fornita a meno che sia gi\u00E0 nella lista \n rispetto a una funzione di confronto fornita come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#setify","title":"Lib.setify","content":"Lib.setify \nsetify \n\n Rimuove ogni duplicazioni di elementi dalla lista fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#setify\u0027","title":"Lib.setify\u0027","content":"Lib.setify\u0027 \nsetify\u0027 \n\n Rimuove ogni duplicazione di elementi dalla lista fornita \n rispetto a una funzione di confronto fornita come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#union","title":"Lib.union","content":"Lib.union \nunion \n\n Crea una lista di elementi che occorrono in almeno una delle liste fornite.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#union\u0027","title":"Lib.union\u0027","content":"Lib.union\u0027 \nunion\u0027 \n\n Crea una lista di elementi che occorrono in almeno una delle liste fornite \n rispetto a una funzione di confronto fornita come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unions","title":"Lib.unions","content":"Lib.unions \nunions \n\n Crea una lista di elementi che occorrono in almeno una delle liste all\u0027interno  \n della lista di liste fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#unions\u0027","title":"Lib.unions\u0027","content":"Lib.unions\u0027 \nunions\u0027 \n\n Crea una lista di elementi che occorrono in almeno una delle liste all\u0027interno  \n della lista di liste fornita rispetto a una funzione di confronto fornita come \n argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#intersect","title":"Lib.intersect","content":"Lib.intersect \nintersect \n\n Crea una lista di elementi che occorrono in ciasuna delle due liste fornite.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#intersect\u0027","title":"Lib.intersect\u0027","content":"Lib.intersect\u0027 \nintersect\u0027 \n\n Crea una lista di elementi che occorrono in ciasuna delle due liste fornite \n rispetto a una funzione di confronto fornita come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#subtract","title":"Lib.subtract","content":"Lib.subtract \nsubtract \n\n Rimuove dalla prima lista fornita gli elmenti che occorrono anche nella \n seconda.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#subtract\u0027","title":"Lib.subtract\u0027","content":"Lib.subtract\u0027 \nsubtract\u0027 \n\n Rimuove dalla prima lista fornita gli elmenti che occorrono anche nella \n seconda rispetto a una funzione di confronto fornita come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#subset","title":"Lib.subset","content":"Lib.subset \nsubset \n\n Restituisce \u0022true\u0022 sse tutti gli elementi nella prima lista fornita occorrono \n anche nella seconda.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#subset\u0027","title":"Lib.subset\u0027","content":"Lib.subset\u0027 \nsubset\u0027 \n\n Restituisce \u0022true\u0022 sse tutti gli elementi nella prima lista fornita occorrono \n anche nella seconda rispetto a una funzione di confronto fornita come argomento.                                                      \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#disjoint","title":"Lib.disjoint","content":"Lib.disjoint \ndisjoint \n\n Restituisce \u0022true\u0022 sse non ci sono elementi in comune tra le due liste fornite.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#disjoint\u0027","title":"Lib.disjoint\u0027","content":"Lib.disjoint\u0027 \ndisjoint\u0027 \n\n Restituisce \u0022true\u0022 sse non ci sono elementi in comune tra le due liste fornite \n rispetto a una funzione di confronto fornita come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#set_eq","title":"Lib.set_eq","content":"Lib.set_eq \nset_eq \n\n Restituisce \u0022true\u0022 sse le due liste fornite hanno gli stessi \n elementi (senza considerare per\u00F2 elementi eventuali duplicati).\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#set_eq\u0027","title":"Lib.set_eq\u0027","content":"Lib.set_eq\u0027 \nset_eq\u0027 \n\n Restituisce \u0022true\u0022 sse le due liste fornite hanno gli stessi \n elementi (senza considerare per\u00F2 elementi eventuali duplicati)\n rispetto a una funzione di confronto fornita come argomento.                     \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#no_dups0","title":"Lib.no_dups0","content":"Lib.no_dups0 \nno_dups0 \n\n Funzione tail ricorsiva a supporto della definizione di no_dups\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#no_dups","title":"Lib.no_dups","content":"Lib.no_dups \nno_dups \n\n Restituisce \u0022true\u0022 sse la lista fornita non contiene duplicati.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#no_dups0\u0027","title":"Lib.no_dups0\u0027","content":"Lib.no_dups0\u0027 \nno_dups0\u0027 \n\n Funzione tail ricorsiva a supporto della definizione di no_dups\u0027\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#no_dups\u0027","title":"Lib.no_dups\u0027","content":"Lib.no_dups\u0027 \nno_dups\u0027 \n\n Restituisce \u0022true\u0022 sse la lista fornita non contiene duplicati\n rispetto a una funzione di confronto fornita come argomento.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#string_of_int","title":"Lib.string_of_int","content":"Lib.string_of_int \nstring_of_int \n\n Restituisce la rappresentazione sotto forma di stringa dell\u0027intero fornito\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#char_implode","title":"Lib.char_implode","content":"Lib.char_implode \nchar_implode \n\n Concatena una lista di caratteri in una singola stringa.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#char_explode","title":"Lib.char_explode","content":"Lib.char_explode \nchar_explode \n\n Divide una stringa in una lista di caratteri.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#implode","title":"Lib.implode","content":"Lib.implode \nimplode \n\n Concatena una lista di stringhe in una singola stringa.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#explode","title":"Lib.explode","content":"Lib.explode \nexplode \n\n Divide una stringa in una lista di stringhe da un solo carattere.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#string_variant","title":"Lib.string_variant","content":"Lib.string_variant \nstring_variant \n\n Crea una variante della stringa fornita appendendo in fondo ad essa degli \n apostrofi fino a quando \u00E8 diversa da ogni stringa all\u0027interno della lista \n di stringhe da evitare fornita come argomento. Non appende alcun apostrofo \n se la stringa originale \u00E8 gi\u00E0 diversa da ognuna delle stringhe da evitare.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#quote0","title":"Lib.quote0","content":"Lib.quote0 \nquote0 \n\n Mette degli apici singoli intorno alla stringa fornita. Non esegue \n alcun escape di caratteri speciali.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#char_escape","title":"Lib.char_escape","content":"Lib.char_escape \nchar_escape \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#quote","title":"Lib.quote","content":"Lib.quote \nquote \n\n Aggiunge dei doppi-apici intorno alla stringa fornita, aggiunge dei backslash   \n per l\u0027escape dei backslash e dei doppi apici, e usa i codici ASCII per backquotes \n e caratteri non stampabili.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#report","title":"Lib.report","content":"Lib.report \nreport \n\n Emette sullo standard output la stringa fornita come argomento preceduta \n dal prefisso \u0022[HZ] \u0022 e seguita da un punto e una nuova riga. Il prefisso \n \u0022[HZ] \u0022 serve a identificare i messaggi restituiti dal programma e \n distinguerli dai messaggi standard di .NET.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#warn","title":"Lib.warn","content":"Lib.warn \nwarn \n\n Emette sullo standard output la stringa fornita come argomento preceduta \n dal prefisso \u0022[HZ] Warning - \u0022 e seguita da un punto e da una nuova riga.\n Il prefisso \u0022[HZ] Warning - \u0022 identifica i warning emessi dal programma.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#merge","title":"Lib.merge","content":"Lib.merge \nmerge \n\n Fa il merge delle due liste ordinate fornite in un\u0027unica lista ordinata, \n rispetto alla relazione di ordinamento totale fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#mergesort","title":"Lib.mergesort","content":"Lib.mergesort \nmergesort \n\n Ordina la lista fornita usando la tecnica del merge, rispetto alla relazione \n di orinamento totale fornita.\n"},{"uri":"http://localhost:8901/reference/hol-lib.html#(||\u003E\u003E)","title":"Lib.(||\u003E\u003E)","content":"Lib.(||\u003E\u003E) \n(||\u003E\u003E) \n"},{"uri":"http://localhost:8901/reference/hol-lib.html#int_of_string","title":"Lib.int_of_string","content":"Lib.int_of_string \nint_of_string \n"},{"uri":"http://localhost:8901/reference/hol-names.html","title":"Names","content":"Names \n\nThis module provides support for classifying HOL names for the purposes of\nparsing and printing.  This consists of tests for basic classes of name   \nand commands for setting identifier fixity and enumeration brackets.  This\nmodule is a trusted component of the system, since it is used in the      \nimplementation of the pretty printer.          \n \nNames.assochand \nassochand \nNames.fixity \nfixity \nNames.hand \nhand \nNames.is_whitespace_char \nis_whitespace_char \nNames.is_unprintable_char \nis_unprintable_char \nNames.is_lowercase \nis_lowercase \nNames.is_uppercase \nis_uppercase \nNames.is_letter \nis_letter \nNames.is_digit \nis_digit \nNames.is_alphanum_char1 \nis_alphanum_char1 \nNames.is_alphanum_char2 \nis_alphanum_char2 \nNames.is_alphanum \nis_alphanum \nNames.is_numeric \nis_numeric \nNames.is_symbolic_char \nis_symbolic_char \nNames.is_symbolic \nis_symbolic \nNames.is_punctuation_char \nis_punctuation_char \nNames.is_keyword \nis_keyword \nNames.precedence_ok \nprecedence_ok \nNames.is_nonfix_fixity \nis_nonfix_fixity \nNames.is_prefix_fixity \nis_prefix_fixity \nNames.is_infix_fixity \nis_infix_fixity \nNames.is_postfix_fixity \nis_postfix_fixity \nNames.is_binder_fixity \nis_binder_fixity \nNames.infix_info \ninfix_info \nNames.the_type_fixities \nthe_type_fixities \nNames.get_type_fixity \nget_type_fixity \nNames.get_all_type_fixities \nget_all_type_fixities \nNames.get_infix_type_info \nget_infix_type_info \nNames.has_nonfix_type_fixity \nhas_nonfix_type_fixity \nNames.has_infix_type_fixity \nhas_infix_type_fixity \nNames.set_type_fixity \nset_type_fixity \nNames.reset_type_fixity \nreset_type_fixity \nNames.the_fixities \nthe_fixities \nNames.get_fixity \nget_fixity \nNames.get_all_fixities \nget_all_fixities \nNames.get_infix_info \nget_infix_info \nNames.has_nonfix_fixity \nhas_nonfix_fixity \nNames.has_prefix_fixity \nhas_prefix_fixity \nNames.has_infix_fixity \nhas_infix_fixity \nNames.has_postfix_fixity \nhas_postfix_fixity \nNames.has_binder_fixity \nhas_binder_fixity \nNames.set_fixity \nset_fixity \nNames.reset_fixity \nreset_fixity \nNames.the_enum_db \nthe_enum_db \nNames.get_enum_zero_op \nget_enum_zero_op \nNames.get_enum_zero_brackets \nget_enum_zero_brackets \nNames.get_all_enum_info \nget_all_enum_info \nNames.the_enum_brackets \nthe_enum_brackets \nNames.is_enum_bracket \nis_enum_bracket \nNames.get_enum_bracket_zero \nget_enum_bracket_zero \nNames.is_enum_open \nis_enum_open \nNames.is_enum_close \nis_enum_close \nNames.is_enum_openclose \nis_enum_openclose \nNames.check_bracket_name \ncheck_bracket_name \nNames.set_enum_brackets \nset_enum_brackets"},{"uri":"http://localhost:8901/reference/hol-names.html#is_whitespace_char","title":"Names.is_whitespace_char","content":"Names.is_whitespace_char \nis_whitespace_char \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_unprintable_char","title":"Names.is_unprintable_char","content":"Names.is_unprintable_char \nis_unprintable_char \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_lowercase","title":"Names.is_lowercase","content":"Names.is_lowercase \nis_lowercase \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_uppercase","title":"Names.is_uppercase","content":"Names.is_uppercase \nis_uppercase \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_letter","title":"Names.is_letter","content":"Names.is_letter \nis_letter \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_digit","title":"Names.is_digit","content":"Names.is_digit \nis_digit \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_alphanum_char1","title":"Names.is_alphanum_char1","content":"Names.is_alphanum_char1 \nis_alphanum_char1 \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_alphanum_char2","title":"Names.is_alphanum_char2","content":"Names.is_alphanum_char2 \nis_alphanum_char2 \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_alphanum","title":"Names.is_alphanum","content":"Names.is_alphanum \nis_alphanum \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_numeric","title":"Names.is_numeric","content":"Names.is_numeric \nis_numeric \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_symbolic_char","title":"Names.is_symbolic_char","content":"Names.is_symbolic_char \nis_symbolic_char \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_symbolic","title":"Names.is_symbolic","content":"Names.is_symbolic \nis_symbolic \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_punctuation_char","title":"Names.is_punctuation_char","content":"Names.is_punctuation_char \nis_punctuation_char \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_keyword","title":"Names.is_keyword","content":"Names.is_keyword \nis_keyword \n"},{"uri":"http://localhost:8901/reference/hol-names.html#precedence_ok","title":"Names.precedence_ok","content":"Names.precedence_ok \nprecedence_ok \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_nonfix_fixity","title":"Names.is_nonfix_fixity","content":"Names.is_nonfix_fixity \nis_nonfix_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_prefix_fixity","title":"Names.is_prefix_fixity","content":"Names.is_prefix_fixity \nis_prefix_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_infix_fixity","title":"Names.is_infix_fixity","content":"Names.is_infix_fixity \nis_infix_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_postfix_fixity","title":"Names.is_postfix_fixity","content":"Names.is_postfix_fixity \nis_postfix_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_binder_fixity","title":"Names.is_binder_fixity","content":"Names.is_binder_fixity \nis_binder_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#infix_info","title":"Names.infix_info","content":"Names.infix_info \ninfix_info \n"},{"uri":"http://localhost:8901/reference/hol-names.html#the_type_fixities","title":"Names.the_type_fixities","content":"Names.the_type_fixities \nthe_type_fixities \n\nThe type fixity database registers the fixity of type constant            \nidentifiers.  It is implemented as a dynamic lookup tree, indexed by type \nconstant name.  Identifiers not occurring in the database have default    \nnonfix fixity.                                                            \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_type_fixity","title":"Names.get_type_fixity","content":"Names.get_type_fixity \nget_type_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_all_type_fixities","title":"Names.get_all_type_fixities","content":"Names.get_all_type_fixities \nget_all_type_fixities \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_infix_type_info","title":"Names.get_infix_type_info","content":"Names.get_infix_type_info \nget_infix_type_info \n"},{"uri":"http://localhost:8901/reference/hol-names.html#has_nonfix_type_fixity","title":"Names.has_nonfix_type_fixity","content":"Names.has_nonfix_type_fixity \nhas_nonfix_type_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#has_infix_type_fixity","title":"Names.has_infix_type_fixity","content":"Names.has_infix_type_fixity \nhas_infix_type_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#set_type_fixity","title":"Names.set_type_fixity","content":"Names.set_type_fixity \nset_type_fixity \n\nThis is the type fixity setting command for type constant names.  It takes\na string and a fixity, and registers the type fixity of the string name   \nas the supplied fixity, so that any type constants with that name get     \nwritten with that fixity.  Supplying a name that is currently registered  \nwith a fixity that is not nonfix will cause failure (except in benign     \nresetting to the same fixity).  A note of the fixity change is reported,  \nand unit is returned.                                                     \n"},{"uri":"http://localhost:8901/reference/hol-names.html#reset_type_fixity","title":"Names.reset_type_fixity","content":"Names.reset_type_fixity \nreset_type_fixity \n\nThis is the type fixity resetting command for type constant names.  It    \ntakes a string, and removes the registered type fixity of the string name,\nso that any type constants with that name get written with nonfix fixity. \nA note of the fixity change is reported, and unit is returned.            \n"},{"uri":"http://localhost:8901/reference/hol-names.html#the_fixities","title":"Names.the_fixities","content":"Names.the_fixities \nthe_fixities \n\nThe term fixity database registers the fixity of var/const identifiers.\nIt is implemented as a dynamic lookup tree, indexed by identifier name.\nIdentifiers not occurring in the database have default nonfix fixity.  \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_fixity","title":"Names.get_fixity","content":"Names.get_fixity \nget_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_all_fixities","title":"Names.get_all_fixities","content":"Names.get_all_fixities \nget_all_fixities \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_infix_info","title":"Names.get_infix_info","content":"Names.get_infix_info \nget_infix_info \n"},{"uri":"http://localhost:8901/reference/hol-names.html#has_nonfix_fixity","title":"Names.has_nonfix_fixity","content":"Names.has_nonfix_fixity \nhas_nonfix_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#has_prefix_fixity","title":"Names.has_prefix_fixity","content":"Names.has_prefix_fixity \nhas_prefix_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#has_infix_fixity","title":"Names.has_infix_fixity","content":"Names.has_infix_fixity \nhas_infix_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#has_postfix_fixity","title":"Names.has_postfix_fixity","content":"Names.has_postfix_fixity \nhas_postfix_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#has_binder_fixity","title":"Names.has_binder_fixity","content":"Names.has_binder_fixity \nhas_binder_fixity \n"},{"uri":"http://localhost:8901/reference/hol-names.html#set_fixity","title":"Names.set_fixity","content":"Names.set_fixity \nset_fixity \n\nThis is the term fixity setting command for variable/constant names.  It \ntakes a string and a fixity, and registers the term fixity of the string \nname as the supplied fixity, so that any variables or constants with that\nname get written with that fixity.  Supplying a name that is currently   \nregistered with a fixity that is not nonfix will cause failure (except in\nbenign resetting to the same fixity).  A note of the fixity change is    \nreported, and unit is returned.                                          \n"},{"uri":"http://localhost:8901/reference/hol-names.html#reset_fixity","title":"Names.reset_fixity","content":"Names.reset_fixity \nreset_fixity \n\nThis is the term fixity resetting command for variable/constant names.  It\ntakes a string, and removes the registered term fixity of the string name,\nso that any variables or constants with that name get written with nonfix \nfixity.  A note of the fixity change is reported, and unit is returned.\n"},{"uri":"http://localhost:8901/reference/hol-names.html#the_enum_db","title":"Names.the_enum_db","content":"Names.the_enum_db \nthe_enum_db \n\nThe main enumeration database registers the associations between          \ninsertion operator and empty structure constants and opening and closing  \nenumeration brackets.  It is implemented as a dynamic lookup tree, indexed\nby empty structure constant name.                                         \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_enum_zero_op","title":"Names.get_enum_zero_op","content":"Names.get_enum_zero_op \nget_enum_zero_op \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_enum_zero_brackets","title":"Names.get_enum_zero_brackets","content":"Names.get_enum_zero_brackets \nget_enum_zero_brackets \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_all_enum_info","title":"Names.get_all_enum_info","content":"Names.get_all_enum_info \nget_all_enum_info \n"},{"uri":"http://localhost:8901/reference/hol-names.html#the_enum_brackets","title":"Names.the_enum_brackets","content":"Names.the_enum_brackets \nthe_enum_brackets \n\nThe enumeration bracket database is a secondary database, used during     \nparsing for looking up the empty structure constant name for a given      \nenumeration bracket.  This is implemented as a dynamic lookup tree,       \nindexed by enumeration bracket.  There are entries for each opening       \nbracket, each closing bracket and for each pair of concatenated           \ncorresponding opening and closing brackets.  These concatenated pair      \nentries are used by the term quotation parser, to allow empty enumerations\nappearing in term quotations to have no space between the opening and     \nclosing enumeration brackets.                                             \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_enum_bracket","title":"Names.is_enum_bracket","content":"Names.is_enum_bracket \nis_enum_bracket \n"},{"uri":"http://localhost:8901/reference/hol-names.html#get_enum_bracket_zero","title":"Names.get_enum_bracket_zero","content":"Names.get_enum_bracket_zero \nget_enum_bracket_zero \n\nGets the closing bracket given the opning one\n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_enum_open","title":"Names.is_enum_open","content":"Names.is_enum_open \nis_enum_open \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_enum_close","title":"Names.is_enum_close","content":"Names.is_enum_close \nis_enum_close \n"},{"uri":"http://localhost:8901/reference/hol-names.html#is_enum_openclose","title":"Names.is_enum_openclose","content":"Names.is_enum_openclose \nis_enum_openclose \n"},{"uri":"http://localhost:8901/reference/hol-names.html#check_bracket_name","title":"Names.check_bracket_name","content":"Names.check_bracket_name \ncheck_bracket_name \n"},{"uri":"http://localhost:8901/reference/hol-names.html#set_enum_brackets","title":"Names.set_enum_brackets","content":"Names.set_enum_brackets \nset_enum_brackets \n\nThis is the enumeration bracket setting command.  It takes two pairs of   \nstrings, where the first pair is the name of an enumeration insertion     \noperator constant and the name of an enumeration empty structure constant,\nand the second pair is the name of the opening and closing enumeration    \nbrackets to be associated with these constants.  The brackets are         \nregistered as the enumeration brackets corresponding to the supplied      \nconstants, and become reserved words of the HOL language.  A note of the  \nbracket declaration is reported, and unit is returned.                    \n"},{"uri":"http://localhost:8901/reference/hol-names-assochand.html","title":"assochand","content":"assochand \n \nassochand.LeftAssoc \nLeftAssoc \nassochand.RightAssoc \nRightAssoc \nassochand.NonAssoc \nNonAssoc"},{"uri":"http://localhost:8901/reference/hol-names-assochand.html#LeftAssoc","title":"assochand.LeftAssoc","content":"assochand.LeftAssoc \nLeftAssoc \n"},{"uri":"http://localhost:8901/reference/hol-names-assochand.html#RightAssoc","title":"assochand.RightAssoc","content":"assochand.RightAssoc \nRightAssoc \n"},{"uri":"http://localhost:8901/reference/hol-names-assochand.html#NonAssoc","title":"assochand.NonAssoc","content":"assochand.NonAssoc \nNonAssoc \n"},{"uri":"http://localhost:8901/reference/hol-names-fixity.html","title":"fixity","content":"fixity \n \nfixity.Nonfix \nNonfix \nfixity.Prefix \nPrefix \nfixity.Infix \nInfix \nfixity.Postfix \nPostfix \nfixity.Binder \nBinder"},{"uri":"http://localhost:8901/reference/hol-names-fixity.html#Nonfix","title":"fixity.Nonfix","content":"fixity.Nonfix \nNonfix \n"},{"uri":"http://localhost:8901/reference/hol-names-fixity.html#Prefix","title":"fixity.Prefix","content":"fixity.Prefix \nPrefix \n"},{"uri":"http://localhost:8901/reference/hol-names-fixity.html#Infix","title":"fixity.Infix","content":"fixity.Infix \nInfix \n"},{"uri":"http://localhost:8901/reference/hol-names-fixity.html#Postfix","title":"fixity.Postfix","content":"fixity.Postfix \nPostfix \n"},{"uri":"http://localhost:8901/reference/hol-names-fixity.html#Binder","title":"fixity.Binder","content":"fixity.Binder \nBinder \n"},{"uri":"http://localhost:8901/reference/hol-names-hand.html","title":"hand","content":"hand \n \nhand.Left \nLeft \nhand.Right \nRight"},{"uri":"http://localhost:8901/reference/hol-names-hand.html#Left","title":"hand.Left","content":"hand.Left \nLeft \n"},{"uri":"http://localhost:8901/reference/hol-names-hand.html#Right","title":"hand.Right","content":"hand.Right \nRight \n"},{"uri":"http://localhost:8901/reference/hol-nat.html","title":"Nat","content":"Nat \n\nThis module extends the HOL logic with the theory of natural numbers.    \nThis involves giving theory object definitions for the naturals base type\nand the \u0022ZERO\u0022 and \u0022SUC\u0022 constants, based on the theory of individuals,  \nand proving a few important properties.                                                                                                                                                                                                      \n \nNat.is_nat_rep_def \nis_nat_rep_def \nNat.ind_zero_is_nat_rep_lemma \nind_zero_is_nat_rep_lemma \nNat.ind_suc_is_nat_rep_lemma \nind_suc_is_nat_rep_lemma \nNat.nat_rep_exists_lemma \nnat_rep_exists_lemma \nNat.nat_def \nnat_def \nNat.nat_ty \nnat_ty \nNat.nat_bij_def2 \nnat_bij_def2 \nNat.nat_bij_def1 \nnat_bij_def1 \nNat.is_nat_rep_lemma \nis_nat_rep_lemma \nNat.nat_rep_injective_lemma \nnat_rep_injective_lemma \nNat.zero_def \nzero_def \nNat.zero_tm0 \nzero_tm0 \nNat.suc_def \nsuc_def \nNat.suc_fn \nsuc_fn \nNat.mk_suc \nmk_suc \nNat.dest_suc \ndest_suc \nNat.is_suc \nis_suc \nNat.nat_rep_zero_lemma \nnat_rep_zero_lemma \nNat.nat_rep_suc_lemma \nnat_rep_suc_lemma \nNat.suc_not_zero_thm0 \nsuc_not_zero_thm0 \nNat.suc_injective_thm \nsuc_injective_thm \nNat.nat_induction_thm0 \nnat_induction_thm0 \nNat.nat_cases_thm0 \nnat_cases_thm0 \nNat.e \ne \nNat.f \nf \nNat.fn_ \nfn_ \nNat.prg \nprg \nNat.prg\u0027 \nprg\u0027 \nNat.m \nm \nNat.n \nn \nNat.n\u0027 \nn\u0027 \nNat.x \nx \nNat.x\u0027 \nx\u0027 \nNat.y \ny \nNat.y1 \ny1 \nNat.y2 \ny2 \nNat.f_x_n \nf_x_n \nNat.f_y_n \nf_y_n \nNat.prg_n_x \nprg_n_x \nNat.fn_n \nfn_n \nNat.prg_case1_tm \nprg_case1_tm \nNat.prg_case2_tm_body_tm \nprg_case2_tm_body_tm \nNat.prg_case2_tm_body1_tm \nprg_case2_tm_body1_tm \nNat.prg_case2_tm \nprg_case2_tm \nNat.prg_casesdef_body \nprg_casesdef_body \nNat.prg_casesdef_tm \nprg_casesdef_tm \nNat.prg_casesdef_weak_tm \nprg_casesdef_weak_tm \nNat.prg\u0027_casesdef_weak_tm \nprg\u0027_casesdef_weak_tm \nNat.prg_recdef_tm \nprg_recdef_tm \nNat.prg_defconj_tm \nprg_defconj_tm \nNat.exists_prg_defconj_tm \nexists_prg_defconj_tm \nNat.prg_fpdef_tm \nprg_fpdef_tm \nNat.lemma1 \nlemma1 \nNat.lemma2 \nlemma2 \nNat.lemma3 \nlemma3 \nNat.lemma4 \nlemma4 \nNat.nat_recursion_thm0 \nnat_recursion_thm0 \nNat.load \nload"},{"uri":"http://localhost:8901/reference/hol-nat.html#is_nat_rep_def","title":"Nat.is_nat_rep_def","content":"Nat.is_nat_rep_def \nis_nat_rep_def \n\n \u0022IsNatRep\u0022 is the characteristic function for the naturals base type,     \n prescribing the subset of \u0060:ind\u0060 used to represent naturals.  It is       \n defined as the function that returns \u0060true\u0060 for a given \u0060:ind\u0060 element iff\n any property that holds for \u0022IND_ZERO\u0022 and all its successors under       \n \u0022IND_SUC\u0022 necessarily holds for the element.  This gives the smallest     \n subset of \u0060:ind\u0060 containing \u0022IND_ZERO\u0022 and closed under \u0022IND_SUC\u0022.        \n\n |- !i. IsNatRep i \u003C=\u003E (!P. P IND_ZERO /\\ (!j. P j ==\u003E P (IND_SUC j)) ==\u003E P i)\n"},{"uri":"http://localhost:8901/reference/hol-nat.html#ind_zero_is_nat_rep_lemma","title":"Nat.ind_zero_is_nat_rep_lemma","content":"Nat.ind_zero_is_nat_rep_lemma \nind_zero_is_nat_rep_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#ind_suc_is_nat_rep_lemma","title":"Nat.ind_suc_is_nat_rep_lemma","content":"Nat.ind_suc_is_nat_rep_lemma \nind_suc_is_nat_rep_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_rep_exists_lemma","title":"Nat.nat_rep_exists_lemma","content":"Nat.nat_rep_exists_lemma \nnat_rep_exists_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_def","title":"Nat.nat_def","content":"Nat.nat_def \nnat_def \n\n typer for natural numbers\n\n |- ?(f:nat-\u003Eind). TYPE_DEFINITION IsNatRep f\n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_ty","title":"Nat.nat_ty","content":"Nat.nat_ty \nnat_ty \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_bij_def2","title":"Nat.nat_bij_def2","content":"Nat.nat_bij_def2 \nnat_bij_def2 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_bij_def1","title":"Nat.nat_bij_def1","content":"Nat.nat_bij_def1 \nnat_bij_def1 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#is_nat_rep_lemma","title":"Nat.is_nat_rep_lemma","content":"Nat.is_nat_rep_lemma \nis_nat_rep_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_rep_injective_lemma","title":"Nat.nat_rep_injective_lemma","content":"Nat.nat_rep_injective_lemma \nnat_rep_injective_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#zero_def","title":"Nat.zero_def","content":"Nat.zero_def \nzero_def \n\n |- ZERO = NatAbs IND_ZERO\n"},{"uri":"http://localhost:8901/reference/hol-nat.html#zero_tm0","title":"Nat.zero_tm0","content":"Nat.zero_tm0 \nzero_tm0 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#suc_def","title":"Nat.suc_def","content":"Nat.suc_def \nsuc_def \n\n |- !n. SUC n = NatAbs (IND_SUC (NatRep n))\n"},{"uri":"http://localhost:8901/reference/hol-nat.html#suc_fn","title":"Nat.suc_fn","content":"Nat.suc_fn \nsuc_fn \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#mk_suc","title":"Nat.mk_suc","content":"Nat.mk_suc \nmk_suc \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#dest_suc","title":"Nat.dest_suc","content":"Nat.dest_suc \ndest_suc \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#is_suc","title":"Nat.is_suc","content":"Nat.is_suc \nis_suc \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_rep_zero_lemma","title":"Nat.nat_rep_zero_lemma","content":"Nat.nat_rep_zero_lemma \nnat_rep_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_rep_suc_lemma","title":"Nat.nat_rep_suc_lemma","content":"Nat.nat_rep_suc_lemma \nnat_rep_suc_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#suc_not_zero_thm0","title":"Nat.suc_not_zero_thm0","content":"Nat.suc_not_zero_thm0 \nsuc_not_zero_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#suc_injective_thm","title":"Nat.suc_injective_thm","content":"Nat.suc_injective_thm \nsuc_injective_thm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_induction_thm0","title":"Nat.nat_induction_thm0","content":"Nat.nat_induction_thm0 \nnat_induction_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_cases_thm0","title":"Nat.nat_cases_thm0","content":"Nat.nat_cases_thm0 \nnat_cases_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#e","title":"Nat.e","content":"Nat.e \ne \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#f","title":"Nat.f","content":"Nat.f \nf \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#fn_","title":"Nat.fn_","content":"Nat.fn_ \nfn_ \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg","title":"Nat.prg","content":"Nat.prg \nprg \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg\u0027","title":"Nat.prg\u0027","content":"Nat.prg\u0027 \nprg\u0027 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#m","title":"Nat.m","content":"Nat.m \nm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#n","title":"Nat.n","content":"Nat.n \nn \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#n\u0027","title":"Nat.n\u0027","content":"Nat.n\u0027 \nn\u0027 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#x","title":"Nat.x","content":"Nat.x \nx \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#x\u0027","title":"Nat.x\u0027","content":"Nat.x\u0027 \nx\u0027 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#y","title":"Nat.y","content":"Nat.y \ny \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#y1","title":"Nat.y1","content":"Nat.y1 \ny1 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#y2","title":"Nat.y2","content":"Nat.y2 \ny2 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#f_x_n","title":"Nat.f_x_n","content":"Nat.f_x_n \nf_x_n \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#f_y_n","title":"Nat.f_y_n","content":"Nat.f_y_n \nf_y_n \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_n_x","title":"Nat.prg_n_x","content":"Nat.prg_n_x \nprg_n_x \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#fn_n","title":"Nat.fn_n","content":"Nat.fn_n \nfn_n \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_case1_tm","title":"Nat.prg_case1_tm","content":"Nat.prg_case1_tm \nprg_case1_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_case2_tm_body_tm","title":"Nat.prg_case2_tm_body_tm","content":"Nat.prg_case2_tm_body_tm \nprg_case2_tm_body_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_case2_tm_body1_tm","title":"Nat.prg_case2_tm_body1_tm","content":"Nat.prg_case2_tm_body1_tm \nprg_case2_tm_body1_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_case2_tm","title":"Nat.prg_case2_tm","content":"Nat.prg_case2_tm \nprg_case2_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_casesdef_body","title":"Nat.prg_casesdef_body","content":"Nat.prg_casesdef_body \nprg_casesdef_body \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_casesdef_tm","title":"Nat.prg_casesdef_tm","content":"Nat.prg_casesdef_tm \nprg_casesdef_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_casesdef_weak_tm","title":"Nat.prg_casesdef_weak_tm","content":"Nat.prg_casesdef_weak_tm \nprg_casesdef_weak_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg\u0027_casesdef_weak_tm","title":"Nat.prg\u0027_casesdef_weak_tm","content":"Nat.prg\u0027_casesdef_weak_tm \nprg\u0027_casesdef_weak_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_recdef_tm","title":"Nat.prg_recdef_tm","content":"Nat.prg_recdef_tm \nprg_recdef_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_defconj_tm","title":"Nat.prg_defconj_tm","content":"Nat.prg_defconj_tm \nprg_defconj_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#exists_prg_defconj_tm","title":"Nat.exists_prg_defconj_tm","content":"Nat.exists_prg_defconj_tm \nexists_prg_defconj_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#prg_fpdef_tm","title":"Nat.prg_fpdef_tm","content":"Nat.prg_fpdef_tm \nprg_fpdef_tm \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#lemma1","title":"Nat.lemma1","content":"Nat.lemma1 \nlemma1 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#lemma2","title":"Nat.lemma2","content":"Nat.lemma2 \nlemma2 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#lemma3","title":"Nat.lemma3","content":"Nat.lemma3 \nlemma3 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#lemma4","title":"Nat.lemma4","content":"Nat.lemma4 \nlemma4 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#nat_recursion_thm0","title":"Nat.nat_recursion_thm0","content":"Nat.nat_recursion_thm0 \nnat_recursion_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nat.html#load","title":"Nat.load","content":"Nat.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html","title":"NatArith","content":"NatArith \n\nThis module defines some classic natural number arithmetic operators,  \nusing recursive function definition and the \u0022SUC\u0022 and \u0022ZERO\u0022 constants,\nand proves various basic properties about each operator.               \n \nNatArith.l \nl \nNatArith.m \nm \nNatArith.n \nn \nNatArith.add_def \nadd_def \nNatArith.add_fn \nadd_fn \nNatArith.dest_add \ndest_add \nNatArith.mk_add \nmk_add \nNatArith.is_add \nis_add \nNatArith.add_left_id_lemma \nadd_left_id_lemma \nNatArith.add_dist_left_suc_thm \nadd_dist_left_suc_thm \nNatArith.add_dist_right_suc_thm \nadd_dist_right_suc_thm \nNatArith.add_id_thm \nadd_id_thm \nNatArith.add_comm_thm \nadd_comm_thm \nNatArith.add_assoc_thm \nadd_assoc_thm \nNatArith.suc_add_thm \nsuc_add_thm \nNatArith.z \nz \nNatArith.y \ny \nNatArith.x \nx \nNatArith.w \nw \nNatArith.add_switch_lemma \nadd_switch_lemma \nNatArith.pre_def \npre_def \nNatArith.pre_fn \npre_fn \nNatArith.dest_pre \ndest_pre \nNatArith.mk_pre \nmk_pre \nNatArith.is_pre \nis_pre \nNatArith.pre_suc_thm \npre_suc_thm \nNatArith.pre_zero_thm \npre_zero_thm \nNatArith.sub_def \nsub_def \nNatArith.sub_fn \nsub_fn \nNatArith.dest_sub \ndest_sub \nNatArith.mk_sub \nmk_sub \nNatArith.is_sub \nis_sub \nNatArith.sub_right_id_thm \nsub_right_id_thm \nNatArith.sub_dist_right_suc_thm \nsub_dist_right_suc_thm \nNatArith.suc_sub_suc_thm \nsuc_sub_suc_thm \nNatArith.sub_cancel_thm \nsub_cancel_thm \nNatArith.add_sub_cancel_thm \nadd_sub_cancel_thm \nNatArith.mult_def \nmult_def \nNatArith.mult_fn \nmult_fn \nNatArith.dest_mult \ndest_mult \nNatArith.mk_mult \nmk_mult \nNatArith.is_mult \nis_mult \nNatArith.mult_left_zero_lemma \nmult_left_zero_lemma \nNatArith.mult_dist_left_suc_thm \nmult_dist_left_suc_thm \nNatArith.mult_zero_thm \nmult_zero_thm \nNatArith.mult_dist_right_suc_thm \nmult_dist_right_suc_thm \nNatArith.mult_comm_thm \nmult_comm_thm \nNatArith.mult_dist_left_add_thm \nmult_dist_left_add_thm \nNatArith.mult_dist_right_add_thm \nmult_dist_right_add_thm \nNatArith.mult_assoc_thm \nmult_assoc_thm \nNatArith.mult_left_flip_lemma \nmult_left_flip_lemma \nNatArith.mult_id_thm \nmult_id_thm \nNatArith.mult_left_id_lemma \nmult_left_id_lemma \nNatArith.twice_thm \ntwice_thm \nNatArith.exp_def \nexp_def \nNatArith.exp_fn \nexp_fn \nNatArith.dest_exp \ndest_exp \nNatArith.mk_exp \nmk_exp \nNatArith.is_exp \nis_exp \nNatArith.exp_right_zero_thm \nexp_right_zero_thm \nNatArith.exp_dist_right_suc_thm \nexp_dist_right_suc_thm \nNatArith.exp_right_id_thm \nexp_right_id_thm \nNatArith.exp_dist_right_add_thm \nexp_dist_right_add_thm \nNatArith.even_def \neven_def \nNatArith.even_fn \neven_fn \nNatArith.odd_def \nodd_def \nNatArith.odd_fn \nodd_fn \nNatArith.dest_even \ndest_even \nNatArith.mk_even \nmk_even \nNatArith.is_even \nis_even \nNatArith.dest_odd \ndest_odd \nNatArith.mk_odd \nmk_odd \nNatArith.is_odd \nis_odd \nNatArith.zero_even_thm \nzero_even_thm \nNatArith.even_suc_thm \neven_suc_thm \nNatArith.odd_suc_thm \nodd_suc_thm \nNatArith.zero_not_odd_thm \nzero_not_odd_thm \nNatArith.one_odd_thm \none_odd_thm \nNatArith.twice_suc_lemma \ntwice_suc_lemma \nNatArith.twice_even_thm \ntwice_even_thm \nNatArith.suc_twice_odd_thm \nsuc_twice_odd_thm \nNatArith.load \nload"},{"uri":"http://localhost:8901/reference/hol-natarith.html#l","title":"NatArith.l","content":"NatArith.l \nl \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#m","title":"NatArith.m","content":"NatArith.m \nm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#n","title":"NatArith.n","content":"NatArith.n \nn \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_def","title":"NatArith.add_def","content":"NatArith.add_def \nadd_def \n\n |- (!n. 0 \u002B n = n) /\\ (!m n. SUC m \u002B n = SUC (m \u002B n))\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_fn","title":"NatArith.add_fn","content":"NatArith.add_fn \nadd_fn \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#dest_add","title":"NatArith.dest_add","content":"NatArith.dest_add \ndest_add \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mk_add","title":"NatArith.mk_add","content":"NatArith.mk_add \nmk_add \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#is_add","title":"NatArith.is_add","content":"NatArith.is_add \nis_add \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_left_id_lemma","title":"NatArith.add_left_id_lemma","content":"NatArith.add_left_id_lemma \nadd_left_id_lemma \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_dist_left_suc_thm","title":"NatArith.add_dist_left_suc_thm","content":"NatArith.add_dist_left_suc_thm \nadd_dist_left_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_dist_right_suc_thm","title":"NatArith.add_dist_right_suc_thm","content":"NatArith.add_dist_right_suc_thm \nadd_dist_right_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_id_thm","title":"NatArith.add_id_thm","content":"NatArith.add_id_thm \nadd_id_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_comm_thm","title":"NatArith.add_comm_thm","content":"NatArith.add_comm_thm \nadd_comm_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_assoc_thm","title":"NatArith.add_assoc_thm","content":"NatArith.add_assoc_thm \nadd_assoc_thm \n\n |- !l m n. l \u002B (m \u002B n) = (l \u002B m) \u002B n\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#suc_add_thm","title":"NatArith.suc_add_thm","content":"NatArith.suc_add_thm \nsuc_add_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#z","title":"NatArith.z","content":"NatArith.z \nz \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#y","title":"NatArith.y","content":"NatArith.y \ny \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#x","title":"NatArith.x","content":"NatArith.x \nx \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#w","title":"NatArith.w","content":"NatArith.w \nw \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_switch_lemma","title":"NatArith.add_switch_lemma","content":"NatArith.add_switch_lemma \nadd_switch_lemma \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#pre_def","title":"NatArith.pre_def","content":"NatArith.pre_def \npre_def \n\n |- PRE 0 = 0 /\\ (!n. PRE (SUC n) = n)\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#pre_fn","title":"NatArith.pre_fn","content":"NatArith.pre_fn \npre_fn \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#dest_pre","title":"NatArith.dest_pre","content":"NatArith.dest_pre \ndest_pre \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mk_pre","title":"NatArith.mk_pre","content":"NatArith.mk_pre \nmk_pre \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#is_pre","title":"NatArith.is_pre","content":"NatArith.is_pre \nis_pre \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#pre_suc_thm","title":"NatArith.pre_suc_thm","content":"NatArith.pre_suc_thm \npre_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#pre_zero_thm","title":"NatArith.pre_zero_thm","content":"NatArith.pre_zero_thm \npre_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#sub_def","title":"NatArith.sub_def","content":"NatArith.sub_def \nsub_def \n\n |- (!n. n - 0 = n) /\\ (!m n. m - SUC n = PRE (m - n))\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#sub_fn","title":"NatArith.sub_fn","content":"NatArith.sub_fn \nsub_fn \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#dest_sub","title":"NatArith.dest_sub","content":"NatArith.dest_sub \ndest_sub \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mk_sub","title":"NatArith.mk_sub","content":"NatArith.mk_sub \nmk_sub \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#is_sub","title":"NatArith.is_sub","content":"NatArith.is_sub \nis_sub \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#sub_right_id_thm","title":"NatArith.sub_right_id_thm","content":"NatArith.sub_right_id_thm \nsub_right_id_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#sub_dist_right_suc_thm","title":"NatArith.sub_dist_right_suc_thm","content":"NatArith.sub_dist_right_suc_thm \nsub_dist_right_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#suc_sub_suc_thm","title":"NatArith.suc_sub_suc_thm","content":"NatArith.suc_sub_suc_thm \nsuc_sub_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#sub_cancel_thm","title":"NatArith.sub_cancel_thm","content":"NatArith.sub_cancel_thm \nsub_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#add_sub_cancel_thm","title":"NatArith.add_sub_cancel_thm","content":"NatArith.add_sub_cancel_thm \nadd_sub_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_def","title":"NatArith.mult_def","content":"NatArith.mult_def \nmult_def \n\n |- (!n. 0 * n = 0) /\\ (!m n. SUC m * n = n \u002B m * n)\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_fn","title":"NatArith.mult_fn","content":"NatArith.mult_fn \nmult_fn \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#dest_mult","title":"NatArith.dest_mult","content":"NatArith.dest_mult \ndest_mult \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mk_mult","title":"NatArith.mk_mult","content":"NatArith.mk_mult \nmk_mult \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#is_mult","title":"NatArith.is_mult","content":"NatArith.is_mult \nis_mult \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_left_zero_lemma","title":"NatArith.mult_left_zero_lemma","content":"NatArith.mult_left_zero_lemma \nmult_left_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_dist_left_suc_thm","title":"NatArith.mult_dist_left_suc_thm","content":"NatArith.mult_dist_left_suc_thm \nmult_dist_left_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_zero_thm","title":"NatArith.mult_zero_thm","content":"NatArith.mult_zero_thm \nmult_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_dist_right_suc_thm","title":"NatArith.mult_dist_right_suc_thm","content":"NatArith.mult_dist_right_suc_thm \nmult_dist_right_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_comm_thm","title":"NatArith.mult_comm_thm","content":"NatArith.mult_comm_thm \nmult_comm_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_dist_left_add_thm","title":"NatArith.mult_dist_left_add_thm","content":"NatArith.mult_dist_left_add_thm \nmult_dist_left_add_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_dist_right_add_thm","title":"NatArith.mult_dist_right_add_thm","content":"NatArith.mult_dist_right_add_thm \nmult_dist_right_add_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_assoc_thm","title":"NatArith.mult_assoc_thm","content":"NatArith.mult_assoc_thm \nmult_assoc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_left_flip_lemma","title":"NatArith.mult_left_flip_lemma","content":"NatArith.mult_left_flip_lemma \nmult_left_flip_lemma \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_id_thm","title":"NatArith.mult_id_thm","content":"NatArith.mult_id_thm \nmult_id_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mult_left_id_lemma","title":"NatArith.mult_left_id_lemma","content":"NatArith.mult_left_id_lemma \nmult_left_id_lemma \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#twice_thm","title":"NatArith.twice_thm","content":"NatArith.twice_thm \ntwice_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#exp_def","title":"NatArith.exp_def","content":"NatArith.exp_def \nexp_def \n\n |- (!n. n EXP 0 = 1) /\\ (!m n. m EXP SUC n = m * m EXP n)\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#exp_fn","title":"NatArith.exp_fn","content":"NatArith.exp_fn \nexp_fn \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#dest_exp","title":"NatArith.dest_exp","content":"NatArith.dest_exp \ndest_exp \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mk_exp","title":"NatArith.mk_exp","content":"NatArith.mk_exp \nmk_exp \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#is_exp","title":"NatArith.is_exp","content":"NatArith.is_exp \nis_exp \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#exp_right_zero_thm","title":"NatArith.exp_right_zero_thm","content":"NatArith.exp_right_zero_thm \nexp_right_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#exp_dist_right_suc_thm","title":"NatArith.exp_dist_right_suc_thm","content":"NatArith.exp_dist_right_suc_thm \nexp_dist_right_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#exp_right_id_thm","title":"NatArith.exp_right_id_thm","content":"NatArith.exp_right_id_thm \nexp_right_id_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#exp_dist_right_add_thm","title":"NatArith.exp_dist_right_add_thm","content":"NatArith.exp_dist_right_add_thm \nexp_dist_right_add_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#even_def","title":"NatArith.even_def","content":"NatArith.even_def \neven_def \n\n |- (EVEN 0 \u003C=\u003E true) /\\ (!n. EVEN (SUC n) \u003C=\u003E ~ EVEN n)\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#even_fn","title":"NatArith.even_fn","content":"NatArith.even_fn \neven_fn \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#odd_def","title":"NatArith.odd_def","content":"NatArith.odd_def \nodd_def \n\n |- !n. ODD n \u003C=\u003E ~ EVEN n\n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#odd_fn","title":"NatArith.odd_fn","content":"NatArith.odd_fn \nodd_fn \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#dest_even","title":"NatArith.dest_even","content":"NatArith.dest_even \ndest_even \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mk_even","title":"NatArith.mk_even","content":"NatArith.mk_even \nmk_even \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#is_even","title":"NatArith.is_even","content":"NatArith.is_even \nis_even \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#dest_odd","title":"NatArith.dest_odd","content":"NatArith.dest_odd \ndest_odd \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#mk_odd","title":"NatArith.mk_odd","content":"NatArith.mk_odd \nmk_odd \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#is_odd","title":"NatArith.is_odd","content":"NatArith.is_odd \nis_odd \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#zero_even_thm","title":"NatArith.zero_even_thm","content":"NatArith.zero_even_thm \nzero_even_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#even_suc_thm","title":"NatArith.even_suc_thm","content":"NatArith.even_suc_thm \neven_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#odd_suc_thm","title":"NatArith.odd_suc_thm","content":"NatArith.odd_suc_thm \nodd_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#zero_not_odd_thm","title":"NatArith.zero_not_odd_thm","content":"NatArith.zero_not_odd_thm \nzero_not_odd_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#one_odd_thm","title":"NatArith.one_odd_thm","content":"NatArith.one_odd_thm \none_odd_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#twice_suc_lemma","title":"NatArith.twice_suc_lemma","content":"NatArith.twice_suc_lemma \ntwice_suc_lemma \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#twice_even_thm","title":"NatArith.twice_even_thm","content":"NatArith.twice_even_thm \ntwice_even_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#suc_twice_odd_thm","title":"NatArith.suc_twice_odd_thm","content":"NatArith.suc_twice_odd_thm \nsuc_twice_odd_thm \n"},{"uri":"http://localhost:8901/reference/hol-natarith.html#load","title":"NatArith.load","content":"NatArith.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html","title":"NatEval","content":"NatEval \n\nThis module defines conversions for evaluating arithmetic operations on \nnatual number numerals.  Because large proofs may involve heavy numeric \ncomputation, special consideration is given to the efficieny of these   \nfunctions.                                                              \n \nNatEval.destructed_bit \ndestructed_bit \nNatEval.l \nl \nNatEval.m \nm \nNatEval.n \nn \nNatEval.z \nz \nNatEval.dest_bit \ndest_bit \nNatEval.dest_bit1 \ndest_bit1 \nNatEval.bit0_adddef_thm \nbit0_adddef_thm \nNatEval.bit1_adddef_thm \nbit1_adddef_thm \nNatEval.bit0_multdef_thm \nbit0_multdef_thm \nNatEval.bit1_multdef_thm \nbit1_multdef_thm \nNatEval.bit1_multadddef_thm \nbit1_multadddef_thm \nNatEval.suc_bit0_lemma \nsuc_bit0_lemma \nNatEval.suc_bit1_lemma \nsuc_bit1_lemma \nNatEval.eval_suc_conv0 \neval_suc_conv0 \nNatEval.eval_suc_conv \neval_suc_conv \nNatEval.pre_suc_lemma \npre_suc_lemma \nNatEval.pre_zero_thm0 \npre_zero_thm0 \nNatEval.eval_pre_conv0 \neval_pre_conv0 \nNatEval.eval_pre_conv \neval_pre_conv \nNatEval.mmnn_add_lemma \nmmnn_add_lemma \nNatEval.add_id_thm0 \nadd_id_thm0 \nNatEval.zero_add_lemma \nzero_add_lemma \nNatEval.add_zero_lemma \nadd_zero_lemma \nNatEval.bit0_add_bit0_lemma \nbit0_add_bit0_lemma \nNatEval.bit0_add_bit1_lemma \nbit0_add_bit1_lemma \nNatEval.bit1_add_bit0_lemma \nbit1_add_bit0_lemma \nNatEval.bit1_add_bit1_lemma \nbit1_add_bit1_lemma \nNatEval.eval_add_conv0 \neval_add_conv0 \nNatEval.eval_add_conv \neval_add_conv \nNatEval.one_tm0 \none_tm0 \nNatEval.mult_zero_thm0 \nmult_zero_thm0 \nNatEval.mult_id_thm0 \nmult_id_thm0 \nNatEval.zero_mult_lemma \nzero_mult_lemma \nNatEval.mult_zero_lemma \nmult_zero_lemma \nNatEval.one_mult_lemma \none_mult_lemma \nNatEval.mult_one_lemma \nmult_one_lemma \nNatEval.bit0_mult_lemma \nbit0_mult_lemma \nNatEval.mult_bit0_lemma \nmult_bit0_lemma \nNatEval.bit1_mult_bit1_lemma \nbit1_mult_bit1_lemma \nNatEval.bit1_squared_lemma \nbit1_squared_lemma \nNatEval.eval_mult_conv0 \neval_mult_conv0 \nNatEval.eval_mult_conv \neval_mult_conv \nNatEval.exp_bit0_lemma \nexp_bit0_lemma \nNatEval.exp_bit1_lemma \nexp_bit1_lemma \nNatEval.exp_zero_lemma \nexp_zero_lemma \nNatEval.exp_one_lemma \nexp_one_lemma \nNatEval.eval_exp_conv0 \neval_exp_conv0 \nNatEval.eval_exp_conv \neval_exp_conv \nNatEval.bit0_even_lemma \nbit0_even_lemma \nNatEval.bit1_not_even_lemma \nbit1_not_even_lemma \nNatEval.zero_even_lemma \nzero_even_lemma \nNatEval.eval_even_conv0 \neval_even_conv0 \nNatEval.eval_even_conv \neval_even_conv \nNatEval.bit0_not_odd_lemma \nbit0_not_odd_lemma \nNatEval.bit1_odd_lemma \nbit1_odd_lemma \nNatEval.zero_not_odd_lemma \nzero_not_odd_lemma \nNatEval.eval_odd_conv0 \neval_odd_conv0 \nNatEval.eval_odd_conv \neval_odd_conv \nNatEval.bit0_eq_zero_lemma \nbit0_eq_zero_lemma \nNatEval.zero_eq_bit0_lemma \nzero_eq_bit0_lemma \nNatEval.bit1_eq_zero_lemma \nbit1_eq_zero_lemma \nNatEval.zero_eq_bit1_lemma \nzero_eq_bit1_lemma \nNatEval.bit0_eq_bit0_lemma \nbit0_eq_bit0_lemma \nNatEval.bit0_eq_bit1_lemma \nbit0_eq_bit1_lemma \nNatEval.bit1_eq_bit0_lemma \nbit1_eq_bit0_lemma \nNatEval.bit1_eq_bit1_lemma \nbit1_eq_bit1_lemma \nNatEval.eq_refl_lemma \neq_refl_lemma \nNatEval.eval_nat_eq_conv0 \neval_nat_eq_conv0 \nNatEval.eval_nat_eq_conv \neval_nat_eq_conv \nNatEval.zero_le_lemma \nzero_le_lemma \nNatEval.le_zero_lemma \nle_zero_lemma \nNatEval.bit0_le_bit0_lemma \nbit0_le_bit0_lemma \nNatEval.bit1_le_bit1_lemma \nbit1_le_bit1_lemma \nNatEval.bit1_le_bit0_lemma \nbit1_le_bit0_lemma \nNatEval.bit0_le_bit1_lemma \nbit0_le_bit1_lemma \nNatEval.le_refl_lemma \nle_refl_lemma \nNatEval.zero_lt_lemma \nzero_lt_lemma \nNatEval.lt_zero_lemma \nlt_zero_lemma \nNatEval.bit0_lt_bit0_lemma \nbit0_lt_bit0_lemma \nNatEval.bit1_lt_bit0_lemma \nbit1_lt_bit0_lemma \nNatEval.bit0_lt_bit1_lemma \nbit0_lt_bit1_lemma \nNatEval.bit1_lt_bit1_lemma \nbit1_lt_bit1_lemma \nNatEval.lt_irrefl_lemma \nlt_irrefl_lemma \nNatEval.eval_le_conv0 \neval_le_conv0 \nNatEval.eval_lt_conv0 \neval_lt_conv0 \nNatEval.eval_le_conv \neval_le_conv \nNatEval.eval_lt_conv \neval_lt_conv \nNatEval.gt_lt_lemma \ngt_lt_lemma \nNatEval.ge_le_lemma \nge_le_lemma \nNatEval.eval_gt_conv \neval_gt_conv \nNatEval.eval_ge_conv \neval_ge_conv \nNatEval.sub_zero_lemma \nsub_zero_lemma \nNatEval.sub_cancel_lemma \nsub_cancel_lemma \nNatEval.add_sub_lemma \nadd_sub_lemma \nNatEval.sub_floor_thm0 \nsub_floor_thm0 \nNatEval.eval_sub_conv0 \neval_sub_conv0 \nNatEval.eval_sub_conv \neval_sub_conv \nNatEval.load \nload"},{"uri":"http://localhost:8901/reference/hol-nateval.html#l","title":"NatEval.l","content":"NatEval.l \nl \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#m","title":"NatEval.m","content":"NatEval.m \nm \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#n","title":"NatEval.n","content":"NatEval.n \nn \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#z","title":"NatEval.z","content":"NatEval.z \nz \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#dest_bit","title":"NatEval.dest_bit","content":"NatEval.dest_bit \ndest_bit \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#dest_bit1","title":"NatEval.dest_bit1","content":"NatEval.dest_bit1 \ndest_bit1 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_adddef_thm","title":"NatEval.bit0_adddef_thm","content":"NatEval.bit0_adddef_thm \nbit0_adddef_thm \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_adddef_thm","title":"NatEval.bit1_adddef_thm","content":"NatEval.bit1_adddef_thm \nbit1_adddef_thm \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_multdef_thm","title":"NatEval.bit0_multdef_thm","content":"NatEval.bit0_multdef_thm \nbit0_multdef_thm \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_multdef_thm","title":"NatEval.bit1_multdef_thm","content":"NatEval.bit1_multdef_thm \nbit1_multdef_thm \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_multadddef_thm","title":"NatEval.bit1_multadddef_thm","content":"NatEval.bit1_multadddef_thm \nbit1_multadddef_thm \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#suc_bit0_lemma","title":"NatEval.suc_bit0_lemma","content":"NatEval.suc_bit0_lemma \nsuc_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#suc_bit1_lemma","title":"NatEval.suc_bit1_lemma","content":"NatEval.suc_bit1_lemma \nsuc_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_suc_conv0","title":"NatEval.eval_suc_conv0","content":"NatEval.eval_suc_conv0 \neval_suc_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_suc_conv","title":"NatEval.eval_suc_conv","content":"NatEval.eval_suc_conv \neval_suc_conv \n\n This is the evaluation conversion for numeral successor.  It takes a term\n of the form \u0060SUC n\u0060, where \u0022n\u0022 is a natural number numeral, and returns a\n theorem stating that this equals its numeral value, under no assumptions.\n                                                                          \n       \u0060SUC n\u0060                                                            \n    ------------                                                          \n    |- SUC n = z                                                          \n\n See also: eval_pre_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#pre_suc_lemma","title":"NatEval.pre_suc_lemma","content":"NatEval.pre_suc_lemma \npre_suc_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#pre_zero_thm0","title":"NatEval.pre_zero_thm0","content":"NatEval.pre_zero_thm0 \npre_zero_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_pre_conv0","title":"NatEval.eval_pre_conv0","content":"NatEval.eval_pre_conv0 \neval_pre_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_pre_conv","title":"NatEval.eval_pre_conv","content":"NatEval.eval_pre_conv \neval_pre_conv \n\n eval_pre_conv : term -\u003E thm                                           \n                                                                       \n This is the evaluation conversion for numeral predecessor.  It takes a\n term of the form \u0060PRE n\u0060, where \u0022n\u0022 is a natural number numeral, and  \n returns a theorem stating that this equals its numeral value, under no\n assumptions.                                                          \n                                                                       \n       \u0060PRE n\u0060                                                         \n    ------------                                                       \n    |- PRE n = z                                                       \n\n See also: eval_suc_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#mmnn_add_lemma","title":"NatEval.mmnn_add_lemma","content":"NatEval.mmnn_add_lemma \nmmnn_add_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#add_id_thm0","title":"NatEval.add_id_thm0","content":"NatEval.add_id_thm0 \nadd_id_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#zero_add_lemma","title":"NatEval.zero_add_lemma","content":"NatEval.zero_add_lemma \nzero_add_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#add_zero_lemma","title":"NatEval.add_zero_lemma","content":"NatEval.add_zero_lemma \nadd_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_add_bit0_lemma","title":"NatEval.bit0_add_bit0_lemma","content":"NatEval.bit0_add_bit0_lemma \nbit0_add_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_add_bit1_lemma","title":"NatEval.bit0_add_bit1_lemma","content":"NatEval.bit0_add_bit1_lemma \nbit0_add_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_add_bit0_lemma","title":"NatEval.bit1_add_bit0_lemma","content":"NatEval.bit1_add_bit0_lemma \nbit1_add_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_add_bit1_lemma","title":"NatEval.bit1_add_bit1_lemma","content":"NatEval.bit1_add_bit1_lemma \nbit1_add_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_add_conv0","title":"NatEval.eval_add_conv0","content":"NatEval.eval_add_conv0 \neval_add_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_add_conv","title":"NatEval.eval_add_conv","content":"NatEval.eval_add_conv \neval_add_conv \n\n This is the evaluation conversion for numeral addition.  It takes a term  \n of the form \u0060m \u002B n\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number numerals,  \n and returns a theorem stating that this equals its numeral value, under no\n assumptions.                                                              \n                                                                           \n       \u0060m \u002B n\u0060                                                             \n    ------------                                                           \n    |- m \u002B n = z                                                \n\n See also: eval_sub_conv, eval_mult_conv, eval_exp_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#one_tm0","title":"NatEval.one_tm0","content":"NatEval.one_tm0 \none_tm0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#mult_zero_thm0","title":"NatEval.mult_zero_thm0","content":"NatEval.mult_zero_thm0 \nmult_zero_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#mult_id_thm0","title":"NatEval.mult_id_thm0","content":"NatEval.mult_id_thm0 \nmult_id_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#zero_mult_lemma","title":"NatEval.zero_mult_lemma","content":"NatEval.zero_mult_lemma \nzero_mult_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#mult_zero_lemma","title":"NatEval.mult_zero_lemma","content":"NatEval.mult_zero_lemma \nmult_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#one_mult_lemma","title":"NatEval.one_mult_lemma","content":"NatEval.one_mult_lemma \none_mult_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#mult_one_lemma","title":"NatEval.mult_one_lemma","content":"NatEval.mult_one_lemma \nmult_one_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_mult_lemma","title":"NatEval.bit0_mult_lemma","content":"NatEval.bit0_mult_lemma \nbit0_mult_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#mult_bit0_lemma","title":"NatEval.mult_bit0_lemma","content":"NatEval.mult_bit0_lemma \nmult_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_mult_bit1_lemma","title":"NatEval.bit1_mult_bit1_lemma","content":"NatEval.bit1_mult_bit1_lemma \nbit1_mult_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_squared_lemma","title":"NatEval.bit1_squared_lemma","content":"NatEval.bit1_squared_lemma \nbit1_squared_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_mult_conv0","title":"NatEval.eval_mult_conv0","content":"NatEval.eval_mult_conv0 \neval_mult_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_mult_conv","title":"NatEval.eval_mult_conv","content":"NatEval.eval_mult_conv \neval_mult_conv \n\n eval_mult_conv : term -\u003E thm                                             \n                                                                          \n This is the evaluation conversion for numeral multiplication.  It takes a\n term of the form \u0060m * m\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number      \n numerals, and returns a theorem stating that this equals its numeral     \n value, under no assumptions.                                             \n                                                                          \n       \u0060m * n\u0060                                                            \n    ------------                                                          \n    |- m * n = z                                                          \n\n See also: eval_add_conv, eval_sub_conv, eval_exp_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#exp_bit0_lemma","title":"NatEval.exp_bit0_lemma","content":"NatEval.exp_bit0_lemma \nexp_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#exp_bit1_lemma","title":"NatEval.exp_bit1_lemma","content":"NatEval.exp_bit1_lemma \nexp_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#exp_zero_lemma","title":"NatEval.exp_zero_lemma","content":"NatEval.exp_zero_lemma \nexp_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#exp_one_lemma","title":"NatEval.exp_one_lemma","content":"NatEval.exp_one_lemma \nexp_one_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_exp_conv0","title":"NatEval.eval_exp_conv0","content":"NatEval.eval_exp_conv0 \neval_exp_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_exp_conv","title":"NatEval.eval_exp_conv","content":"NatEval.eval_exp_conv \neval_exp_conv \n\n This is the evaluation conversion for numeral exponentiation.  It takes a\n term of the form \u0060m EXP n\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number    \n numerals, and returns a theorem stating that this equals its numeral     \n value, under no assumptions.                                             \n                                                                          \n       \u0060m EXP n\u0060                                                          \n    --------------                                                        \n    |- m EXP n = z                                                        \n\n See also: eval_add_conv, eval_sub_conv, eval_mult_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_even_lemma","title":"NatEval.bit0_even_lemma","content":"NatEval.bit0_even_lemma \nbit0_even_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_not_even_lemma","title":"NatEval.bit1_not_even_lemma","content":"NatEval.bit1_not_even_lemma \nbit1_not_even_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#zero_even_lemma","title":"NatEval.zero_even_lemma","content":"NatEval.zero_even_lemma \nzero_even_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_even_conv0","title":"NatEval.eval_even_conv0","content":"NatEval.eval_even_conv0 \neval_even_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_even_conv","title":"NatEval.eval_even_conv","content":"NatEval.eval_even_conv \neval_even_conv \n\n This is the evaluation conversion for numeral evenness.  It takes a term\n of the form \u0060EVEN n\u0060, where \u0022n\u0022 is a natural number numeral, and returns\n a theorem stating its boolean value, under no assumptions.              \n                                                                         \n        \u0060EVEN n\u0060                                                         \n    ---------------                                                      \n    |- EVEN n \u003C=\u003E z                                                      \n\n See also: eval_odd_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_not_odd_lemma","title":"NatEval.bit0_not_odd_lemma","content":"NatEval.bit0_not_odd_lemma \nbit0_not_odd_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_odd_lemma","title":"NatEval.bit1_odd_lemma","content":"NatEval.bit1_odd_lemma \nbit1_odd_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#zero_not_odd_lemma","title":"NatEval.zero_not_odd_lemma","content":"NatEval.zero_not_odd_lemma \nzero_not_odd_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_odd_conv0","title":"NatEval.eval_odd_conv0","content":"NatEval.eval_odd_conv0 \neval_odd_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_odd_conv","title":"NatEval.eval_odd_conv","content":"NatEval.eval_odd_conv \neval_odd_conv \n\n This is the evaluation conversion for numeral oddness.  It takes a term of\n the form \u0060ODD n\u0060, where \u0022n\u0022 is a natural number numeral, and returns a    \n theorem stating its boolean value, under no assumptions.                  \n                                                                           \n        \u0060ODD n\u0060                                                            \n    --------------                                                         \n    |- ODD n \u003C=\u003E z       \n\n See also: eval_even_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_eq_zero_lemma","title":"NatEval.bit0_eq_zero_lemma","content":"NatEval.bit0_eq_zero_lemma \nbit0_eq_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#zero_eq_bit0_lemma","title":"NatEval.zero_eq_bit0_lemma","content":"NatEval.zero_eq_bit0_lemma \nzero_eq_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_eq_zero_lemma","title":"NatEval.bit1_eq_zero_lemma","content":"NatEval.bit1_eq_zero_lemma \nbit1_eq_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#zero_eq_bit1_lemma","title":"NatEval.zero_eq_bit1_lemma","content":"NatEval.zero_eq_bit1_lemma \nzero_eq_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_eq_bit0_lemma","title":"NatEval.bit0_eq_bit0_lemma","content":"NatEval.bit0_eq_bit0_lemma \nbit0_eq_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_eq_bit1_lemma","title":"NatEval.bit0_eq_bit1_lemma","content":"NatEval.bit0_eq_bit1_lemma \nbit0_eq_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_eq_bit0_lemma","title":"NatEval.bit1_eq_bit0_lemma","content":"NatEval.bit1_eq_bit0_lemma \nbit1_eq_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_eq_bit1_lemma","title":"NatEval.bit1_eq_bit1_lemma","content":"NatEval.bit1_eq_bit1_lemma \nbit1_eq_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eq_refl_lemma","title":"NatEval.eq_refl_lemma","content":"NatEval.eq_refl_lemma \neq_refl_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_nat_eq_conv0","title":"NatEval.eval_nat_eq_conv0","content":"NatEval.eval_nat_eq_conv0 \neval_nat_eq_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_nat_eq_conv","title":"NatEval.eval_nat_eq_conv","content":"NatEval.eval_nat_eq_conv \neval_nat_eq_conv \n\n This is the evaluation conversion for numeric equality.  It takes a term  \n of the form \u0060m = n\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number numerals,  \n and returns a theorem stating that this equals its boolean value, under no\n assumptions.                                                              \n                                                                           \n        \u0060m = n\u0060                                                            \n    --------------                                                         \n    |- m = n \u003C=\u003E z                                    \n\n See also: eval_le_conv, eval_lt_conv, eval_ge_conv, eval_gt_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#zero_le_lemma","title":"NatEval.zero_le_lemma","content":"NatEval.zero_le_lemma \nzero_le_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#le_zero_lemma","title":"NatEval.le_zero_lemma","content":"NatEval.le_zero_lemma \nle_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_le_bit0_lemma","title":"NatEval.bit0_le_bit0_lemma","content":"NatEval.bit0_le_bit0_lemma \nbit0_le_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_le_bit1_lemma","title":"NatEval.bit1_le_bit1_lemma","content":"NatEval.bit1_le_bit1_lemma \nbit1_le_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_le_bit0_lemma","title":"NatEval.bit1_le_bit0_lemma","content":"NatEval.bit1_le_bit0_lemma \nbit1_le_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_le_bit1_lemma","title":"NatEval.bit0_le_bit1_lemma","content":"NatEval.bit0_le_bit1_lemma \nbit0_le_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#le_refl_lemma","title":"NatEval.le_refl_lemma","content":"NatEval.le_refl_lemma \nle_refl_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#zero_lt_lemma","title":"NatEval.zero_lt_lemma","content":"NatEval.zero_lt_lemma \nzero_lt_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#lt_zero_lemma","title":"NatEval.lt_zero_lemma","content":"NatEval.lt_zero_lemma \nlt_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_lt_bit0_lemma","title":"NatEval.bit0_lt_bit0_lemma","content":"NatEval.bit0_lt_bit0_lemma \nbit0_lt_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_lt_bit0_lemma","title":"NatEval.bit1_lt_bit0_lemma","content":"NatEval.bit1_lt_bit0_lemma \nbit1_lt_bit0_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit0_lt_bit1_lemma","title":"NatEval.bit0_lt_bit1_lemma","content":"NatEval.bit0_lt_bit1_lemma \nbit0_lt_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#bit1_lt_bit1_lemma","title":"NatEval.bit1_lt_bit1_lemma","content":"NatEval.bit1_lt_bit1_lemma \nbit1_lt_bit1_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#lt_irrefl_lemma","title":"NatEval.lt_irrefl_lemma","content":"NatEval.lt_irrefl_lemma \nlt_irrefl_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_le_conv0","title":"NatEval.eval_le_conv0","content":"NatEval.eval_le_conv0 \neval_le_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_lt_conv0","title":"NatEval.eval_lt_conv0","content":"NatEval.eval_lt_conv0 \neval_lt_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_le_conv","title":"NatEval.eval_le_conv","content":"NatEval.eval_le_conv \neval_le_conv \n\n This is the evaluation conversion for numeral less-than-or-equal comparison.  It\n takes a term of the form \u0060m \u003C= n\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number\n numerals, and returns a theorem stating that this input equals its boolean\n value, under no assumptions.                                                        \n                                                                           \n        \u0060m \u003C= n\u0060                               \n    --------------                            \n    |- m \u003C= n \u003C=\u003E z            \n\n See also: eval_lt_conv, eval_ge_conv, eval_gt_conv, eval_nat_eq_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_lt_conv","title":"NatEval.eval_lt_conv","content":"NatEval.eval_lt_conv \neval_lt_conv \n\n This is the evaluation conversion for numeral less-than-or-equal comparison.  It\n takes a term of the form \u0060m \u003C n\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number\n numerals, and returns a theorem stating that this input equals its boolean\n value, under no assumptions.                                                        \n                                                                           \n        \u0060m \u003C n\u0060                               \n    --------------                            \n    |- m \u003C n \u003C=\u003E z            \n\n See also: eval_le_conv, eval_ge_conv, eval_gt_conv, eval_nat_eq_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#gt_lt_lemma","title":"NatEval.gt_lt_lemma","content":"NatEval.gt_lt_lemma \ngt_lt_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#ge_le_lemma","title":"NatEval.ge_le_lemma","content":"NatEval.ge_le_lemma \nge_le_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_gt_conv","title":"NatEval.eval_gt_conv","content":"NatEval.eval_gt_conv \neval_gt_conv \n\n This is the evaluation conversion for numeral greater-than comparison.  It takes\n a term of the form \u0060m \u003E n\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number numerals,\n and returns a theorem stating that this input equals its boolean value, under no\n assumptions.                                                \n                   \n        \u0060m \u003E n\u0060    \n    -------------- \n    |- m \u003E n \u003C=\u003E z \n\n eval_ge_conv, eval_le_conv, eval_lt_conv, eval_nat_eq_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_ge_conv","title":"NatEval.eval_ge_conv","content":"NatEval.eval_ge_conv \neval_ge_conv \n\n This is the evaluation conversion for numeral greater-than-or-equal comparison.\n It takes a term of the form \u0060m \u003E= n\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number\n numerals, and returns a theorem stating that this input equals its boolean\n value, under no assumptions.\n \n           \u0060m \u003E= n\u0060\n       ---------------\n       |- m \u003E= n \u003C=\u003E z\n\n eval_ge_conv, eval_le_conv, eval_lt_conv, eval_nat_eq_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#sub_zero_lemma","title":"NatEval.sub_zero_lemma","content":"NatEval.sub_zero_lemma \nsub_zero_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#sub_cancel_lemma","title":"NatEval.sub_cancel_lemma","content":"NatEval.sub_cancel_lemma \nsub_cancel_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#add_sub_lemma","title":"NatEval.add_sub_lemma","content":"NatEval.add_sub_lemma \nadd_sub_lemma \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#sub_floor_thm0","title":"NatEval.sub_floor_thm0","content":"NatEval.sub_floor_thm0 \nsub_floor_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_sub_conv0","title":"NatEval.eval_sub_conv0","content":"NatEval.eval_sub_conv0 \neval_sub_conv0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#eval_sub_conv","title":"NatEval.eval_sub_conv","content":"NatEval.eval_sub_conv \neval_sub_conv \n\n This is the evaluation conversion for numeral subtraction.  It takes a\n term of the form \u0060m - n\u0060, where \u0022m\u0022 and \u0022n\u0022 are both natural number   \n numerals, and returns a theorem stating that this equals its numeral  \n value, under no assumptions.                                          \n                                                                       \n       \u0060m - n\u0060                                                         \n    ------------                                                       \n    |- m - n = z                                                       \n\n See also: eval_add_conv, eval_mult_conv, eval_exp_conv.\n"},{"uri":"http://localhost:8901/reference/hol-nateval.html#load","title":"NatEval.load","content":"NatEval.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-nateval-destructed_bit.html","title":"destructed_bit","content":"destructed_bit \n \ndestructed_bit.Bit0 \nBit0 \ndestructed_bit.Bit1 \nBit1 \ndestructed_bit.Zero \nZero \ndestructed_bit.One \nOne"},{"uri":"http://localhost:8901/reference/hol-nateval-destructed_bit.html#Bit0","title":"destructed_bit.Bit0","content":"destructed_bit.Bit0 \nBit0 \n"},{"uri":"http://localhost:8901/reference/hol-nateval-destructed_bit.html#Bit1","title":"destructed_bit.Bit1","content":"destructed_bit.Bit1 \nBit1 \n"},{"uri":"http://localhost:8901/reference/hol-nateval-destructed_bit.html#Zero","title":"destructed_bit.Zero","content":"destructed_bit.Zero \nZero \n"},{"uri":"http://localhost:8901/reference/hol-nateval-destructed_bit.html#One","title":"destructed_bit.One","content":"destructed_bit.One \nOne \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html","title":"NatNumrl","content":"NatNumrl \n\nThis module defines the representation of natural number numerals.  This\nis based on the HOL functions \u0022BIT0\u0022 and \u0022BIT1\u0022.\n \nNatNumrl.Big_intExtension \nBig_intExtension \nNatNumrl.numeral_def \nnumeral_def \nNatNumrl.numeral_fn \nnumeral_fn \nNatNumrl.bit0_def \nbit0_def \nNatNumrl.bit0_fn \nbit0_fn \nNatNumrl.bit1_def \nbit1_def \nNatNumrl.bit1_fn \nbit1_fn \nNatNumrl.zero_tm \nzero_tm \nNatNumrl.mk_numeral_tag \nmk_numeral_tag \nNatNumrl.is_numeral_tag \nis_numeral_tag \nNatNumrl.dest_numeral_tag \ndest_numeral_tag \nNatNumrl.mk_bigint_nat0 \nmk_bigint_nat0 \nNatNumrl.mk_bigint_nat \nmk_bigint_nat \nNatNumrl.dest_bigint_nat0 \ndest_bigint_nat0 \nNatNumrl.dest_bigint_nat \ndest_bigint_nat \nNatNumrl.mk_int_nat0 \nmk_int_nat0 \nNatNumrl.mk_int_nat \nmk_int_nat \nNatNumrl.dest_int_nat0 \ndest_int_nat0 \nNatNumrl.dest_int_nat \ndest_int_nat \nNatNumrl.is_nat0 \nis_nat0 \nNatNumrl.is_nat \nis_nat \nNatNumrl.numeralise_mono_thm \nnumeralise_mono_thm \nNatNumrl.numeralise_mono_rule \nnumeralise_mono_rule \nNatNumrl.numeralise_bin_thm \nnumeralise_bin_thm \nNatNumrl.numeralise_bin_rule \nnumeralise_bin_rule \nNatNumrl.numeralise_pred_rule \nnumeralise_pred_rule \nNatNumrl.numeralise_rel_thm \nnumeralise_rel_thm \nNatNumrl.numeralise_rel_rule \nnumeralise_rel_rule \nNatNumrl.numeral_zero_thm \nnumeral_zero_thm \nNatNumrl.zero_numeral_thm \nzero_numeral_thm \nNatNumrl.numeral_one_thm \nnumeral_one_thm \nNatNumrl.one_numeral_thm \none_numeral_thm \nNatNumrl.nat_cases_thm \nnat_cases_thm \nNatNumrl.nat_induction_thm \nnat_induction_thm \nNatNumrl.nat_recursion_thm \nnat_recursion_thm \nNatNumrl.suc_not_zero_thm \nsuc_not_zero_thm \nNatNumrl.suc_zero_thm0 \nsuc_zero_thm0 \nNatNumrl.suc_zero_thm \nsuc_zero_thm \nNatNumrl.suc_one_thm0 \nsuc_one_thm0 \nNatNumrl.suc_one_thm \nsuc_one_thm \nNatNumrl.one_not_zero_thm \none_not_zero_thm \nNatNumrl.two_not_zero_thm \ntwo_not_zero_thm \nNatNumrl.load \nload"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeral_def","title":"NatNumrl.numeral_def","content":"NatNumrl.numeral_def \nnumeral_def \n\n |- !n. NUMERAL n = n\n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeral_fn","title":"NatNumrl.numeral_fn","content":"NatNumrl.numeral_fn \nnumeral_fn \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#bit0_def","title":"NatNumrl.bit0_def","content":"NatNumrl.bit0_def \nbit0_def \n\n |- (BIT0 ZERO = ZERO) /\\ (!n. BIT0 (SUC n) = SUC (SUC (BIT0 n)))\n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#bit0_fn","title":"NatNumrl.bit0_fn","content":"NatNumrl.bit0_fn \nbit0_fn \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#bit1_def","title":"NatNumrl.bit1_def","content":"NatNumrl.bit1_def \nbit1_def \n\n |- !n. BIT1 n = SUC (BIT0 n)\n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#bit1_fn","title":"NatNumrl.bit1_fn","content":"NatNumrl.bit1_fn \nbit1_fn \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#zero_tm","title":"NatNumrl.zero_tm","content":"NatNumrl.zero_tm \nzero_tm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#mk_numeral_tag","title":"NatNumrl.mk_numeral_tag","content":"NatNumrl.mk_numeral_tag \nmk_numeral_tag \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#is_numeral_tag","title":"NatNumrl.is_numeral_tag","content":"NatNumrl.is_numeral_tag \nis_numeral_tag \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#dest_numeral_tag","title":"NatNumrl.dest_numeral_tag","content":"NatNumrl.dest_numeral_tag \ndest_numeral_tag \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#mk_bigint_nat0","title":"NatNumrl.mk_bigint_nat0","content":"NatNumrl.mk_bigint_nat0 \nmk_bigint_nat0 \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#mk_bigint_nat","title":"NatNumrl.mk_bigint_nat","content":"NatNumrl.mk_bigint_nat \nmk_bigint_nat \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#dest_bigint_nat0","title":"NatNumrl.dest_bigint_nat0","content":"NatNumrl.dest_bigint_nat0 \ndest_bigint_nat0 \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#dest_bigint_nat","title":"NatNumrl.dest_bigint_nat","content":"NatNumrl.dest_bigint_nat \ndest_bigint_nat \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#mk_int_nat0","title":"NatNumrl.mk_int_nat0","content":"NatNumrl.mk_int_nat0 \nmk_int_nat0 \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#mk_int_nat","title":"NatNumrl.mk_int_nat","content":"NatNumrl.mk_int_nat \nmk_int_nat \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#dest_int_nat0","title":"NatNumrl.dest_int_nat0","content":"NatNumrl.dest_int_nat0 \ndest_int_nat0 \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#dest_int_nat","title":"NatNumrl.dest_int_nat","content":"NatNumrl.dest_int_nat \ndest_int_nat \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#is_nat0","title":"NatNumrl.is_nat0","content":"NatNumrl.is_nat0 \nis_nat0 \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#is_nat","title":"NatNumrl.is_nat","content":"NatNumrl.is_nat \nis_nat \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeralise_mono_thm","title":"NatNumrl.numeralise_mono_thm","content":"NatNumrl.numeralise_mono_thm \nnumeralise_mono_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeralise_mono_rule","title":"NatNumrl.numeralise_mono_rule","content":"NatNumrl.numeralise_mono_rule \nnumeralise_mono_rule \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeralise_bin_thm","title":"NatNumrl.numeralise_bin_thm","content":"NatNumrl.numeralise_bin_thm \nnumeralise_bin_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeralise_bin_rule","title":"NatNumrl.numeralise_bin_rule","content":"NatNumrl.numeralise_bin_rule \nnumeralise_bin_rule \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeralise_pred_rule","title":"NatNumrl.numeralise_pred_rule","content":"NatNumrl.numeralise_pred_rule \nnumeralise_pred_rule \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeralise_rel_thm","title":"NatNumrl.numeralise_rel_thm","content":"NatNumrl.numeralise_rel_thm \nnumeralise_rel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeralise_rel_rule","title":"NatNumrl.numeralise_rel_rule","content":"NatNumrl.numeralise_rel_rule \nnumeralise_rel_rule \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeral_zero_thm","title":"NatNumrl.numeral_zero_thm","content":"NatNumrl.numeral_zero_thm \nnumeral_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#zero_numeral_thm","title":"NatNumrl.zero_numeral_thm","content":"NatNumrl.zero_numeral_thm \nzero_numeral_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#numeral_one_thm","title":"NatNumrl.numeral_one_thm","content":"NatNumrl.numeral_one_thm \nnumeral_one_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#one_numeral_thm","title":"NatNumrl.one_numeral_thm","content":"NatNumrl.one_numeral_thm \none_numeral_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#nat_cases_thm","title":"NatNumrl.nat_cases_thm","content":"NatNumrl.nat_cases_thm \nnat_cases_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#nat_induction_thm","title":"NatNumrl.nat_induction_thm","content":"NatNumrl.nat_induction_thm \nnat_induction_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#nat_recursion_thm","title":"NatNumrl.nat_recursion_thm","content":"NatNumrl.nat_recursion_thm \nnat_recursion_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#suc_not_zero_thm","title":"NatNumrl.suc_not_zero_thm","content":"NatNumrl.suc_not_zero_thm \nsuc_not_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#suc_zero_thm0","title":"NatNumrl.suc_zero_thm0","content":"NatNumrl.suc_zero_thm0 \nsuc_zero_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#suc_zero_thm","title":"NatNumrl.suc_zero_thm","content":"NatNumrl.suc_zero_thm \nsuc_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#suc_one_thm0","title":"NatNumrl.suc_one_thm0","content":"NatNumrl.suc_one_thm0 \nsuc_one_thm0 \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#suc_one_thm","title":"NatNumrl.suc_one_thm","content":"NatNumrl.suc_one_thm \nsuc_one_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#one_not_zero_thm","title":"NatNumrl.one_not_zero_thm","content":"NatNumrl.one_not_zero_thm \none_not_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#two_not_zero_thm","title":"NatNumrl.two_not_zero_thm","content":"NatNumrl.two_not_zero_thm \ntwo_not_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl.html#load","title":"NatNumrl.load","content":"NatNumrl.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-natnumrl-big_intextension.html","title":"Big_intExtension","content":"Big_intExtension \n \nBig_intExtension.is_int_big_int \nis_int_big_int \nBig_intExtension.int_of_big_int \nint_of_big_int \nBig_intExtension.big_int_of_int \nbig_int_of_int"},{"uri":"http://localhost:8901/reference/hol-natnumrl-big_intextension.html#is_int_big_int","title":"Big_intExtension.is_int_big_int","content":"Big_intExtension.is_int_big_int \nis_int_big_int \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl-big_intextension.html#int_of_big_int","title":"Big_intExtension.int_of_big_int","content":"Big_intExtension.int_of_big_int \nint_of_big_int \n"},{"uri":"http://localhost:8901/reference/hol-natnumrl-big_intextension.html#big_int_of_int","title":"Big_intExtension.big_int_of_int","content":"Big_intExtension.big_int_of_int \nbig_int_of_int \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html","title":"NatRel","content":"NatRel \n\nThis module defines the classic natural number arithmetic relations and\nderives various basic properties about them.\n \nNatRel.l \nl \nNatRel.m \nm \nNatRel.n \nn \nNatRel.add_eq_cancel_thm \nadd_eq_cancel_thm \nNatRel.add_eq_zero_thm \nadd_eq_zero_thm \nNatRel.mult_eq_zero_thm \nmult_eq_zero_thm \nNatRel.mult_eq_cancel_thm \nmult_eq_cancel_thm \nNatRel.lt_def \nlt_def \nNatRel.lt_fn \nlt_fn \nNatRel.dest_lt \ndest_lt \nNatRel.mk_lt \nmk_lt \nNatRel.is_lt \nis_lt \nNatRel.not_lt_zero_thm \nnot_lt_zero_thm \nNatRel.lt_suc_cases_thm \nlt_suc_cases_thm \nNatRel.lt_suc_thm \nlt_suc_thm \nNatRel.zero_lt_suc_thm \nzero_lt_suc_thm \nNatRel.lt_zero_cases_thm \nlt_zero_cases_thm \nNatRel.suc_lt_cancel_thm \nsuc_lt_cancel_thm \nNatRel.lt_irrefl_thm \nlt_irrefl_thm \nNatRel.lt_trans_thm \nlt_trans_thm \nNatRel.lt_asym_thm \nlt_asym_thm \nNatRel.zero_lt_thm \nzero_lt_thm \nNatRel.not_lt_cases_thm \nnot_lt_cases_thm \nNatRel.add_lt_cancel_thm \nadd_lt_cancel_thm \nNatRel.mult_lt_cancel_thm \nmult_lt_cancel_thm \nNatRel.le_def \nle_def \nNatRel.le_fn \nle_fn \nNatRel.dest_le \ndest_le \nNatRel.mk_le \nmk_le \nNatRel.is_le \nis_le \nNatRel.le_cases_thm \nle_cases_thm \nNatRel.le_refl_thm \nle_refl_thm \nNatRel.le_antisym_thm \nle_antisym_thm \nNatRel.le_trans_thm \nle_trans_thm \nNatRel.le_zero_thm \nle_zero_thm \nNatRel.zero_le_thm \nzero_le_thm \nNatRel.suc_le_cancel_thm \nsuc_le_cancel_thm \nNatRel.add_le_cancel_thm \nadd_le_cancel_thm \nNatRel.mult_le_cancel_thm \nmult_le_cancel_thm \nNatRel.lt_suc_le_thm \nlt_suc_le_thm \nNatRel.suc_le_lt_thm \nsuc_le_lt_thm \nNatRel.sub_floor_thm \nsub_floor_thm \nNatRel.gt_def \ngt_def \nNatRel.gt_fn \ngt_fn \nNatRel.dest_gt \ndest_gt \nNatRel.mk_gt \nmk_gt \nNatRel.is_gt \nis_gt \nNatRel.ge_def \nge_def \nNatRel.ge_fn \nge_fn \nNatRel.dest_ge \ndest_ge \nNatRel.mk_ge \nmk_ge \nNatRel.is_ge \nis_ge \nNatRel.load \nload"},{"uri":"http://localhost:8901/reference/hol-natrel.html#l","title":"NatRel.l","content":"NatRel.l \nl \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#m","title":"NatRel.m","content":"NatRel.m \nm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#n","title":"NatRel.n","content":"NatRel.n \nn \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#add_eq_cancel_thm","title":"NatRel.add_eq_cancel_thm","content":"NatRel.add_eq_cancel_thm \nadd_eq_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#add_eq_zero_thm","title":"NatRel.add_eq_zero_thm","content":"NatRel.add_eq_zero_thm \nadd_eq_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#mult_eq_zero_thm","title":"NatRel.mult_eq_zero_thm","content":"NatRel.mult_eq_zero_thm \nmult_eq_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#mult_eq_cancel_thm","title":"NatRel.mult_eq_cancel_thm","content":"NatRel.mult_eq_cancel_thm \nmult_eq_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_def","title":"NatRel.lt_def","content":"NatRel.lt_def \nlt_def \n\n |- (!m. m \u003C 0 \u003C=\u003E false) /\\ (!m n. m \u003C SUC n \u003C=\u003E m = n \\/ m \u003C n)\n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_fn","title":"NatRel.lt_fn","content":"NatRel.lt_fn \nlt_fn \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#dest_lt","title":"NatRel.dest_lt","content":"NatRel.dest_lt \ndest_lt \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#mk_lt","title":"NatRel.mk_lt","content":"NatRel.mk_lt \nmk_lt \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#is_lt","title":"NatRel.is_lt","content":"NatRel.is_lt \nis_lt \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#not_lt_zero_thm","title":"NatRel.not_lt_zero_thm","content":"NatRel.not_lt_zero_thm \nnot_lt_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_suc_cases_thm","title":"NatRel.lt_suc_cases_thm","content":"NatRel.lt_suc_cases_thm \nlt_suc_cases_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_suc_thm","title":"NatRel.lt_suc_thm","content":"NatRel.lt_suc_thm \nlt_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#zero_lt_suc_thm","title":"NatRel.zero_lt_suc_thm","content":"NatRel.zero_lt_suc_thm \nzero_lt_suc_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_zero_cases_thm","title":"NatRel.lt_zero_cases_thm","content":"NatRel.lt_zero_cases_thm \nlt_zero_cases_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#suc_lt_cancel_thm","title":"NatRel.suc_lt_cancel_thm","content":"NatRel.suc_lt_cancel_thm \nsuc_lt_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_irrefl_thm","title":"NatRel.lt_irrefl_thm","content":"NatRel.lt_irrefl_thm \nlt_irrefl_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_trans_thm","title":"NatRel.lt_trans_thm","content":"NatRel.lt_trans_thm \nlt_trans_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_asym_thm","title":"NatRel.lt_asym_thm","content":"NatRel.lt_asym_thm \nlt_asym_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#zero_lt_thm","title":"NatRel.zero_lt_thm","content":"NatRel.zero_lt_thm \nzero_lt_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#not_lt_cases_thm","title":"NatRel.not_lt_cases_thm","content":"NatRel.not_lt_cases_thm \nnot_lt_cases_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#add_lt_cancel_thm","title":"NatRel.add_lt_cancel_thm","content":"NatRel.add_lt_cancel_thm \nadd_lt_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#mult_lt_cancel_thm","title":"NatRel.mult_lt_cancel_thm","content":"NatRel.mult_lt_cancel_thm \nmult_lt_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#le_def","title":"NatRel.le_def","content":"NatRel.le_def \nle_def \n\n |- !m n. m \u003C= n \u003C=\u003E m \u003C n \\/ m = n\n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#le_fn","title":"NatRel.le_fn","content":"NatRel.le_fn \nle_fn \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#dest_le","title":"NatRel.dest_le","content":"NatRel.dest_le \ndest_le \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#mk_le","title":"NatRel.mk_le","content":"NatRel.mk_le \nmk_le \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#is_le","title":"NatRel.is_le","content":"NatRel.is_le \nis_le \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#le_cases_thm","title":"NatRel.le_cases_thm","content":"NatRel.le_cases_thm \nle_cases_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#le_refl_thm","title":"NatRel.le_refl_thm","content":"NatRel.le_refl_thm \nle_refl_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#le_antisym_thm","title":"NatRel.le_antisym_thm","content":"NatRel.le_antisym_thm \nle_antisym_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#le_trans_thm","title":"NatRel.le_trans_thm","content":"NatRel.le_trans_thm \nle_trans_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#le_zero_thm","title":"NatRel.le_zero_thm","content":"NatRel.le_zero_thm \nle_zero_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#zero_le_thm","title":"NatRel.zero_le_thm","content":"NatRel.zero_le_thm \nzero_le_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#suc_le_cancel_thm","title":"NatRel.suc_le_cancel_thm","content":"NatRel.suc_le_cancel_thm \nsuc_le_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#add_le_cancel_thm","title":"NatRel.add_le_cancel_thm","content":"NatRel.add_le_cancel_thm \nadd_le_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#mult_le_cancel_thm","title":"NatRel.mult_le_cancel_thm","content":"NatRel.mult_le_cancel_thm \nmult_le_cancel_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#lt_suc_le_thm","title":"NatRel.lt_suc_le_thm","content":"NatRel.lt_suc_le_thm \nlt_suc_le_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#suc_le_lt_thm","title":"NatRel.suc_le_lt_thm","content":"NatRel.suc_le_lt_thm \nsuc_le_lt_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#sub_floor_thm","title":"NatRel.sub_floor_thm","content":"NatRel.sub_floor_thm \nsub_floor_thm \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#gt_def","title":"NatRel.gt_def","content":"NatRel.gt_def \ngt_def \n\n |- !m n. m \u003E n \u003C=\u003E n \u003C m\n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#gt_fn","title":"NatRel.gt_fn","content":"NatRel.gt_fn \ngt_fn \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#dest_gt","title":"NatRel.dest_gt","content":"NatRel.dest_gt \ndest_gt \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#mk_gt","title":"NatRel.mk_gt","content":"NatRel.mk_gt \nmk_gt \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#is_gt","title":"NatRel.is_gt","content":"NatRel.is_gt \nis_gt \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#ge_def","title":"NatRel.ge_def","content":"NatRel.ge_def \nge_def \n\n |- !m n. m \u003E= n \u003C=\u003E n \u003C= m\n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#ge_fn","title":"NatRel.ge_fn","content":"NatRel.ge_fn \nge_fn \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#dest_ge","title":"NatRel.dest_ge","content":"NatRel.dest_ge \ndest_ge \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#mk_ge","title":"NatRel.mk_ge","content":"NatRel.mk_ge \nmk_ge \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#is_ge","title":"NatRel.is_ge","content":"NatRel.is_ge \nis_ge \n"},{"uri":"http://localhost:8901/reference/hol-natrel.html#load","title":"NatRel.load","content":"NatRel.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-pair.html","title":"Pair","content":"Pair \n\n This module extends the HOL logic with the theory of ordered pairs.  This \n involves giving theory object definitions for the product type operator,  \n the pairing function and the constants \u0022FST\u0022 and \u0022SND\u0022, and proving a few \n basic properties.  Syntax functions and equality congruence rules are also\n provided.                                                                                                                                                                                          \n \nPair.mk_pair_rep_def \nmk_pair_rep_def \nPair.is_pair_rep_def \nis_pair_rep_def \nPair.mk_pair_rep_lemma \nmk_pair_rep_lemma \nPair.pair_rep_exists_lemma \npair_rep_exists_lemma \nPair.prod_def \nprod_def \nPair.prod_bij_def2 \nprod_bij_def2 \nPair.prod_bij_def1 \nprod_bij_def1 \nPair.mk_prod_type \nmk_prod_type \nPair.list_mk_prod_type \nlist_mk_prod_type \nPair.dest_prod_type \ndest_prod_type \nPair.strip_prod_type \nstrip_prod_type \nPair.is_prod_type \nis_prod_type \nPair.pair_def \npair_def \nPair.mk_pair \nmk_pair \nPair.list_mk_pair \nlist_mk_pair \nPair.dest_pair \ndest_pair \nPair.strip_pair \nstrip_pair \nPair.flatstrip_pair \nflatstrip_pair \nPair.is_pair \nis_pair \nPair.mk_pair_rule \nmk_pair_rule \nPair.mk_pair1_rule \nmk_pair1_rule \nPair.mk_pair2_rule \nmk_pair2_rule \nPair.rep_abs_pair_lemma \nrep_abs_pair_lemma \nPair.pair_eq_thm \npair_eq_thm \nPair.pair_surjective_thm \npair_surjective_thm \nPair.fst_def \nfst_def \nPair.snd_def \nsnd_def \nPair.fst_thm \nfst_thm \nPair.snd_thm \nsnd_thm \nPair.fst_snd_thm \nfst_snd_thm \nPair.load \nload"},{"uri":"http://localhost:8901/reference/hol-pair.html#mk_pair_rep_def","title":"Pair.mk_pair_rep_def","content":"Pair.mk_pair_rep_def \nmk_pair_rep_def \n\n The \u0022MkPairRep\u0022 function returns the concrete representation for a given  \n pair\u0027s two components (i.e. the representation in terms of existing types,\n before the product type is defined).  This representation is a function   \n that takes two arguments and returns \u0060true\u0060 for just one combination of   \n its arguments - when each argument is equal to its respective pair        \n component.  This is used to define both \u0022IsPairRep\u0022 and the pairing       \n function.                                                                 \n\n |- MkPairRep = (\\(x:\u0027a) (y:\u0027b) a b. a = x /\\ b = y)\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#is_pair_rep_def","title":"Pair.is_pair_rep_def","content":"Pair.is_pair_rep_def \nis_pair_rep_def \n\n \u0022IsPairRep\u0022 is the characteristic function for the product type operator.\n It takes a boolean-valued binary function and returns whether there is a \n pair for which this is the concrete representation.                      \n\n |- IsPairRep = (\\(r:\u0027a-\u003E\u0027b-\u003Ebool). ?a b. r = MkPairRep a b)\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#mk_pair_rep_lemma","title":"Pair.mk_pair_rep_lemma","content":"Pair.mk_pair_rep_lemma \nmk_pair_rep_lemma \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#pair_rep_exists_lemma","title":"Pair.pair_rep_exists_lemma","content":"Pair.pair_rep_exists_lemma \npair_rep_exists_lemma \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#prod_def","title":"Pair.prod_def","content":"Pair.prod_def \nprod_def \n\n |- ?(f:\u0027a#\u0027b-\u003E\u0027a-\u003E\u0027b-\u003Ebool). TYPE_DEFINITION IsPairRep \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#prod_bij_def2","title":"Pair.prod_bij_def2","content":"Pair.prod_bij_def2 \nprod_bij_def2 \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#prod_bij_def1","title":"Pair.prod_bij_def1","content":"Pair.prod_bij_def1 \nprod_bij_def1 \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#mk_prod_type","title":"Pair.mk_prod_type","content":"Pair.mk_prod_type \nmk_prod_type \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#list_mk_prod_type","title":"Pair.list_mk_prod_type","content":"Pair.list_mk_prod_type \nlist_mk_prod_type \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#dest_prod_type","title":"Pair.dest_prod_type","content":"Pair.dest_prod_type \ndest_prod_type \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#strip_prod_type","title":"Pair.strip_prod_type","content":"Pair.strip_prod_type \nstrip_prod_type \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#is_prod_type","title":"Pair.is_prod_type","content":"Pair.is_prod_type \nis_prod_type \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#pair_def","title":"Pair.pair_def","content":"Pair.pair_def \npair_def \n\n The pairing function, called \u0022PAIR\u0022, takes two arguments and returns the \n corresponding element in the product type.  It is simply defined as the  \n product type\u0027s abstraction of the \u0022MkPairRep\u0022 function.  It has special  \n support in the parser/printer, so that the quotation \u0060(t1,t2)\u0060 is parsed/\n printed for the internal term \u0060PAIR t1 t2\u0060.                              \n\n |- PAIR = (\\(x:\u0027a) (y:\u0027b). PairAbs (MkPairRep x y))\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#mk_pair","title":"Pair.mk_pair","content":"Pair.mk_pair \nmk_pair \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#list_mk_pair","title":"Pair.list_mk_pair","content":"Pair.list_mk_pair \nlist_mk_pair \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#dest_pair","title":"Pair.dest_pair","content":"Pair.dest_pair \ndest_pair \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#strip_pair","title":"Pair.strip_pair","content":"Pair.strip_pair \nstrip_pair \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#flatstrip_pair","title":"Pair.flatstrip_pair","content":"Pair.flatstrip_pair \nflatstrip_pair \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#is_pair","title":"Pair.is_pair","content":"Pair.is_pair \nis_pair \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#mk_pair_rule","title":"Pair.mk_pair_rule","content":"Pair.mk_pair_rule \nmk_pair_rule \n\n This is the equality congruence rule for pairing.  It takes two equality\n theorems, and pairs corresponding sides of the first theorem with the   \n second, unioning the assumptions.                                       \n                                                                         \n    A1 |- x1 = x2    A2 |- y1 = y2                                       \n    ------------------------------                                       \n     A1 u A2 |- (x1,y1) = (x2,y2)                                        \n\n See also: mk_pair1_rule, mk_pair2_rule, mk_bin_rule.\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#mk_pair1_rule","title":"Pair.mk_pair1_rule","content":"Pair.mk_pair1_rule \nmk_pair1_rule \n\n This is the equality congruence rule for pair LHS.  It takes an equality\n theorem and a term, and pairs each side of the theorem with the term.   \n                                                                         \n     A |- x1 = x2   \u0060y\u0060                                                  \n    --------------------                                                 \n    A |- (x1,y) = (x2,y)                                                 \n\n See also: mk_pair2_rule, mk_pair_rule, mk_bin1_rule.\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#mk_pair2_rule","title":"Pair.mk_pair2_rule","content":"Pair.mk_pair2_rule \nmk_pair2_rule \n\n This is the equality congruence rule for pair RHS.  It takes a term and an\n equality theorem, and pairs the term with each side of the theorem.       \n                                                                           \n     \u0060x\u0060   A |- y1 = y2                                                    \n    --------------------                                                   \n    A |- (x,y1) = (x,y2)                                                   \n\n See also: mk_pair1_rule, mk_pair_rule, mk_bin2_rule.\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#rep_abs_pair_lemma","title":"Pair.rep_abs_pair_lemma","content":"Pair.rep_abs_pair_lemma \nrep_abs_pair_lemma \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#pair_eq_thm","title":"Pair.pair_eq_thm","content":"Pair.pair_eq_thm \npair_eq_thm \n"},{"uri":"http://localhost:8901/reference/hol-pair.html#pair_surjective_thm","title":"Pair.pair_surjective_thm","content":"Pair.pair_surjective_thm \npair_surjective_thm \n\n |- !p. ?x y. p = (x,y)\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#fst_def","title":"Pair.fst_def","content":"Pair.fst_def \nfst_def \n\n Selects the first component of a pair\n\n |- FST = (\\(p:\u0027a#\u0027b). @x. ?y. p = (x,y))\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#snd_def","title":"Pair.snd_def","content":"Pair.snd_def \nsnd_def \n\n Selects the second component of a pair\n\n |- SND = (\\(p:\u0027a#\u0027b). @y. ?x. p = (x,y))\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#fst_thm","title":"Pair.fst_thm","content":"Pair.fst_thm \nfst_thm \n\n |- !x y. FST (x,y) = x\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#snd_thm","title":"Pair.snd_thm","content":"Pair.snd_thm \nsnd_thm \n\n |- !x y. SND (x,y) = y\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#fst_snd_thm","title":"Pair.fst_snd_thm","content":"Pair.fst_snd_thm \nfst_snd_thm \n\n |- !p. (FST p, SND p) = p\n"},{"uri":"http://localhost:8901/reference/hol-pair.html#load","title":"Pair.load","content":"Pair.load \nload \n\n Force module evaluation\n"},{"uri":"http://localhost:8901/reference/hol-parser.html","title":"Parser","content":"Parser \n\nThis module implements syntax analysis and top-level parsing of type/term\nquotations into internal types/terms.  The syntax analysis functions take\na list of lexical tokens as their source, and return a pretype/preterm   \nthat gets passed on to type analysis.  Lexical analysis is implemented in\nthe \u0027Lexer\u0027 module, and type analsyis (actually common to parsing and    \nprinting) is implemented in the \u0027TypeAnal\u0027 module.           \n \nParser.\u0027a, \u0027b infix_elem \n\u0027a, \u0027b infix_elem \nParser.is_resword_token \nis_resword_token \nParser.is_eqkwd_token \nis_eqkwd_token \nParser.is_resword_token_with \nis_resword_token_with \nParser.is_resword_token_in \nis_resword_token_in \nParser.is_resword_token_not_in \nis_resword_token_not_in \nParser.is_nonfix_tyconst_token \nis_nonfix_tyconst_token \nParser.is_infix_tyconst_token \nis_infix_tyconst_token \nParser.is_tyvar_token \nis_tyvar_token \nParser.is_nonfix_token \nis_nonfix_token \nParser.is_prefix_token \nis_prefix_token \nParser.is_infix_token \nis_infix_token \nParser.is_postfix_token \nis_postfix_token \nParser.is_binder_token \nis_binder_token \nParser.is_var_token \nis_var_token \nParser.is_const_token \nis_const_token \nParser.is_nonfix_var_token \nis_nonfix_var_token \nParser.is_numeral_token \nis_numeral_token \nParser.parse_list \nparse_list \nParser.parse_start \nparse_start \nParser.parse_end \nparse_end \nParser.parse_equals_kwd \nparse_equals_kwd \nParser.parse_name_with \nparse_name_with \nParser.parse_resword \nparse_resword \nParser.parse_resword_in \nparse_resword_in \nParser.parse_resword_not_in \nparse_resword_not_in \nParser.syntax_err \nsyntax_err \nParser.(/!) \n(/!) \nParser.(/|/!) \n(/|/!) \nParser.ored \nored \nParser.end_of_qtn_err \nend_of_qtn_err \nParser.early_resword_err \nearly_resword_err \nParser.hit_resword_err \nhit_resword_err \nParser.hit_resword_instead_err \nhit_resword_instead_err \nParser.wrong_resword_err \nwrong_resword_err \nParser.no_close_err0 \nno_close_err0 \nParser.no_close_err \nno_close_err \nParser.leading_type_reswords \nleading_type_reswords \nParser.leading_term_reswords \nleading_term_reswords \nParser.parse_itemA \nparse_itemA \nParser.parse_reswordA \nparse_reswordA \nParser.parse_listA \nparse_listA \nParser.parse_itemB \nparse_itemB \nParser.parse_itemC \nparse_itemC \nParser.parse_itemD \nparse_itemD \nParser.parse_reswordD \nparse_reswordD \nParser.parse_listD0 \nparse_listD0 \nParser.parse_listD \nparse_listD \nParser.build_revpolish_step \nbuild_revpolish_step \nParser.build_revpolish \nbuild_revpolish \nParser.build_infix_expr \nbuild_infix_expr \nParser.parse_infix_expr0 \nparse_infix_expr0 \nParser.parse_infix_expr \nparse_infix_expr \nParser.parse_infix_tyconst \nparse_infix_tyconst \nParser.parse_nonfix_tyconst \nparse_nonfix_tyconst \nParser.parse_pretype2 \nparse_pretype2 \nParser.parse_pretype1 \nparse_pretype1 \nParser.parse_pretype0 \nparse_pretype0 \nParser.parse_pretype \nparse_pretype \nParser.parse_atom_with \nparse_atom_with \nParser.hit_prefix_err \nhit_prefix_err \nParser.hit_infix_err \nhit_infix_err \nParser.hit_numeral_err \nhit_numeral_err \nParser.hit_const_err \nhit_const_err \nParser.parse_infix_op \nparse_infix_op \nParser.parse_nonfix_var \nparse_nonfix_var \nParser.parse_preterm5 \nparse_preterm5 \nParser.parse_preterm4 \nparse_preterm4 \nParser.parse_preterm3 \nparse_preterm3 \nParser.parse_preterm2 \nparse_preterm2 \nParser.parse_preterm1 \nparse_preterm1 \nParser.parse_preterm0 \nparse_preterm0 \nParser.parse_preterm \nparse_preterm \nParser.parse_type \nparse_type \nParser.parse_term \nparse_term \nParser.string_tail \nstring_tail \nParser.skip_space \nskip_space \nParser.expand_hol_quotation \nexpand_hol_quotation"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_resword_token","title":"Parser.is_resword_token","content":"Parser.is_resword_token \nis_resword_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_eqkwd_token","title":"Parser.is_eqkwd_token","content":"Parser.is_eqkwd_token \nis_eqkwd_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_resword_token_with","title":"Parser.is_resword_token_with","content":"Parser.is_resword_token_with \nis_resword_token_with \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_resword_token_in","title":"Parser.is_resword_token_in","content":"Parser.is_resword_token_in \nis_resword_token_in \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_resword_token_not_in","title":"Parser.is_resword_token_not_in","content":"Parser.is_resword_token_not_in \nis_resword_token_not_in \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_nonfix_tyconst_token","title":"Parser.is_nonfix_tyconst_token","content":"Parser.is_nonfix_tyconst_token \nis_nonfix_tyconst_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_infix_tyconst_token","title":"Parser.is_infix_tyconst_token","content":"Parser.is_infix_tyconst_token \nis_infix_tyconst_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_tyvar_token","title":"Parser.is_tyvar_token","content":"Parser.is_tyvar_token \nis_tyvar_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_nonfix_token","title":"Parser.is_nonfix_token","content":"Parser.is_nonfix_token \nis_nonfix_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_prefix_token","title":"Parser.is_prefix_token","content":"Parser.is_prefix_token \nis_prefix_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_infix_token","title":"Parser.is_infix_token","content":"Parser.is_infix_token \nis_infix_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_postfix_token","title":"Parser.is_postfix_token","content":"Parser.is_postfix_token \nis_postfix_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_binder_token","title":"Parser.is_binder_token","content":"Parser.is_binder_token \nis_binder_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_var_token","title":"Parser.is_var_token","content":"Parser.is_var_token \nis_var_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_const_token","title":"Parser.is_const_token","content":"Parser.is_const_token \nis_const_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_nonfix_var_token","title":"Parser.is_nonfix_var_token","content":"Parser.is_nonfix_var_token \nis_nonfix_var_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#is_numeral_token","title":"Parser.is_numeral_token","content":"Parser.is_numeral_token \nis_numeral_token \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_list","title":"Parser.parse_list","content":"Parser.parse_list \nparse_list \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_start","title":"Parser.parse_start","content":"Parser.parse_start \nparse_start \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_end","title":"Parser.parse_end","content":"Parser.parse_end \nparse_end \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_equals_kwd","title":"Parser.parse_equals_kwd","content":"Parser.parse_equals_kwd \nparse_equals_kwd \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_name_with","title":"Parser.parse_name_with","content":"Parser.parse_name_with \nparse_name_with \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_resword","title":"Parser.parse_resword","content":"Parser.parse_resword \nparse_resword \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_resword_in","title":"Parser.parse_resword_in","content":"Parser.parse_resword_in \nparse_resword_in \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_resword_not_in","title":"Parser.parse_resword_not_in","content":"Parser.parse_resword_not_in \nparse_resword_not_in \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#syntax_err","title":"Parser.syntax_err","content":"Parser.syntax_err \nsyntax_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#(/!)","title":"Parser.(/!)","content":"Parser.(/!) \n(/!) \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#(/|/!)","title":"Parser.(/|/!)","content":"Parser.(/|/!) \n(/|/!) \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#ored","title":"Parser.ored","content":"Parser.ored \nored \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#end_of_qtn_err","title":"Parser.end_of_qtn_err","content":"Parser.end_of_qtn_err \nend_of_qtn_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#early_resword_err","title":"Parser.early_resword_err","content":"Parser.early_resword_err \nearly_resword_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#hit_resword_err","title":"Parser.hit_resword_err","content":"Parser.hit_resword_err \nhit_resword_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#hit_resword_instead_err","title":"Parser.hit_resword_instead_err","content":"Parser.hit_resword_instead_err \nhit_resword_instead_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#wrong_resword_err","title":"Parser.wrong_resword_err","content":"Parser.wrong_resword_err \nwrong_resword_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#no_close_err0","title":"Parser.no_close_err0","content":"Parser.no_close_err0 \nno_close_err0 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#no_close_err","title":"Parser.no_close_err","content":"Parser.no_close_err \nno_close_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#leading_type_reswords","title":"Parser.leading_type_reswords","content":"Parser.leading_type_reswords \nleading_type_reswords \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#leading_term_reswords","title":"Parser.leading_term_reswords","content":"Parser.leading_term_reswords \nleading_term_reswords \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_itemA","title":"Parser.parse_itemA","content":"Parser.parse_itemA \nparse_itemA \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_reswordA","title":"Parser.parse_reswordA","content":"Parser.parse_reswordA \nparse_reswordA \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_listA","title":"Parser.parse_listA","content":"Parser.parse_listA \nparse_listA \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_itemB","title":"Parser.parse_itemB","content":"Parser.parse_itemB \nparse_itemB \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_itemC","title":"Parser.parse_itemC","content":"Parser.parse_itemC \nparse_itemC \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_itemD","title":"Parser.parse_itemD","content":"Parser.parse_itemD \nparse_itemD \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_reswordD","title":"Parser.parse_reswordD","content":"Parser.parse_reswordD \nparse_reswordD \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_listD0","title":"Parser.parse_listD0","content":"Parser.parse_listD0 \nparse_listD0 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_listD","title":"Parser.parse_listD","content":"Parser.parse_listD \nparse_listD \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#build_revpolish_step","title":"Parser.build_revpolish_step","content":"Parser.build_revpolish_step \nbuild_revpolish_step \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#build_revpolish","title":"Parser.build_revpolish","content":"Parser.build_revpolish \nbuild_revpolish \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#build_infix_expr","title":"Parser.build_infix_expr","content":"Parser.build_infix_expr \nbuild_infix_expr \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_infix_expr0","title":"Parser.parse_infix_expr0","content":"Parser.parse_infix_expr0 \nparse_infix_expr0 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_infix_expr","title":"Parser.parse_infix_expr","content":"Parser.parse_infix_expr \nparse_infix_expr \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_infix_tyconst","title":"Parser.parse_infix_tyconst","content":"Parser.parse_infix_tyconst \nparse_infix_tyconst \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_nonfix_tyconst","title":"Parser.parse_nonfix_tyconst","content":"Parser.parse_nonfix_tyconst \nparse_nonfix_tyconst \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_pretype2","title":"Parser.parse_pretype2","content":"Parser.parse_pretype2 \nparse_pretype2 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_pretype1","title":"Parser.parse_pretype1","content":"Parser.parse_pretype1 \nparse_pretype1 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_pretype0","title":"Parser.parse_pretype0","content":"Parser.parse_pretype0 \nparse_pretype0 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_pretype","title":"Parser.parse_pretype","content":"Parser.parse_pretype \nparse_pretype \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_atom_with","title":"Parser.parse_atom_with","content":"Parser.parse_atom_with \nparse_atom_with \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#hit_prefix_err","title":"Parser.hit_prefix_err","content":"Parser.hit_prefix_err \nhit_prefix_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#hit_infix_err","title":"Parser.hit_infix_err","content":"Parser.hit_infix_err \nhit_infix_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#hit_numeral_err","title":"Parser.hit_numeral_err","content":"Parser.hit_numeral_err \nhit_numeral_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#hit_const_err","title":"Parser.hit_const_err","content":"Parser.hit_const_err \nhit_const_err \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_infix_op","title":"Parser.parse_infix_op","content":"Parser.parse_infix_op \nparse_infix_op \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_nonfix_var","title":"Parser.parse_nonfix_var","content":"Parser.parse_nonfix_var \nparse_nonfix_var \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_preterm5","title":"Parser.parse_preterm5","content":"Parser.parse_preterm5 \nparse_preterm5 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_preterm4","title":"Parser.parse_preterm4","content":"Parser.parse_preterm4 \nparse_preterm4 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_preterm3","title":"Parser.parse_preterm3","content":"Parser.parse_preterm3 \nparse_preterm3 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_preterm2","title":"Parser.parse_preterm2","content":"Parser.parse_preterm2 \nparse_preterm2 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_preterm1","title":"Parser.parse_preterm1","content":"Parser.parse_preterm1 \nparse_preterm1 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_preterm0","title":"Parser.parse_preterm0","content":"Parser.parse_preterm0 \nparse_preterm0 \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_preterm","title":"Parser.parse_preterm","content":"Parser.parse_preterm \nparse_preterm \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_type","title":"Parser.parse_type","content":"Parser.parse_type \nparse_type \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#parse_term","title":"Parser.parse_term","content":"Parser.parse_term \nparse_term \n\n This takes a string and parses it into an internal term.  The type     \n analysis stage first detypes the preterm before inferring types (in    \n \u0027resolve_preterm\u0027), since the syntax analysis stage gives all variables\n and constants the null pretype.  Note that type inference is capable of\n handling overloaded variables.                                         \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#string_tail","title":"Parser.string_tail","content":"Parser.string_tail \nstring_tail \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#skip_space","title":"Parser.skip_space","content":"Parser.skip_space \nskip_space \n"},{"uri":"http://localhost:8901/reference/hol-parser.html#expand_hol_quotation","title":"Parser.expand_hol_quotation","content":"Parser.expand_hol_quotation \nexpand_hol_quotation \n"},{"uri":"http://localhost:8901/reference/hol-parser-infix_elem-2.html","title":"\u0027a, \u0027b infix_elem","content":"\u0027a, \u0027b infix_elem \n \n\u0027a, \u0027b infix_elem.Infix_op \nInfix_op \n\u0027a, \u0027b infix_elem.Infix_arg \nInfix_arg"},{"uri":"http://localhost:8901/reference/hol-parser-infix_elem-2.html#Infix_op","title":"\u0027a, \u0027b infix_elem.Infix_op","content":"\u0027a, \u0027b infix_elem.Infix_op \nInfix_op \n"},{"uri":"http://localhost:8901/reference/hol-parser-infix_elem-2.html#Infix_arg","title":"\u0027a, \u0027b infix_elem.Infix_arg","content":"\u0027a, \u0027b infix_elem.Infix_arg \nInfix_arg \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html","title":"Preterm","content":"Preterm \n\nThis module defines the pretype and preterm datatypes (called \u0027pretype\u0027   \nand \u0027preterm\u0027), and various basic operations on them.  These are used     \nduring parsing and printing as intermediate representations of types/terms\nbetween their quotation and internal representations.  They incorporate   \nextra datatype classes, that don\u0027t occur in the corresponding internal    \ndatatypes and are only used during parsing and printing.  Being           \nintermediate datatypes, there is no need for well-formedness restrictions \non their constructors, and so the datatypes are not made abstract.\n \nPreterm.preterm \npreterm \nPreterm.pretype \npretype \nPreterm.dest_tyvar_pretype \ndest_tyvar_pretype \nPreterm.dest_gtyvar_pretype \ndest_gtyvar_pretype \nPreterm.is_gtyvar_pretype \nis_gtyvar_pretype \nPreterm.mk_bin_pretype \nmk_bin_pretype \nPreterm.dest_infix_pretype \ndest_infix_pretype \nPreterm.strip_infix_pretype0 \nstrip_infix_pretype0 \nPreterm.strip_infix_pretype \nstrip_infix_pretype \nPreterm.mk_fun_pretype \nmk_fun_pretype \nPreterm.dest_fun_pretype \ndest_fun_pretype \nPreterm.bool_pty \nbool_pty \nPreterm.bool_bin_pty \nbool_bin_pty \nPreterm.type_to_pretype \ntype_to_pretype \nPreterm.pretype_to_type0 \npretype_to_type0 \nPreterm.pretype_to_type \npretype_to_type \nPreterm.pretype_tyvars \npretype_tyvars \nPreterm.pretype_gtyvars \npretype_gtyvars \nPreterm.pretype_has_gtyvars \npretype_has_gtyvars \nPreterm.pretype_inst \npretype_inst \nPreterm.pretype_complexity \npretype_complexity \nPreterm.mk_null_var_preterm \nmk_null_var_preterm \nPreterm.dest_var_preterm \ndest_var_preterm \nPreterm.mk_null_const_preterm \nmk_null_const_preterm \nPreterm.const_preterm_name \nconst_preterm_name \nPreterm.mk_comb_preterm \nmk_comb_preterm \nPreterm.list_mk_comb_preterm \nlist_mk_comb_preterm \nPreterm.dest_comb_preterm \ndest_comb_preterm \nPreterm.strip_comb_preterm \nstrip_comb_preterm \nPreterm.list_mk_abs_preterm \nlist_mk_abs_preterm \nPreterm.dest_abs_preterm \ndest_abs_preterm \nPreterm.strip_abs_preterm \nstrip_abs_preterm \nPreterm.is_typed_preterm \nis_typed_preterm \nPreterm.is_atom_preterm \nis_atom_preterm \nPreterm.atom_preterm_name \natom_preterm_name \nPreterm.same_atom_preterm \nsame_atom_preterm \nPreterm.mk_bin_preterm \nmk_bin_preterm \nPreterm.list_mk_bin_preterm \nlist_mk_bin_preterm \nPreterm.dest_bin_preterm \ndest_bin_preterm \nPreterm.dest_bin_preterm0 \ndest_bin_preterm0 \nPreterm.strip_bin_preterm \nstrip_bin_preterm \nPreterm.cond_fn \ncond_fn \nPreterm.mk_cond_preterm \nmk_cond_preterm \nPreterm.dest_cond_preterm \ndest_cond_preterm \nPreterm.is_cond_preterm \nis_cond_preterm \nPreterm.let_fn \nlet_fn \nPreterm.mk_let_preterm \nmk_let_preterm \nPreterm.dest_let_preterm \ndest_let_preterm \nPreterm.is_let_preterm \nis_let_preterm \nPreterm.pair_fn \npair_fn \nPreterm.mk_pair_preterm \nmk_pair_preterm \nPreterm.list_mk_pair_preterm \nlist_mk_pair_preterm \nPreterm.strip_pair_preterm \nstrip_pair_preterm \nPreterm.is_pair_preterm \nis_pair_preterm \nPreterm.numeral_fn \nnumeral_fn \nPreterm.mk_bigint_nat_preterm0 \nmk_bigint_nat_preterm0 \nPreterm.mk_bigint_nat_preterm \nmk_bigint_nat_preterm \nPreterm.dest_bigint_nat_preterm0 \ndest_bigint_nat_preterm0 \nPreterm.dest_bigint_nat_preterm \ndest_bigint_nat_preterm \nPreterm.is_nat_preterm \nis_nat_preterm \nPreterm.mk_enum_preterm \nmk_enum_preterm \nPreterm.dest_enum_preterm \ndest_enum_preterm \nPreterm.is_enum_preterm \nis_enum_preterm \nPreterm.strip_infix_preterm \nstrip_infix_preterm \nPreterm.is_prefix_preterm \nis_prefix_preterm \nPreterm.is_infix_preterm \nis_infix_preterm \nPreterm.is_postfix_preterm \nis_postfix_preterm \nPreterm.mk_binder_preterm \nmk_binder_preterm \nPreterm.list_mk_binder_preterm \nlist_mk_binder_preterm \nPreterm.dest_binder_preterm \ndest_binder_preterm \nPreterm.strip_binder_preterm0 \nstrip_binder_preterm0 \nPreterm.strip_binder_preterm \nstrip_binder_preterm \nPreterm.is_binder_preterm \nis_binder_preterm \nPreterm.term_to_preterm \nterm_to_preterm \nPreterm.preterm_tyvars \npreterm_tyvars \nPreterm.preterm_gtyvars \npreterm_gtyvars \nPreterm.preterm_has_gtyvars \npreterm_has_gtyvars \nPreterm.preterm_to_term0 \npreterm_to_term0 \nPreterm.tynum_mapping0 \ntynum_mapping0 \nPreterm.tynum_mapping \ntynum_mapping \nPreterm.preterm_to_term \npreterm_to_term \nPreterm.preterm_inst \npreterm_inst \nPreterm.remove_identities \nremove_identities \nPreterm.pretype_match0 \npretype_match0 \nPreterm.pretype_match \npretype_match \nPreterm.preterm_pretype_match0 \npreterm_pretype_match0 \nPreterm.preterm_pretype_match \npreterm_pretype_match"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_tyvar_pretype","title":"Preterm.dest_tyvar_pretype","content":"Preterm.dest_tyvar_pretype \ndest_tyvar_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_gtyvar_pretype","title":"Preterm.dest_gtyvar_pretype","content":"Preterm.dest_gtyvar_pretype \ndest_gtyvar_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_gtyvar_pretype","title":"Preterm.is_gtyvar_pretype","content":"Preterm.is_gtyvar_pretype \nis_gtyvar_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_bin_pretype","title":"Preterm.mk_bin_pretype","content":"Preterm.mk_bin_pretype \nmk_bin_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_infix_pretype","title":"Preterm.dest_infix_pretype","content":"Preterm.dest_infix_pretype \ndest_infix_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_infix_pretype0","title":"Preterm.strip_infix_pretype0","content":"Preterm.strip_infix_pretype0 \nstrip_infix_pretype0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_infix_pretype","title":"Preterm.strip_infix_pretype","content":"Preterm.strip_infix_pretype \nstrip_infix_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_fun_pretype","title":"Preterm.mk_fun_pretype","content":"Preterm.mk_fun_pretype \nmk_fun_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_fun_pretype","title":"Preterm.dest_fun_pretype","content":"Preterm.dest_fun_pretype \ndest_fun_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#bool_pty","title":"Preterm.bool_pty","content":"Preterm.bool_pty \nbool_pty \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#bool_bin_pty","title":"Preterm.bool_bin_pty","content":"Preterm.bool_bin_pty \nbool_bin_pty \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#type_to_pretype","title":"Preterm.type_to_pretype","content":"Preterm.type_to_pretype \ntype_to_pretype \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_to_type0","title":"Preterm.pretype_to_type0","content":"Preterm.pretype_to_type0 \npretype_to_type0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_to_type","title":"Preterm.pretype_to_type","content":"Preterm.pretype_to_type \npretype_to_type \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_tyvars","title":"Preterm.pretype_tyvars","content":"Preterm.pretype_tyvars \npretype_tyvars \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_gtyvars","title":"Preterm.pretype_gtyvars","content":"Preterm.pretype_gtyvars \npretype_gtyvars \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_has_gtyvars","title":"Preterm.pretype_has_gtyvars","content":"Preterm.pretype_has_gtyvars \npretype_has_gtyvars \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_inst","title":"Preterm.pretype_inst","content":"Preterm.pretype_inst \npretype_inst \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_complexity","title":"Preterm.pretype_complexity","content":"Preterm.pretype_complexity \npretype_complexity \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_null_var_preterm","title":"Preterm.mk_null_var_preterm","content":"Preterm.mk_null_var_preterm \nmk_null_var_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_var_preterm","title":"Preterm.dest_var_preterm","content":"Preterm.dest_var_preterm \ndest_var_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_null_const_preterm","title":"Preterm.mk_null_const_preterm","content":"Preterm.mk_null_const_preterm \nmk_null_const_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#const_preterm_name","title":"Preterm.const_preterm_name","content":"Preterm.const_preterm_name \nconst_preterm_name \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_comb_preterm","title":"Preterm.mk_comb_preterm","content":"Preterm.mk_comb_preterm \nmk_comb_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#list_mk_comb_preterm","title":"Preterm.list_mk_comb_preterm","content":"Preterm.list_mk_comb_preterm \nlist_mk_comb_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_comb_preterm","title":"Preterm.dest_comb_preterm","content":"Preterm.dest_comb_preterm \ndest_comb_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_comb_preterm","title":"Preterm.strip_comb_preterm","content":"Preterm.strip_comb_preterm \nstrip_comb_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#list_mk_abs_preterm","title":"Preterm.list_mk_abs_preterm","content":"Preterm.list_mk_abs_preterm \nlist_mk_abs_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_abs_preterm","title":"Preterm.dest_abs_preterm","content":"Preterm.dest_abs_preterm \ndest_abs_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_abs_preterm","title":"Preterm.strip_abs_preterm","content":"Preterm.strip_abs_preterm \nstrip_abs_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_typed_preterm","title":"Preterm.is_typed_preterm","content":"Preterm.is_typed_preterm \nis_typed_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_atom_preterm","title":"Preterm.is_atom_preterm","content":"Preterm.is_atom_preterm \nis_atom_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#atom_preterm_name","title":"Preterm.atom_preterm_name","content":"Preterm.atom_preterm_name \natom_preterm_name \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#same_atom_preterm","title":"Preterm.same_atom_preterm","content":"Preterm.same_atom_preterm \nsame_atom_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_bin_preterm","title":"Preterm.mk_bin_preterm","content":"Preterm.mk_bin_preterm \nmk_bin_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#list_mk_bin_preterm","title":"Preterm.list_mk_bin_preterm","content":"Preterm.list_mk_bin_preterm \nlist_mk_bin_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_bin_preterm","title":"Preterm.dest_bin_preterm","content":"Preterm.dest_bin_preterm \ndest_bin_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_bin_preterm0","title":"Preterm.dest_bin_preterm0","content":"Preterm.dest_bin_preterm0 \ndest_bin_preterm0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_bin_preterm","title":"Preterm.strip_bin_preterm","content":"Preterm.strip_bin_preterm \nstrip_bin_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#cond_fn","title":"Preterm.cond_fn","content":"Preterm.cond_fn \ncond_fn \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_cond_preterm","title":"Preterm.mk_cond_preterm","content":"Preterm.mk_cond_preterm \nmk_cond_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_cond_preterm","title":"Preterm.dest_cond_preterm","content":"Preterm.dest_cond_preterm \ndest_cond_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_cond_preterm","title":"Preterm.is_cond_preterm","content":"Preterm.is_cond_preterm \nis_cond_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#let_fn","title":"Preterm.let_fn","content":"Preterm.let_fn \nlet_fn \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_let_preterm","title":"Preterm.mk_let_preterm","content":"Preterm.mk_let_preterm \nmk_let_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_let_preterm","title":"Preterm.dest_let_preterm","content":"Preterm.dest_let_preterm \ndest_let_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_let_preterm","title":"Preterm.is_let_preterm","content":"Preterm.is_let_preterm \nis_let_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pair_fn","title":"Preterm.pair_fn","content":"Preterm.pair_fn \npair_fn \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_pair_preterm","title":"Preterm.mk_pair_preterm","content":"Preterm.mk_pair_preterm \nmk_pair_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#list_mk_pair_preterm","title":"Preterm.list_mk_pair_preterm","content":"Preterm.list_mk_pair_preterm \nlist_mk_pair_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_pair_preterm","title":"Preterm.strip_pair_preterm","content":"Preterm.strip_pair_preterm \nstrip_pair_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_pair_preterm","title":"Preterm.is_pair_preterm","content":"Preterm.is_pair_preterm \nis_pair_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#numeral_fn","title":"Preterm.numeral_fn","content":"Preterm.numeral_fn \nnumeral_fn \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_bigint_nat_preterm0","title":"Preterm.mk_bigint_nat_preterm0","content":"Preterm.mk_bigint_nat_preterm0 \nmk_bigint_nat_preterm0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_bigint_nat_preterm","title":"Preterm.mk_bigint_nat_preterm","content":"Preterm.mk_bigint_nat_preterm \nmk_bigint_nat_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_bigint_nat_preterm0","title":"Preterm.dest_bigint_nat_preterm0","content":"Preterm.dest_bigint_nat_preterm0 \ndest_bigint_nat_preterm0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_bigint_nat_preterm","title":"Preterm.dest_bigint_nat_preterm","content":"Preterm.dest_bigint_nat_preterm \ndest_bigint_nat_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_nat_preterm","title":"Preterm.is_nat_preterm","content":"Preterm.is_nat_preterm \nis_nat_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_enum_preterm","title":"Preterm.mk_enum_preterm","content":"Preterm.mk_enum_preterm \nmk_enum_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_enum_preterm","title":"Preterm.dest_enum_preterm","content":"Preterm.dest_enum_preterm \ndest_enum_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_enum_preterm","title":"Preterm.is_enum_preterm","content":"Preterm.is_enum_preterm \nis_enum_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_infix_preterm","title":"Preterm.strip_infix_preterm","content":"Preterm.strip_infix_preterm \nstrip_infix_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_prefix_preterm","title":"Preterm.is_prefix_preterm","content":"Preterm.is_prefix_preterm \nis_prefix_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_infix_preterm","title":"Preterm.is_infix_preterm","content":"Preterm.is_infix_preterm \nis_infix_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_postfix_preterm","title":"Preterm.is_postfix_preterm","content":"Preterm.is_postfix_preterm \nis_postfix_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#mk_binder_preterm","title":"Preterm.mk_binder_preterm","content":"Preterm.mk_binder_preterm \nmk_binder_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#list_mk_binder_preterm","title":"Preterm.list_mk_binder_preterm","content":"Preterm.list_mk_binder_preterm \nlist_mk_binder_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#dest_binder_preterm","title":"Preterm.dest_binder_preterm","content":"Preterm.dest_binder_preterm \ndest_binder_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_binder_preterm0","title":"Preterm.strip_binder_preterm0","content":"Preterm.strip_binder_preterm0 \nstrip_binder_preterm0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#strip_binder_preterm","title":"Preterm.strip_binder_preterm","content":"Preterm.strip_binder_preterm \nstrip_binder_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#is_binder_preterm","title":"Preterm.is_binder_preterm","content":"Preterm.is_binder_preterm \nis_binder_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#term_to_preterm","title":"Preterm.term_to_preterm","content":"Preterm.term_to_preterm \nterm_to_preterm \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#preterm_tyvars","title":"Preterm.preterm_tyvars","content":"Preterm.preterm_tyvars \npreterm_tyvars \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#preterm_gtyvars","title":"Preterm.preterm_gtyvars","content":"Preterm.preterm_gtyvars \npreterm_gtyvars \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#preterm_has_gtyvars","title":"Preterm.preterm_has_gtyvars","content":"Preterm.preterm_has_gtyvars \npreterm_has_gtyvars \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#preterm_to_term0","title":"Preterm.preterm_to_term0","content":"Preterm.preterm_to_term0 \npreterm_to_term0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#tynum_mapping0","title":"Preterm.tynum_mapping0","content":"Preterm.tynum_mapping0 \ntynum_mapping0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#tynum_mapping","title":"Preterm.tynum_mapping","content":"Preterm.tynum_mapping \ntynum_mapping \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#preterm_to_term","title":"Preterm.preterm_to_term","content":"Preterm.preterm_to_term \npreterm_to_term \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#preterm_inst","title":"Preterm.preterm_inst","content":"Preterm.preterm_inst \npreterm_inst \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#remove_identities","title":"Preterm.remove_identities","content":"Preterm.remove_identities \nremove_identities \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_match0","title":"Preterm.pretype_match0","content":"Preterm.pretype_match0 \npretype_match0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#pretype_match","title":"Preterm.pretype_match","content":"Preterm.pretype_match \npretype_match \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#preterm_pretype_match0","title":"Preterm.preterm_pretype_match0","content":"Preterm.preterm_pretype_match0 \npreterm_pretype_match0 \n"},{"uri":"http://localhost:8901/reference/hol-preterm.html#preterm_pretype_match","title":"Preterm.preterm_pretype_match","content":"Preterm.preterm_pretype_match \npreterm_pretype_match \n"},{"uri":"http://localhost:8901/reference/hol-preterm-preterm.html","title":"preterm","content":"preterm \n \npreterm.Ptmvar \nPtmvar \npreterm.Ptmconst \nPtmconst \npreterm.Ptmcomb \nPtmcomb \npreterm.Ptmabs \nPtmabs \npreterm.Ptmtyped \nPtmtyped"},{"uri":"http://localhost:8901/reference/hol-preterm-preterm.html#Ptmvar","title":"preterm.Ptmvar","content":"preterm.Ptmvar \nPtmvar \n"},{"uri":"http://localhost:8901/reference/hol-preterm-preterm.html#Ptmconst","title":"preterm.Ptmconst","content":"preterm.Ptmconst \nPtmconst \n"},{"uri":"http://localhost:8901/reference/hol-preterm-preterm.html#Ptmcomb","title":"preterm.Ptmcomb","content":"preterm.Ptmcomb \nPtmcomb \n"},{"uri":"http://localhost:8901/reference/hol-preterm-preterm.html#Ptmabs","title":"preterm.Ptmabs","content":"preterm.Ptmabs \nPtmabs \n"},{"uri":"http://localhost:8901/reference/hol-preterm-preterm.html#Ptmtyped","title":"preterm.Ptmtyped","content":"preterm.Ptmtyped \nPtmtyped \n"},{"uri":"http://localhost:8901/reference/hol-preterm-pretype.html","title":"pretype","content":"pretype \n\nThis is the datatype for the intermediate representation of HOL types.  It\nincludes an extra class for \u0022generated tyvars\u0022, used in term parsing and  \nprinting as a temporary placeholder for an as-yet-undetermined type       \n(whereas \u0022conventional tyvars\u0022 come from user annotations and internal    \ntypes and are fixed for the purposes of parsing and printing).  Generated \ntyvars have a number attribute.  This is by default \u00270\u0027, which imparts no \ninformation, but gets assigned a unique non-zero value during preterm     \ndetyping (see \u0027TypeAnal\u0027 module).                                         \n \npretype.Ptyvar \nPtyvar \npretype.Ptygvar \nPtygvar \npretype.Ptycomp \nPtycomp"},{"uri":"http://localhost:8901/reference/hol-preterm-pretype.html#Ptyvar","title":"pretype.Ptyvar","content":"pretype.Ptyvar \nPtyvar \n"},{"uri":"http://localhost:8901/reference/hol-preterm-pretype.html#Ptygvar","title":"pretype.Ptygvar","content":"pretype.Ptygvar \nPtygvar \n"},{"uri":"http://localhost:8901/reference/hol-preterm-pretype.html#Ptycomp","title":"pretype.Ptycomp","content":"pretype.Ptycomp \nPtycomp \n"},{"uri":"http://localhost:8901/reference/hol-printer.html","title":"Printer","content":"Printer \n\nThis module implements the type, term and theorem pretty printers, for    \noutputting quotation representations of internal types/terms/theorems.    \nThe printers take into account identifier fixity status and enumeration   \nbracket settings (see \u0027Names\u0027 module), certain special-case theory objects\n(whose declarations in later modules are anticipated here), and the       \ndisplay modes (see \u0027DModes\u0027 module).  This module is a trusted component  \nof the system, since the user will normally rely on it to determine what  \nhas been proved and what has been asserted.          \n \nPrinter.print_sep \nprint_sep \nPrinter.print_open_brkt \nprint_open_brkt \nPrinter.print_close_brkt \nprint_close_brkt \nPrinter.print_space \nprint_space \nPrinter.print_open_brkt_if \nprint_open_brkt_if \nPrinter.print_close_brkt_if \nprint_close_brkt_if \nPrinter.print_space_if \nprint_space_if \nPrinter.print_seplist \nprint_seplist \nPrinter.print_sp_seplist \nprint_sp_seplist \nPrinter.print_splist \nprint_splist \nPrinter.need_prec_brkts \nneed_prec_brkts \nPrinter.need_separation \nneed_separation \nPrinter.type_name_form \ntype_name_form \nPrinter.type_printable_name \ntype_printable_name \nPrinter.tyvar_printable_name \ntyvar_printable_name \nPrinter.print_pretype0 \nprint_pretype0 \nPrinter.print_pretype \nprint_pretype \nPrinter.term_name_form \nterm_name_form \nPrinter.term_printable_name \nterm_printable_name \nPrinter.var_printable_name \nvar_printable_name \nPrinter.is_compound_preterm \nis_compound_preterm \nPrinter.print_atom \nprint_atom \nPrinter.print_full_preterm0 \nprint_full_preterm0 \nPrinter.print_full_preterm \nprint_full_preterm \nPrinter.print_prim_preterm0 \nprint_prim_preterm0 \nPrinter.print_prim_preterm \nprint_prim_preterm \nPrinter.print_type \nprint_type \nPrinter.print_qtype \nprint_qtype \nPrinter.annotate_preterm \nannotate_preterm \nPrinter.printing_preterm \nprinting_preterm \nPrinter.print_preterm \nprint_preterm \nPrinter.print_term \nprint_term \nPrinter.print_qterm \nprint_qterm \nPrinter.ndest_binargs_preterm \nndest_binargs_preterm \nPrinter.thm_printing_preterms \nthm_printing_preterms \nPrinter.print_thm \nprint_thm"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_sep","title":"Printer.print_sep","content":"Printer.print_sep \nprint_sep \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_open_brkt","title":"Printer.print_open_brkt","content":"Printer.print_open_brkt \nprint_open_brkt \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_close_brkt","title":"Printer.print_close_brkt","content":"Printer.print_close_brkt \nprint_close_brkt \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_space","title":"Printer.print_space","content":"Printer.print_space \nprint_space \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_open_brkt_if","title":"Printer.print_open_brkt_if","content":"Printer.print_open_brkt_if \nprint_open_brkt_if \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_close_brkt_if","title":"Printer.print_close_brkt_if","content":"Printer.print_close_brkt_if \nprint_close_brkt_if \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_space_if","title":"Printer.print_space_if","content":"Printer.print_space_if \nprint_space_if \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_seplist","title":"Printer.print_seplist","content":"Printer.print_seplist \nprint_seplist \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_sp_seplist","title":"Printer.print_sp_seplist","content":"Printer.print_sp_seplist \nprint_sp_seplist \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_splist","title":"Printer.print_splist","content":"Printer.print_splist \nprint_splist \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#need_prec_brkts","title":"Printer.need_prec_brkts","content":"Printer.need_prec_brkts \nneed_prec_brkts \n\nThis is for determining whether precedence brackets are needed for a      \nsubexpression.  Returns \u0022true\u0022 if brackets are needed when going from a   \nconstruct at parse-level \u0027l0\u0027, precedence \u0027n0\u0027 and extra flag \u0027fl0\u0027 to a  \nconstruct at parse-level \u0027l1\u0027, precedence \u0027n1\u0027.  If going to a higher     \nparse-level or the same parse-level but higher precedence then no brackets\nare needed.  Flag \u0027fl0\u0027 being set means that brackets are needed if the   \nparse level and precedence are the same.                                  \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#need_separation","title":"Printer.need_separation","content":"Printer.need_separation \nneed_separation \n\nThis is for determining whether separation (be it brackets or spacing) is\nrequired between juxtaposed tokens, given the boundary classes of their  \nnames.  The following classification is used:                            \n  alphanumerics     1                                                    \n  symbolics         2                                                    \n  quoted/other      0                                                    \nSeparation is never required with something of class 0 or with something \nof a different class.  The \u0027ss0\u0027 arg is a list of boundary classes that  \ncould juxtapose - in some cases it\u0027s easier to consider the list of      \npossibilities rather than work out which one it is, and over-use of      \nseparation is always safe.                                               \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#type_name_form","title":"Printer.type_name_form","content":"Printer.type_name_form \ntype_name_form \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#type_printable_name","title":"Printer.type_printable_name","content":"Printer.type_printable_name \ntype_printable_name \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#tyvar_printable_name","title":"Printer.tyvar_printable_name","content":"Printer.tyvar_printable_name \ntyvar_printable_name \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_pretype0","title":"Printer.print_pretype0","content":"Printer.print_pretype0 \nprint_pretype0 \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_pretype","title":"Printer.print_pretype","content":"Printer.print_pretype \nprint_pretype \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#term_name_form","title":"Printer.term_name_form","content":"Printer.term_name_form \nterm_name_form \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#term_printable_name","title":"Printer.term_printable_name","content":"Printer.term_printable_name \nterm_printable_name \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#var_printable_name","title":"Printer.var_printable_name","content":"Printer.var_printable_name \nvar_printable_name \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#is_compound_preterm","title":"Printer.is_compound_preterm","content":"Printer.is_compound_preterm \nis_compound_preterm \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_atom","title":"Printer.print_atom","content":"Printer.print_atom \nprint_atom \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_full_preterm0","title":"Printer.print_full_preterm0","content":"Printer.print_full_preterm0 \nprint_full_preterm0 \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_full_preterm","title":"Printer.print_full_preterm","content":"Printer.print_full_preterm \nprint_full_preterm \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_prim_preterm0","title":"Printer.print_prim_preterm0","content":"Printer.print_prim_preterm0 \nprint_prim_preterm0 \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_prim_preterm","title":"Printer.print_prim_preterm","content":"Printer.print_prim_preterm \nprint_prim_preterm \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_type","title":"Printer.print_type","content":"Printer.print_type \nprint_type \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_qtype","title":"Printer.print_qtype","content":"Printer.print_qtype \nprint_qtype \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#annotate_preterm","title":"Printer.annotate_preterm","content":"Printer.annotate_preterm \nannotate_preterm \n\nThis gives a preterm for the supplied term, annotated with any types that \nare needed for printing.  If \u0027fl\u0027 is set, then the type of the overall    \nterm is taken as given when decided type annotations.  Note that the      \nuse of \u0027check_preterm_annotations\u0027 on the result removes the need to trust\nthe relatively complicated type annotation routine.                       \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#printing_preterm","title":"Printer.printing_preterm","content":"Printer.printing_preterm \nprinting_preterm \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_preterm","title":"Printer.print_preterm","content":"Printer.print_preterm \nprint_preterm \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_term","title":"Printer.print_term","content":"Printer.print_term \nprint_term \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_qterm","title":"Printer.print_qterm","content":"Printer.print_qterm \nprint_qterm \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#ndest_binargs_preterm","title":"Printer.ndest_binargs_preterm","content":"Printer.ndest_binargs_preterm \nndest_binargs_preterm \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#thm_printing_preterms","title":"Printer.thm_printing_preterms","content":"Printer.thm_printing_preterms \nthm_printing_preterms \n"},{"uri":"http://localhost:8901/reference/hol-printer.html#print_thm","title":"Printer.print_thm","content":"Printer.print_thm \nprint_thm \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html","title":"ProofManagement","content":"ProofManagement \n \nProofManagement.start_proof \nstart_proof \nProofManagement.prove\u0027 \nprove\u0027 \nProofManagement.focus_goal \nfocus_goal \nProofManagement.prove \nprove \nProofManagement.findExp \nfindExp \nProofManagement.select \nselect \nProofManagement.thm_fd \nthm_fd \nProofManagement.term_fd \nterm_fd \nProofManagement.termlst_fd \ntermlst_fd \nProofManagement.instTermlst_fd \ninstTermlst_fd \nProofManagement.instTyLst_fd \ninstTyLst_fd \nProofManagement.by \nby \nProofManagement.tmFnForward \ntmFnForward \nProofManagement.thmFnForward \nthmFnForward \nProofManagement.thmThmFnForward \nthmThmFnForward \nProofManagement.thmThmThmFnForward \nthmThmThmFnForward \nProofManagement.TmThmThmFnForward \nTmThmThmFnForward \nProofManagement.tmThm2ThmFnForward \ntmThm2ThmFnForward \nProofManagement.tmTmThmFnForward \ntmTmThmFnForward \nProofManagement.tmThmFnForward \ntmThmFnForward \nProofManagement.thmTmFnForward \nthmTmFnForward \nProofManagement.TmLstThmFnForward \nTmLstThmFnForward \nProofManagement.InstTmLstThmFnForward \nInstTmLstThmFnForward \nProofManagement.ThmLstFnForward \nThmLstFnForward \nProofManagement.instTyLstThmFnForward \ninstTyLstThmFnForward \nProofManagement.refl_conv_fd \nrefl_conv_fd \nProofManagement.refl_conv_bk \nrefl_conv_bk \nProofManagement.mk_abs_rule_fd \nmk_abs_rule_fd \nProofManagement.mk_abs_rule_bk \nmk_abs_rule_bk \nProofManagement.assume_rule_fd \nassume_rule_fd \nProofManagement.assume_rule_bk \nassume_rule_bk \nProofManagement.disch_rule_fd \ndisch_rule_fd \nProofManagement.disch_rule_bk \ndisch_rule_bk \nProofManagement.mp_rule_fd \nmp_rule_fd \nProofManagement.mp_rule_bk \nmp_rule_bk \nProofManagement.eq_mp_rule_fd \neq_mp_rule_fd \nProofManagement.eq_mp_rule_bk \neq_mp_rule_bk \nProofManagement.inst_rule_fd \ninst_rule_fd \nProofManagement.inst_rule_bk \ninst_rule_bk \nProofManagement.inst_type_rule_fd \ninst_type_rule_fd \nProofManagement.mk_comb1_rule_fd \nmk_comb1_rule_fd \nProofManagement.mk_comb1_rule_bk \nmk_comb1_rule_bk \nProofManagement.mk_comb2_rule_fd \nmk_comb2_rule_fd \nProofManagement.mk_comb2_rule_bk \nmk_comb2_rule_bk \nProofManagement.trans_rule_fd \ntrans_rule_fd \nProofManagement.trans_rule_bk \ntrans_rule_bk \nProofManagement.list_trans_rule_fd \nlist_trans_rule_fd \nProofManagement.sym_rule_fd \nsym_rule_fd \nProofManagement.sym_rule_bk \nsym_rule_bk \nProofManagement.undisch_rule_fd \nundisch_rule_fd \nProofManagement.undisch_rule_bk \nundisch_rule_bk \nProofManagement.add_asm_rule_fd \nadd_asm_rule_fd \nProofManagement.add_asm_rule_bk \nadd_asm_rule_bk \nProofManagement.not_intro_rule_fd \nnot_intro_rule_fd \nProofManagement.not_intro_rule_bk \nnot_intro_rule_bk \nProofManagement.not_elim_rule_fd \nnot_elim_rule_fd \nProofManagement.not_elim_rule_bk \nnot_elim_rule_bk \nProofManagement.deduct_contrapos_rule_fd \ndeduct_contrapos_rule_fd \nProofManagement.deduct_contrapos_rule_bk \ndeduct_contrapos_rule_bk \nProofManagement.eqf_elim_rule_fd \neqf_elim_rule_fd \nProofManagement.eqf_elim_rule_bk \neqf_elim_rule_bk \nProofManagement.spec_rule_fd \nspec_rule_fd \nProofManagement.spec_rule_bk \nspec_rule_bk \nProofManagement.list_spec_rule_fd \nlist_spec_rule_fd \nProofManagement.list_spec_rule_bk \nlist_spec_rule_bk \nProofManagement.contr_rule_fd \ncontr_rule_fd \nProofManagement.contr_rule_bk \ncontr_rule_bk \nProofManagement.eta_conv_fd \neta_conv_fd \nProofManagement.eta_conv_bk \neta_conv_bk \nProofManagement.deduct_antisym_rule_fd \ndeduct_antisym_rule_fd \nProofManagement.deduct_antisym_rule_bk \ndeduct_antisym_rule_bk \nProofManagement.eqt_intro_rule_fd \neqt_intro_rule_fd \nProofManagement.eqt_intro_rule_bk \neqt_intro_rule_bk \nProofManagement.eqf_intro_rule_fd \neqf_intro_rule_fd \nProofManagement.eqf_intro_rule_bk \neqf_intro_rule_bk \nProofManagement.gen_rule_fd \ngen_rule_fd \nProofManagement.gen_rule_bk \ngen_rule_bk \nProofManagement.list_gen_rule_fd \nlist_gen_rule_fd \nProofManagement.list_gen_rule_bk \nlist_gen_rule_bk \nProofManagement.conj_rule_fd \nconj_rule_fd \nProofManagement.conj_rule_bk \nconj_rule_bk \nProofManagement.conjunct1_rule_fd \nconjunct1_rule_fd \nProofManagement.conjunct1_rule_bk \nconjunct1_rule_bk \nProofManagement.conjunct2_rule_fd \nconjunct2_rule_fd \nProofManagement.conjunct2_rule_bk \nconjunct2_rule_bk \nProofManagement.disj_cases_rule_fd \ndisj_cases_rule_fd \nProofManagement.disj_cases_rule_bk \ndisj_cases_rule_bk \nProofManagement.disj1_rule_fd \ndisj1_rule_fd \nProofManagement.disj1_rule_bk \ndisj1_rule_bk \nProofManagement.disj2_rule_fd \ndisj2_rule_fd \nProofManagement.disj2_rule_bk \ndisj2_rule_bk \nProofManagement.mk_bin_rule_fd \nmk_bin_rule_fd \nProofManagement.mk_bin_rule_bk \nmk_bin_rule_bk \nProofManagement.select_rule_fd \nselect_rule_fd \nProofManagement.select_rule_bk \nselect_rule_bk \nProofManagement.exists_rule_fd \nexists_rule_fd \nProofManagement.exists_rule_bk \nexists_rule_bk \nProofManagement.choose_rule_fd \nchoose_rule_fd \nProofManagement.choose_rule_bk \nchoose_rule_bk"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#start_proof","title":"ProofManagement.start_proof","content":"ProofManagement.start_proof \nstart_proof \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#prove\u0027","title":"ProofManagement.prove\u0027","content":"ProofManagement.prove\u0027 \nprove\u0027 \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#focus_goal","title":"ProofManagement.focus_goal","content":"ProofManagement.focus_goal \nfocus_goal \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#prove","title":"ProofManagement.prove","content":"ProofManagement.prove \nprove \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#findExp","title":"ProofManagement.findExp","content":"ProofManagement.findExp \nfindExp \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#select","title":"ProofManagement.select","content":"ProofManagement.select \nselect \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#thm_fd","title":"ProofManagement.thm_fd","content":"ProofManagement.thm_fd \nthm_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#term_fd","title":"ProofManagement.term_fd","content":"ProofManagement.term_fd \nterm_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#termlst_fd","title":"ProofManagement.termlst_fd","content":"ProofManagement.termlst_fd \ntermlst_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#instTermlst_fd","title":"ProofManagement.instTermlst_fd","content":"ProofManagement.instTermlst_fd \ninstTermlst_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#instTyLst_fd","title":"ProofManagement.instTyLst_fd","content":"ProofManagement.instTyLst_fd \ninstTyLst_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#by","title":"ProofManagement.by","content":"ProofManagement.by \nby \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#tmFnForward","title":"ProofManagement.tmFnForward","content":"ProofManagement.tmFnForward \ntmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#thmFnForward","title":"ProofManagement.thmFnForward","content":"ProofManagement.thmFnForward \nthmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#thmThmFnForward","title":"ProofManagement.thmThmFnForward","content":"ProofManagement.thmThmFnForward \nthmThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#thmThmThmFnForward","title":"ProofManagement.thmThmThmFnForward","content":"ProofManagement.thmThmThmFnForward \nthmThmThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#TmThmThmFnForward","title":"ProofManagement.TmThmThmFnForward","content":"ProofManagement.TmThmThmFnForward \nTmThmThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#tmThm2ThmFnForward","title":"ProofManagement.tmThm2ThmFnForward","content":"ProofManagement.tmThm2ThmFnForward \ntmThm2ThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#tmTmThmFnForward","title":"ProofManagement.tmTmThmFnForward","content":"ProofManagement.tmTmThmFnForward \ntmTmThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#tmThmFnForward","title":"ProofManagement.tmThmFnForward","content":"ProofManagement.tmThmFnForward \ntmThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#thmTmFnForward","title":"ProofManagement.thmTmFnForward","content":"ProofManagement.thmTmFnForward \nthmTmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#TmLstThmFnForward","title":"ProofManagement.TmLstThmFnForward","content":"ProofManagement.TmLstThmFnForward \nTmLstThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#InstTmLstThmFnForward","title":"ProofManagement.InstTmLstThmFnForward","content":"ProofManagement.InstTmLstThmFnForward \nInstTmLstThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#ThmLstFnForward","title":"ProofManagement.ThmLstFnForward","content":"ProofManagement.ThmLstFnForward \nThmLstFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#instTyLstThmFnForward","title":"ProofManagement.instTyLstThmFnForward","content":"ProofManagement.instTyLstThmFnForward \ninstTyLstThmFnForward \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#refl_conv_fd","title":"ProofManagement.refl_conv_fd","content":"ProofManagement.refl_conv_fd \nrefl_conv_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#refl_conv_bk","title":"ProofManagement.refl_conv_bk","content":"ProofManagement.refl_conv_bk \nrefl_conv_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mk_abs_rule_fd","title":"ProofManagement.mk_abs_rule_fd","content":"ProofManagement.mk_abs_rule_fd \nmk_abs_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mk_abs_rule_bk","title":"ProofManagement.mk_abs_rule_bk","content":"ProofManagement.mk_abs_rule_bk \nmk_abs_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#assume_rule_fd","title":"ProofManagement.assume_rule_fd","content":"ProofManagement.assume_rule_fd \nassume_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#assume_rule_bk","title":"ProofManagement.assume_rule_bk","content":"ProofManagement.assume_rule_bk \nassume_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#disch_rule_fd","title":"ProofManagement.disch_rule_fd","content":"ProofManagement.disch_rule_fd \ndisch_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#disch_rule_bk","title":"ProofManagement.disch_rule_bk","content":"ProofManagement.disch_rule_bk \ndisch_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mp_rule_fd","title":"ProofManagement.mp_rule_fd","content":"ProofManagement.mp_rule_fd \nmp_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mp_rule_bk","title":"ProofManagement.mp_rule_bk","content":"ProofManagement.mp_rule_bk \nmp_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eq_mp_rule_fd","title":"ProofManagement.eq_mp_rule_fd","content":"ProofManagement.eq_mp_rule_fd \neq_mp_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eq_mp_rule_bk","title":"ProofManagement.eq_mp_rule_bk","content":"ProofManagement.eq_mp_rule_bk \neq_mp_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#inst_rule_fd","title":"ProofManagement.inst_rule_fd","content":"ProofManagement.inst_rule_fd \ninst_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#inst_rule_bk","title":"ProofManagement.inst_rule_bk","content":"ProofManagement.inst_rule_bk \ninst_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#inst_type_rule_fd","title":"ProofManagement.inst_type_rule_fd","content":"ProofManagement.inst_type_rule_fd \ninst_type_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mk_comb1_rule_fd","title":"ProofManagement.mk_comb1_rule_fd","content":"ProofManagement.mk_comb1_rule_fd \nmk_comb1_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mk_comb1_rule_bk","title":"ProofManagement.mk_comb1_rule_bk","content":"ProofManagement.mk_comb1_rule_bk \nmk_comb1_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mk_comb2_rule_fd","title":"ProofManagement.mk_comb2_rule_fd","content":"ProofManagement.mk_comb2_rule_fd \nmk_comb2_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mk_comb2_rule_bk","title":"ProofManagement.mk_comb2_rule_bk","content":"ProofManagement.mk_comb2_rule_bk \nmk_comb2_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#trans_rule_fd","title":"ProofManagement.trans_rule_fd","content":"ProofManagement.trans_rule_fd \ntrans_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#trans_rule_bk","title":"ProofManagement.trans_rule_bk","content":"ProofManagement.trans_rule_bk \ntrans_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#list_trans_rule_fd","title":"ProofManagement.list_trans_rule_fd","content":"ProofManagement.list_trans_rule_fd \nlist_trans_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#sym_rule_fd","title":"ProofManagement.sym_rule_fd","content":"ProofManagement.sym_rule_fd \nsym_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#sym_rule_bk","title":"ProofManagement.sym_rule_bk","content":"ProofManagement.sym_rule_bk \nsym_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#undisch_rule_fd","title":"ProofManagement.undisch_rule_fd","content":"ProofManagement.undisch_rule_fd \nundisch_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#undisch_rule_bk","title":"ProofManagement.undisch_rule_bk","content":"ProofManagement.undisch_rule_bk \nundisch_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#add_asm_rule_fd","title":"ProofManagement.add_asm_rule_fd","content":"ProofManagement.add_asm_rule_fd \nadd_asm_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#add_asm_rule_bk","title":"ProofManagement.add_asm_rule_bk","content":"ProofManagement.add_asm_rule_bk \nadd_asm_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#not_intro_rule_fd","title":"ProofManagement.not_intro_rule_fd","content":"ProofManagement.not_intro_rule_fd \nnot_intro_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#not_intro_rule_bk","title":"ProofManagement.not_intro_rule_bk","content":"ProofManagement.not_intro_rule_bk \nnot_intro_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#not_elim_rule_fd","title":"ProofManagement.not_elim_rule_fd","content":"ProofManagement.not_elim_rule_fd \nnot_elim_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#not_elim_rule_bk","title":"ProofManagement.not_elim_rule_bk","content":"ProofManagement.not_elim_rule_bk \nnot_elim_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#deduct_contrapos_rule_fd","title":"ProofManagement.deduct_contrapos_rule_fd","content":"ProofManagement.deduct_contrapos_rule_fd \ndeduct_contrapos_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#deduct_contrapos_rule_bk","title":"ProofManagement.deduct_contrapos_rule_bk","content":"ProofManagement.deduct_contrapos_rule_bk \ndeduct_contrapos_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eqf_elim_rule_fd","title":"ProofManagement.eqf_elim_rule_fd","content":"ProofManagement.eqf_elim_rule_fd \neqf_elim_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eqf_elim_rule_bk","title":"ProofManagement.eqf_elim_rule_bk","content":"ProofManagement.eqf_elim_rule_bk \neqf_elim_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#spec_rule_fd","title":"ProofManagement.spec_rule_fd","content":"ProofManagement.spec_rule_fd \nspec_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#spec_rule_bk","title":"ProofManagement.spec_rule_bk","content":"ProofManagement.spec_rule_bk \nspec_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#list_spec_rule_fd","title":"ProofManagement.list_spec_rule_fd","content":"ProofManagement.list_spec_rule_fd \nlist_spec_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#list_spec_rule_bk","title":"ProofManagement.list_spec_rule_bk","content":"ProofManagement.list_spec_rule_bk \nlist_spec_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#contr_rule_fd","title":"ProofManagement.contr_rule_fd","content":"ProofManagement.contr_rule_fd \ncontr_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#contr_rule_bk","title":"ProofManagement.contr_rule_bk","content":"ProofManagement.contr_rule_bk \ncontr_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eta_conv_fd","title":"ProofManagement.eta_conv_fd","content":"ProofManagement.eta_conv_fd \neta_conv_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eta_conv_bk","title":"ProofManagement.eta_conv_bk","content":"ProofManagement.eta_conv_bk \neta_conv_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#deduct_antisym_rule_fd","title":"ProofManagement.deduct_antisym_rule_fd","content":"ProofManagement.deduct_antisym_rule_fd \ndeduct_antisym_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#deduct_antisym_rule_bk","title":"ProofManagement.deduct_antisym_rule_bk","content":"ProofManagement.deduct_antisym_rule_bk \ndeduct_antisym_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eqt_intro_rule_fd","title":"ProofManagement.eqt_intro_rule_fd","content":"ProofManagement.eqt_intro_rule_fd \neqt_intro_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eqt_intro_rule_bk","title":"ProofManagement.eqt_intro_rule_bk","content":"ProofManagement.eqt_intro_rule_bk \neqt_intro_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eqf_intro_rule_fd","title":"ProofManagement.eqf_intro_rule_fd","content":"ProofManagement.eqf_intro_rule_fd \neqf_intro_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#eqf_intro_rule_bk","title":"ProofManagement.eqf_intro_rule_bk","content":"ProofManagement.eqf_intro_rule_bk \neqf_intro_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#gen_rule_fd","title":"ProofManagement.gen_rule_fd","content":"ProofManagement.gen_rule_fd \ngen_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#gen_rule_bk","title":"ProofManagement.gen_rule_bk","content":"ProofManagement.gen_rule_bk \ngen_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#list_gen_rule_fd","title":"ProofManagement.list_gen_rule_fd","content":"ProofManagement.list_gen_rule_fd \nlist_gen_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#list_gen_rule_bk","title":"ProofManagement.list_gen_rule_bk","content":"ProofManagement.list_gen_rule_bk \nlist_gen_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#conj_rule_fd","title":"ProofManagement.conj_rule_fd","content":"ProofManagement.conj_rule_fd \nconj_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#conj_rule_bk","title":"ProofManagement.conj_rule_bk","content":"ProofManagement.conj_rule_bk \nconj_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#conjunct1_rule_fd","title":"ProofManagement.conjunct1_rule_fd","content":"ProofManagement.conjunct1_rule_fd \nconjunct1_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#conjunct1_rule_bk","title":"ProofManagement.conjunct1_rule_bk","content":"ProofManagement.conjunct1_rule_bk \nconjunct1_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#conjunct2_rule_fd","title":"ProofManagement.conjunct2_rule_fd","content":"ProofManagement.conjunct2_rule_fd \nconjunct2_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#conjunct2_rule_bk","title":"ProofManagement.conjunct2_rule_bk","content":"ProofManagement.conjunct2_rule_bk \nconjunct2_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#disj_cases_rule_fd","title":"ProofManagement.disj_cases_rule_fd","content":"ProofManagement.disj_cases_rule_fd \ndisj_cases_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#disj_cases_rule_bk","title":"ProofManagement.disj_cases_rule_bk","content":"ProofManagement.disj_cases_rule_bk \ndisj_cases_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#disj1_rule_fd","title":"ProofManagement.disj1_rule_fd","content":"ProofManagement.disj1_rule_fd \ndisj1_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#disj1_rule_bk","title":"ProofManagement.disj1_rule_bk","content":"ProofManagement.disj1_rule_bk \ndisj1_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#disj2_rule_fd","title":"ProofManagement.disj2_rule_fd","content":"ProofManagement.disj2_rule_fd \ndisj2_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#disj2_rule_bk","title":"ProofManagement.disj2_rule_bk","content":"ProofManagement.disj2_rule_bk \ndisj2_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mk_bin_rule_fd","title":"ProofManagement.mk_bin_rule_fd","content":"ProofManagement.mk_bin_rule_fd \nmk_bin_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#mk_bin_rule_bk","title":"ProofManagement.mk_bin_rule_bk","content":"ProofManagement.mk_bin_rule_bk \nmk_bin_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#select_rule_fd","title":"ProofManagement.select_rule_fd","content":"ProofManagement.select_rule_fd \nselect_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#select_rule_bk","title":"ProofManagement.select_rule_bk","content":"ProofManagement.select_rule_bk \nselect_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#exists_rule_fd","title":"ProofManagement.exists_rule_fd","content":"ProofManagement.exists_rule_fd \nexists_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#exists_rule_bk","title":"ProofManagement.exists_rule_bk","content":"ProofManagement.exists_rule_bk \nexists_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#choose_rule_fd","title":"ProofManagement.choose_rule_fd","content":"ProofManagement.choose_rule_fd \nchoose_rule_fd \n"},{"uri":"http://localhost:8901/reference/hol-proofmanagement.html#choose_rule_bk","title":"ProofManagement.choose_rule_bk","content":"ProofManagement.choose_rule_bk \nchoose_rule_bk \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html","title":"ProofTree","content":"ProofTree \n \nProofTree.Exp \nExp \nProofTree.InfRule \nInfRule \nProofTree.Proof \nProof \nProofTree.goal \ngoal \nProofTree.exp \nexp \nProofTree.is_goal \nis_goal \nProofTree.loc_thm \nloc_thm \nProofTree.loc_term \nloc_term \nProofTree.loc_goal \nloc_goal \nProofTree.lower \nlower \nProofTree.substs \nsubsts \nProofTree.replace \nreplace \nProofTree.strTolatex \nstrTolatex \nProofTree.printExp \nprintExp \nProofTree.treeToLatex \ntreeToLatex \nProofTree.view \nview \nProofTree.linearizeProof \nlinearizeProof"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#exp","title":"ProofTree.exp","content":"ProofTree.exp \nexp \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#is_goal","title":"ProofTree.is_goal","content":"ProofTree.is_goal \nis_goal \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#loc_thm","title":"ProofTree.loc_thm","content":"ProofTree.loc_thm \nloc_thm \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#loc_term","title":"ProofTree.loc_term","content":"ProofTree.loc_term \nloc_term \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#loc_goal","title":"ProofTree.loc_goal","content":"ProofTree.loc_goal \nloc_goal \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#lower","title":"ProofTree.lower","content":"ProofTree.lower \nlower \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#substs","title":"ProofTree.substs","content":"ProofTree.substs \nsubsts \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#replace","title":"ProofTree.replace","content":"ProofTree.replace \nreplace \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#strTolatex","title":"ProofTree.strTolatex","content":"ProofTree.strTolatex \nstrTolatex \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#printExp","title":"ProofTree.printExp","content":"ProofTree.printExp \nprintExp \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#treeToLatex","title":"ProofTree.treeToLatex","content":"ProofTree.treeToLatex \ntreeToLatex \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#view","title":"ProofTree.view","content":"ProofTree.view \nview \n"},{"uri":"http://localhost:8901/reference/hol-prooftree.html#linearizeProof","title":"ProofTree.linearizeProof","content":"ProofTree.linearizeProof \nlinearizeProof \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html","title":"Exp","content":"Exp \n \nExp.NullExp \nNullExp \nExp.Th \nTh \nExp.Te \nTe \nExp.Tye \nTye \nExp.TeLst \nTeLst \nExp.InstTyLst \nInstTyLst \nExp.InstTmLst \nInstTmLst \nExp.Goal \nGoal"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html#NullExp","title":"Exp.NullExp","content":"Exp.NullExp \nNullExp \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html#Th","title":"Exp.Th","content":"Exp.Th \nTh \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html#Te","title":"Exp.Te","content":"Exp.Te \nTe \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html#Tye","title":"Exp.Tye","content":"Exp.Tye \nTye \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html#TeLst","title":"Exp.TeLst","content":"Exp.TeLst \nTeLst \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html#InstTyLst","title":"Exp.InstTyLst","content":"Exp.InstTyLst \nInstTyLst \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html#InstTmLst","title":"Exp.InstTmLst","content":"Exp.InstTmLst \nInstTmLst \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-exp.html#Goal","title":"Exp.Goal","content":"Exp.Goal \nGoal \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html","title":"InfRule","content":"InfRule \n \nInfRule.NullFun \nNullFun \nInfRule.TmFn \nTmFn \nInfRule.ThmFn \nThmFn \nInfRule.ThmThmFn \nThmThmFn \nInfRule.ThmThmThmFn \nThmThmThmFn \nInfRule.TmThmFn \nTmThmFn \nInfRule.TmTmThmFn \nTmTmThmFn \nInfRule.TmThmThmFn \nTmThmThmFn \nInfRule.TmThm2ThmFn \nTmThm2ThmFn \nInfRule.ThmTmFn \nThmTmFn \nInfRule.TmLstThmFn \nTmLstThmFn \nInfRule.ThmLstFn \nThmLstFn \nInfRule.InstTyLstThmFn \nInstTyLstThmFn \nInfRule.InstTmLstThmFn \nInstTmLstThmFn"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#NullFun","title":"InfRule.NullFun","content":"InfRule.NullFun \nNullFun \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#TmFn","title":"InfRule.TmFn","content":"InfRule.TmFn \nTmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#ThmFn","title":"InfRule.ThmFn","content":"InfRule.ThmFn \nThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#ThmThmFn","title":"InfRule.ThmThmFn","content":"InfRule.ThmThmFn \nThmThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#ThmThmThmFn","title":"InfRule.ThmThmThmFn","content":"InfRule.ThmThmThmFn \nThmThmThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#TmThmFn","title":"InfRule.TmThmFn","content":"InfRule.TmThmFn \nTmThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#TmTmThmFn","title":"InfRule.TmTmThmFn","content":"InfRule.TmTmThmFn \nTmTmThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#TmThmThmFn","title":"InfRule.TmThmThmFn","content":"InfRule.TmThmThmFn \nTmThmThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#TmThm2ThmFn","title":"InfRule.TmThm2ThmFn","content":"InfRule.TmThm2ThmFn \nTmThm2ThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#ThmTmFn","title":"InfRule.ThmTmFn","content":"InfRule.ThmTmFn \nThmTmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#TmLstThmFn","title":"InfRule.TmLstThmFn","content":"InfRule.TmLstThmFn \nTmLstThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#ThmLstFn","title":"InfRule.ThmLstFn","content":"InfRule.ThmLstFn \nThmLstFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#InstTyLstThmFn","title":"InfRule.InstTyLstThmFn","content":"InfRule.InstTyLstThmFn \nInstTyLstThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-infrule.html#InstTmLstThmFn","title":"InfRule.InstTmLstThmFn","content":"InfRule.InstTmLstThmFn \nInstTmLstThmFn \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-proof.html","title":"Proof","content":"Proof \n \nProof.Item1 \nItem1 \nProof.Item2 \nItem2 \nProof.Item3 \nItem3"},{"uri":"http://localhost:8901/reference/hol-prooftree-proof.html#Item1","title":"Proof.Item1","content":"Proof.Item1 \nItem1 \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-proof.html#Item2","title":"Proof.Item2","content":"Proof.Item2 \nItem2 \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-proof.html#Item3","title":"Proof.Item3","content":"Proof.Item3 \nItem3 \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-goal.html","title":"goal","content":"goal \n \ngoal.Item1 \nItem1 \ngoal.Item2 \nItem2"},{"uri":"http://localhost:8901/reference/hol-prooftree-goal.html#Item1","title":"goal.Item1","content":"goal.Item1 \nItem1 \n"},{"uri":"http://localhost:8901/reference/hol-prooftree-goal.html#Item2","title":"goal.Item2","content":"goal.Item2 \nItem2 \n"},{"uri":"http://localhost:8901/reference/hol-reader.html","title":"Reader","content":"Reader \n\nThis module provides library support for generic reader functions that  \nprocess data from a given source and return a read item and the source  \ncorrespondingly advanced, ready for the next item to be read.  This gets\nused in the HOL quotation lexer and parsers (see \u0027Lexer\u0027 and \u0027Parser\u0027   \nmodules respectively).            \n \nReader.ReadFail \nReadFail \nReader.(@|) \n(@|) \nReader.(@!|) \n(@!|) \nReader.(!|||) \n(!|||) \nReader.(!\u003E\u003E\u003E) \n(!\u003E\u003E\u003E) \nReader.( *\u003E\u003E ) \n( *\u003E\u003E ) \nReader.( \u003E\u003E* ) \n( \u003E\u003E* ) \nReader.(|@|) \n(|@|) \nReader.( *@\u003E ) \n( *@\u003E ) \nReader.(\u003E@\u003E) \n(\u003E@\u003E) \nReader.read_list \nread_list \nReader.lookahead \nlookahead \nReader.read_with \nread_with \nReader.read_elem \nread_elem \nReader.read_elem_with \nread_elem_with \nReader.read_elem_in \nread_elem_in \nReader.read_elem_not_in \nread_elem_not_in \nReader.read_start \nread_start \nReader.read_end \nread_end"},{"uri":"http://localhost:8901/reference/hol-reader.html#(@|)","title":"Reader.(@|)","content":"Reader.(@|) \n(@|) \n\nThise functions is for performing post-processing on the result of a\nreader function. The LHS is a function that reformulates the\nresult of the RHS.\n"},{"uri":"http://localhost:8901/reference/hol-reader.html#(@!|)","title":"Reader.(@!|)","content":"Reader.(@!|) \n(@!|) \n\nThese functions are for performing post-processing on the result of a  \nreader function.  The LHS is a function that produces a   \nstring to get raised as an error message if the RHS succeeds.          \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#(!|||)","title":"Reader.(!|||)","content":"Reader.(!|||) \n(!|||) \n\nThis is for alternation.  The first reader function is tried, and if this \nproduces a ReadFail then the second reader function is tried from the same\nstarting point.\n"},{"uri":"http://localhost:8901/reference/hol-reader.html#(!\u003E\u003E\u003E)","title":"Reader.(!\u003E\u003E\u003E)","content":"Reader.(!\u003E\u003E\u003E) \n(!\u003E\u003E\u003E) \n\nThe first reader function reads an initial part, and the second reader \nfunction reads the next part, with a ReadFail raised if either reader \nraises one. The \u0027\u003E\u003E\u003E\u0027 connective returns the combined results as a pair\n"},{"uri":"http://localhost:8901/reference/hol-reader.html#( *\u003E\u003E )","title":"Reader.( *\u003E\u003E )","content":"Reader.( *\u003E\u003E ) \n( *\u003E\u003E ) \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#( \u003E\u003E* )","title":"Reader.( \u003E\u003E* )","content":"Reader.( \u003E\u003E* ) \n( \u003E\u003E* ) \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#(|@|)","title":"Reader.(|@|)","content":"Reader.(|@|) \n(|@|) \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#( *@\u003E )","title":"Reader.( *@\u003E )","content":"Reader.( *@\u003E ) \n( *@\u003E ) \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#(\u003E@\u003E)","title":"Reader.(\u003E@\u003E)","content":"Reader.(\u003E@\u003E) \n(\u003E@\u003E) \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#read_list","title":"Reader.read_list","content":"Reader.read_list \nread_list \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#lookahead","title":"Reader.lookahead","content":"Reader.lookahead \nlookahead \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#read_with","title":"Reader.read_with","content":"Reader.read_with \nread_with \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#read_elem","title":"Reader.read_elem","content":"Reader.read_elem \nread_elem \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#read_elem_with","title":"Reader.read_elem_with","content":"Reader.read_elem_with \nread_elem_with \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#read_elem_in","title":"Reader.read_elem_in","content":"Reader.read_elem_in \nread_elem_in \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#read_elem_not_in","title":"Reader.read_elem_not_in","content":"Reader.read_elem_not_in \nread_elem_not_in \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#read_start","title":"Reader.read_start","content":"Reader.read_start \nread_start \n"},{"uri":"http://localhost:8901/reference/hol-reader.html#read_end","title":"Reader.read_end","content":"Reader.read_end \nread_end \n"},{"uri":"http://localhost:8901/reference/hol-reader-readfail.html","title":"ReadFail","content":"ReadFail \n\nThis exception is dedicated to non-fatal failures in reader functions, and\nis used for simple control flow between reader connectives.  This allows  \nsimple implementation of reader connectives that trap non-fatal failures  \nand act accordingly, whilst allowing other exceptions to propagate.\n"},{"uri":"http://localhost:8901/reference/hol-store.html","title":"Store","content":"Store \n\nThis module implements databases for storing theorems and lemmas under a\nname index.  Like axioms, stored theorems are restricted to having no   \nfree variables or assumptions, whereas stored lemmas are theorems that have \nno such restrictions.                                                   \n \nStore.the_theorems \nthe_theorems \nStore.get_thm \nget_thm \nStore.get_all_thms \nget_all_thms \nStore.save_thm \nsave_thm \nStore.the_lemmas \nthe_lemmas \nStore.get_lemma \nget_lemma \nStore.get_all_lemmas \nget_all_lemmas \nStore.save_lemma \nsave_lemma"},{"uri":"http://localhost:8901/reference/hol-store.html#the_theorems","title":"Store.the_theorems","content":"Store.the_theorems \nthe_theorems \n"},{"uri":"http://localhost:8901/reference/hol-store.html#get_thm","title":"Store.get_thm","content":"Store.get_thm \nget_thm \n"},{"uri":"http://localhost:8901/reference/hol-store.html#get_all_thms","title":"Store.get_all_thms","content":"Store.get_all_thms \nget_all_thms \n"},{"uri":"http://localhost:8901/reference/hol-store.html#save_thm","title":"Store.save_thm","content":"Store.save_thm \nsave_thm \n\nThis is the theorem storage command.  It takes a string and a theorem     \nargument.  The theorem gets stored in the database under the string index.\nThe string must not be used for the name of an existing theorem (unless in\nbenign redefinition), and the theorem must not contain free variables or  \nor assumptions.                                                           \n"},{"uri":"http://localhost:8901/reference/hol-store.html#the_lemmas","title":"Store.the_lemmas","content":"Store.the_lemmas \nthe_lemmas \n"},{"uri":"http://localhost:8901/reference/hol-store.html#get_lemma","title":"Store.get_lemma","content":"Store.get_lemma \nget_lemma \n"},{"uri":"http://localhost:8901/reference/hol-store.html#get_all_lemmas","title":"Store.get_all_lemmas","content":"Store.get_all_lemmas \nget_all_lemmas \n"},{"uri":"http://localhost:8901/reference/hol-store.html#save_lemma","title":"Store.save_lemma","content":"Store.save_lemma \nsave_lemma \n"},{"uri":"http://localhost:8901/reference/hol-term.html","title":"Term","content":"Term \n\nThis module defines the internal representation of HOL terms.  This is    \ndone by defining an abstract datatype for terms, and then primitive syntax\nfunctions for constructing and destructing terms, and support for constant\ndeclaration.  The primitive syntax constructors ensure that only well-    \nformed terms can be constructed.  This module is a trusted component of   \nthe system.                                                               \n \nTerm.term \nterm \nTerm.the_consts \nthe_consts \nTerm.get_const_gtype \nget_const_gtype \nTerm.get_all_consts \nget_all_consts \nTerm.is_const_name \nis_const_name \nTerm.prim_new_const \nprim_new_const \nTerm.term_eq \nterm_eq \nTerm.term_lt \nterm_lt \nTerm.type_of \ntype_of \nTerm.mk_var \nmk_var \nTerm.dest_var \ndest_var \nTerm.is_var \nis_var \nTerm.mk_gconst \nmk_gconst \nTerm.mk_iconst \nmk_iconst \nTerm.dest_const \ndest_const \nTerm.is_const \nis_const \nTerm.mk_comb \nmk_comb \nTerm.dest_comb \ndest_comb \nTerm.is_comb \nis_comb \nTerm.mk_abs \nmk_abs \nTerm.dest_abs \ndest_abs \nTerm.is_abs \nis_abs"},{"uri":"http://localhost:8901/reference/hol-term.html#the_consts","title":"Term.the_consts","content":"Term.the_consts \nthe_consts \n"},{"uri":"http://localhost:8901/reference/hol-term.html#get_const_gtype","title":"Term.get_const_gtype","content":"Term.get_const_gtype \nget_const_gtype \n\nReturns the generic type of the constant with the supplied name. \nFails if the costant has not been declared\n"},{"uri":"http://localhost:8901/reference/hol-term.html#get_all_consts","title":"Term.get_all_consts","content":"Term.get_all_consts \nget_all_consts \n\nReturns the name and generic type of each declared constant.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#is_const_name","title":"Term.is_const_name","content":"Term.is_const_name \nis_const_name \n\nThe test for whether a given name is the name of a declared constant.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#prim_new_const","title":"Term.prim_new_const","content":"Term.prim_new_const \nprim_new_const \n                                                                         \nThis is the primitive declaration command for constants.  It takes a      \nstring and a type: the string becomes the name of a new constant in the  \ntheory, and the type becomes its generic type.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E\n\nAny name can be used for a constant, but supplying an existing constant\u0027s name \nwill cause failure.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E\n\nA note of the declaration is reported, and unit is returned.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#term_eq","title":"Term.term_eq","content":"Term.term_eq \nterm_eq \n"},{"uri":"http://localhost:8901/reference/hol-term.html#term_lt","title":"Term.term_lt","content":"Term.term_lt \nterm_lt \n"},{"uri":"http://localhost:8901/reference/hol-term.html#type_of","title":"Term.type_of","content":"Term.type_of \ntype_of \n\nA term\u0027s type is calculated ultimately from the types of its constituent \natoms.  Although potentially a derived utility, it is defined as a       \nprimitive for use in \u0027mk_comb\u0027.                                          \n"},{"uri":"http://localhost:8901/reference/hol-term.html#mk_var","title":"Term.mk_var","content":"Term.mk_var \nmk_var \n\nTakes a name and a type , with no restrictions on these arguments: any name \ncan be used for a variable, including the name of a declared constant.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#dest_var","title":"Term.dest_var","content":"Term.dest_var \ndest_var \n\nTakes a variable term and returns its name and type.\nFails if the supplied term is not a variable.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#is_var","title":"Term.is_var","content":"Term.is_var \nis_var \n\nChecks if a term is a variable term\n"},{"uri":"http://localhost:8901/reference/hol-term.html#mk_gconst","title":"Term.mk_gconst","content":"Term.mk_gconst \nmk_gconst \n\nTakes a constant name that has already been declared and returns a constant \nterm. Fails if the supplied constant name has not been declared.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#mk_iconst","title":"Term.mk_iconst","content":"Term.mk_iconst \nmk_iconst \n\nTakes a constant name and an old-to-new tyvar instantiation list, and \nreturns the constant term with its generic type\u0027s tyvars instantiated\naccordingly.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E\n\nNote that the instantiation domain is allowed to contain\ntyvars that are not in the generic type: these are just ignored.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E\n\nFails if the constant has not been declared.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#dest_const","title":"Term.dest_const","content":"Term.dest_const \ndest_const \n\nTakes a constant term and returns its name and type.\nFails if the supplied term is not a constant.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#is_const","title":"Term.is_const","content":"Term.is_const \nis_const \n\nChecks if a term is a constant term\n"},{"uri":"http://localhost:8901/reference/hol-term.html#mk_comb","title":"Term.mk_comb","content":"Term.mk_comb \nmk_comb \n\nThe primitive constructor for function application checks that the type of \nthe supplied function term is a function type with a domain type equal to  \nthe type of the argument term.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E\n\nFails if the first term is not a function or if the domain of the function \nis not equal to the argument type.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#dest_comb","title":"Term.dest_comb","content":"Term.dest_comb \ndest_comb \n\nTakes a function application term and returns its component terms.\nFails if the spupplied term is not a function application.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#is_comb","title":"Term.is_comb","content":"Term.is_comb \nis_comb \n\nChecks if a term is a function application term.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#mk_abs","title":"Term.mk_abs","content":"Term.mk_abs \nmk_abs \n\nThe primitive constructor for lambda abstraction checks that the supplied\nbinding variable is indeed a variable. Fails if the first term is not \na variable term                                  \n"},{"uri":"http://localhost:8901/reference/hol-term.html#dest_abs","title":"Term.dest_abs","content":"Term.dest_abs \ndest_abs \n\nTakes a lambda abstraction term and returns its component terms.\nFails if the supplied term is not a lambda abstraction.\n"},{"uri":"http://localhost:8901/reference/hol-term.html#is_abs","title":"Term.is_abs","content":"Term.is_abs \nis_abs \n\nChecks if a term is a function application term.\n"},{"uri":"http://localhost:8901/reference/hol-term-term.html","title":"term","content":"term \n\n This is the datatype for internal HOL terms.  It has 4 classes,          \n corresponding to the 4 primitive syntactic categories of term:\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E       \n                                                                         \n Variable - This denotes an occurrence of a variable.  It has name and  \n type attributes.  Any two occurrences of variables within a given object\n refer the same entity iff they have the same name, type and scope.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E     \n                                                                         \n Constant - This denotes an occurrence of a constant.  It has name and  \n type attributes, where the name must be a declared constant\u0027s name and  \n the type must match the declared constant\u0027s generic type.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E              \n                                                                         \n Function Application - This consists of a function subterm and an      \n argument subterm, where the function\u0027s type must be a function type with\n domain type equal to the argument\u0027s type.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E                               \n                                                                         \n Lambda Astraction - This consists of a binding variable and a body     \n subterm.  It bounds the scope of the binding variable to the body, and  \n this is the only primitive means of bounding variable scope.\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E \nterm.Tmvar \nTmvar \nterm.Tmconst \nTmconst \nterm.Tmcomb \nTmcomb \nterm.Tmabs \nTmabs"},{"uri":"http://localhost:8901/reference/hol-term-term.html#Tmvar","title":"term.Tmvar","content":"term.Tmvar \nTmvar \n"},{"uri":"http://localhost:8901/reference/hol-term-term.html#Tmconst","title":"term.Tmconst","content":"term.Tmconst \nTmconst \n"},{"uri":"http://localhost:8901/reference/hol-term-term.html#Tmcomb","title":"term.Tmcomb","content":"term.Tmcomb \nTmcomb \n"},{"uri":"http://localhost:8901/reference/hol-term-term.html#Tmabs","title":"term.Tmabs","content":"term.Tmabs \nTmabs \n"},{"uri":"http://localhost:8901/reference/hol-thm.html","title":"Thm","content":"Thm \n\nThis module defines the basic mechanisms for logical deduction and theory \nassertion.  As is characteristic of LCF-style theorem provers, this is    \ndone by defining an abstract datatype for the internal representation of  \nHOL theorems.  The primitive constructors for this datatype are limited to\nthe primitive inference rules and the primitive assertion commands.  Any  \nsubsequent theorem-creating functions must ultimately be implemented in   \nterms of these constructors.  This module is a trusted component of the   \nsystem.                                                               \n \nThm.thm \nthm \nThm.dest_thm \ndest_thm \nThm.asms \nasms \nThm.concl \nconcl \nThm.thm_eq \nthm_eq \nThm.prim_refl_conv \nprim_refl_conv \nThm.prim_beta_conv \nprim_beta_conv \nThm.prim_mk_comb_rule \nprim_mk_comb_rule \nThm.prim_mk_abs_rule \nprim_mk_abs_rule \nThm.prim_assume_rule \nprim_assume_rule \nThm.prim_disch_rule \nprim_disch_rule \nThm.prim_mp_rule \nprim_mp_rule \nThm.prim_eq_mp_rule \nprim_eq_mp_rule \nThm.prim_inst_rule \nprim_inst_rule \nThm.prim_inst_type_rule \nprim_inst_type_rule \nThm.the_axioms \nthe_axioms \nThm.get_axiom \nget_axiom \nThm.get_all_axioms \nget_all_axioms \nThm.prim_new_axiom \nprim_new_axiom \nThm.the_const_defs \nthe_const_defs \nThm.get_const_definition \nget_const_definition \nThm.get_all_const_definitions \nget_all_const_definitions \nThm.prim_new_const_definition \nprim_new_const_definition \nThm.the_const_specs \nthe_const_specs \nThm.get_const_specification_info \nget_const_specification_info \nThm.get_all_const_specification_info \nget_all_const_specification_info \nThm.get_const_specification \nget_const_specification \nThm.get_all_const_specifications \nget_all_const_specifications \nThm.prim_new_const_specification \nprim_new_const_specification \nThm.the_tyconst_defs \nthe_tyconst_defs \nThm.get_tyconst_definition_info0 \nget_tyconst_definition_info0 \nThm.get_tyconst_definition_info \nget_tyconst_definition_info \nThm.get_all_tyconst_definition_info \nget_all_tyconst_definition_info \nThm.get_tyconst_definition \nget_tyconst_definition \nThm.get_all_tyconst_definitions \nget_all_tyconst_definitions \nThm.prim_new_tyconst_definition \nprim_new_tyconst_definition"},{"uri":"http://localhost:8901/reference/hol-thm.html#dest_thm","title":"Thm.dest_thm","content":"Thm.dest_thm \ndest_thm \n\n Breaks a theorem into assumption list and conclusion.\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#asms","title":"Thm.asms","content":"Thm.asms \nasms \n\n Returns the hypotheses of a theorem.\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#concl","title":"Thm.concl","content":"Thm.concl \nconcl \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#thm_eq","title":"Thm.thm_eq","content":"Thm.thm_eq \nthm_eq \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_refl_conv","title":"Thm.prim_refl_conv","content":"Thm.prim_refl_conv \nprim_refl_conv \n\n This is the reflexivity rule for equality.  It takes a term, and returns a\n There are no restrictions on the supplied term. \n       \u0060t\u0060                    \n    --------                  \n    |- t = t  \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_beta_conv","title":"Thm.prim_beta_conv","content":"Thm.prim_beta_conv \nprim_beta_conv \n\nThis is the beta reduction rule.  It takes a lambda abstraction         \napplication term, and returns a theorem stating that the application is \nequal to the lambda abstraction body but with all occurrences of the    \nbinding variable replaced with the application\u0027s argument, under no     \nassumptions.                                                            \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_mk_comb_rule","title":"Thm.prim_mk_comb_rule","content":"Thm.prim_mk_comb_rule \nprim_mk_comb_rule \n\nThis is the equality congruence rule for function application.  It takes  \ntwo equality theorems, and applies corresponding sides of the first       \ntheorem to the second, unioning the assumptions.  The first theorem\u0027s LHS/\nRHS must be functions with domain type equal to the type of the second    \ntheorem\u0027s LHS/RHS.                                                        \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_mk_abs_rule","title":"Thm.prim_mk_abs_rule","content":"Thm.prim_mk_abs_rule \nprim_mk_abs_rule \n\nThis is the equality congruence rule for lambda abstraction.  It takes a  \nvariable and an equality theorem, and abstracts the variable from both    \nsides of the theorem.  The variable must not occur free in the assumptions\nof the supplied theorem.                                                  \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_assume_rule","title":"Thm.prim_assume_rule","content":"Thm.prim_assume_rule \nprim_assume_rule \n\nThis is the assumption rule.  It takes a boolean term, and returns a   \ntheorem stating that the term holds under the single assumption of the \nterm itself.                                                           \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_disch_rule","title":"Thm.prim_disch_rule","content":"Thm.prim_disch_rule \nprim_disch_rule \n\nThis is the implication introduction rule.  It takes a boolean term and a\ntheorem, and removes the term from the theorem\u0027s assumptions (if present)\nand adds it as an antecedent of the conclusion.  Note that the term does \nnot have to be in the assumptions of the supplied theorem for the rule to\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_mp_rule","title":"Thm.prim_mp_rule","content":"Thm.prim_mp_rule \nprim_mp_rule \n\nThis is the modus ponens rule.  It takes an implication theorem and a     \nsecond theorem, where the implication theorem\u0027s antecedent is alpha-      \nequivalent to the conclusion of the second theorem.  It returns a theorem \nstating that the implication theorem\u0027s consequent holds, under the unioned\nassumptions of the supplied theorems.                                     \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_eq_mp_rule","title":"Thm.prim_eq_mp_rule","content":"Thm.prim_eq_mp_rule \nprim_eq_mp_rule \n\nThis is the equality modus ponens rule.  It takes an equality theorem and\na second theorem, where the equality theorem\u0027s LHS is alpha-equivalent to\nthe conclusion of the second theorem.  It returns a theorem stating that \nthe equality theorem\u0027s RHS holds, under the unioned assumptions of the   \nsupplied theorems.                                                       \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_inst_rule","title":"Thm.prim_inst_rule","content":"Thm.prim_inst_rule \nprim_inst_rule \n\nThis is the variable instantiation rule.  It takes a variable            \ninstantiation list and a theorem, and performs a single parallel         \ninstantiation of the free variables in the theorem\u0027s assumptions and     \nconclusion, according to the instantiation list.  All free occurrences of\ninstantiation list domain elements in the theorem get replaced.  Each    \ninstantiation list domain element must be a variable, and each range     \nelement must have the same type as its corresponding domain element.     \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_inst_type_rule","title":"Thm.prim_inst_type_rule","content":"Thm.prim_inst_type_rule \nprim_inst_type_rule \n\nThis is the type variable instantiation rule.  It takes a type variable  \ninstantiation list and a theorem, and performs a single parallel         \ninstantiation of the type variables in the theorem\u0027s assumptions and     \nconclusion, according to the instantiation list.  All occurrences of     \ninstantiation list domain elements in the theorem get replaced.  Each    \ninstantiation list domain element must be a type variable.               \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#the_axioms","title":"Thm.the_axioms","content":"Thm.the_axioms \nthe_axioms \n\nAxioms are stored in a dynamic lookup tree, indexed by axiom name.\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_axiom","title":"Thm.get_axiom","content":"Thm.get_axiom \nget_axiom \n\nReturns the assertion theorem for the axiom with the supplied name.\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_all_axioms","title":"Thm.get_all_axioms","content":"Thm.get_all_axioms \nget_all_axioms \n\nReturns the name and assertion theorem for each asserted axiom.\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_new_axiom","title":"Thm.prim_new_axiom","content":"Thm.prim_new_axiom \nprim_new_axiom \n\nThis is the primitive axiom assertion command.  It takes a string and a   \nterm.  The string becomes the name of a new axiom in the theory, and must \nnot be an existing axiom name.  The term becomes the asserted axiom, and  \nmust be of boolean type and must not contain free variables.  The         \nresulting assertion theorem states that the supplied boolean term holds,  \nunder no assumptions.  A note of the axiom is reported, and the assertion \ntheorem is returned.                                                      \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#the_const_defs","title":"Thm.the_const_defs","content":"Thm.the_const_defs \nthe_const_defs \n\nConstant definitions are stored in a dynamic lookup tree, indexed by the\nname of the constant defined.                                           \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_const_definition","title":"Thm.get_const_definition","content":"Thm.get_const_definition \nget_const_definition \n\nReturns the assertion theorem for the defined constant with the supplied\nname.                                                                   \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_all_const_definitions","title":"Thm.get_all_const_definitions","content":"Thm.get_all_const_definitions \nget_all_const_definitions \n\nReturns the name and assertion theorem for each defined constant.\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_new_const_definition","title":"Thm.prim_new_const_definition","content":"Thm.prim_new_const_definition \nprim_new_const_definition \n\nThis is the primitive definition command for constants.  It takes a string \nand a term.  The string becomes the name of a new constant in the theory,  \nand must not be the name of an existing constant.  The term becomes the    \ndefinition term for the new constant, and must not contain free vars, and  \nmust not contain tyvars that are not in its top-level type.  The resulting \ndefinition theorem asserts that the new constant equals the supplied term, \nunder no assumptions.  A note of the definition is reported, and the       \ndefinition theorem is returned.                                            \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#the_const_specs","title":"Thm.the_const_specs","content":"Thm.the_const_specs \nthe_const_specs \n\nConstant specifications are stored in an association list, indexed by the\nlist of names of the constants defined.                                   \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_const_specification_info","title":"Thm.get_const_specification_info","content":"Thm.get_const_specification_info \nget_const_specification_info \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_all_const_specification_info","title":"Thm.get_all_const_specification_info","content":"Thm.get_all_const_specification_info \nget_all_const_specification_info \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_const_specification","title":"Thm.get_const_specification","content":"Thm.get_const_specification \nget_const_specification \n\nReturns the assertion theorem for the specified constant with the supplied\nname.                                                                     \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_all_const_specifications","title":"Thm.get_all_const_specifications","content":"Thm.get_all_const_specifications \nget_all_const_specifications \n\nReturns the constant names and assertion theorem for each group of \nspecified constants.\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_new_const_specification","title":"Thm.prim_new_const_specification","content":"Thm.prim_new_const_specification \nprim_new_const_specification \n\nThis is the primitive specification command for constants.  It takes a    \nnon-empty string list and an existentially quantified theorem.  The       \nstrings correspond one-to-one to the names of the new constants to be     \nadded to the theory, and must not include any existing constant names.    \nThey also correspond one-to-one to the outer-quantified variables of the  \nsupplied existential theorem, in the same order, although they potentially\nhave different names.  The supplied existential theorem must have no free \nvariables and no assumptions.  Furthermore, its outer-quantified variables\nmust each have the same type variables, and the body of the existential   \nmust not involve any other type variables.                                \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#the_tyconst_defs","title":"Thm.the_tyconst_defs","content":"Thm.the_tyconst_defs \nthe_tyconst_defs \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_tyconst_definition_info0","title":"Thm.get_tyconst_definition_info0","content":"Thm.get_tyconst_definition_info0 \nget_tyconst_definition_info0 \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_tyconst_definition_info","title":"Thm.get_tyconst_definition_info","content":"Thm.get_tyconst_definition_info \nget_tyconst_definition_info \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_all_tyconst_definition_info","title":"Thm.get_all_tyconst_definition_info","content":"Thm.get_all_tyconst_definition_info \nget_all_tyconst_definition_info \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_tyconst_definition","title":"Thm.get_tyconst_definition","content":"Thm.get_tyconst_definition \nget_tyconst_definition \n\nReturns the assertion theorem for the defined type constant with the\nsupplied name. \n"},{"uri":"http://localhost:8901/reference/hol-thm.html#get_all_tyconst_definitions","title":"Thm.get_all_tyconst_definitions","content":"Thm.get_all_tyconst_definitions \nget_all_tyconst_definitions \n\nReturns the name and assertion theorem for each defined type constant.\n"},{"uri":"http://localhost:8901/reference/hol-thm.html#prim_new_tyconst_definition","title":"Thm.prim_new_tyconst_definition","content":"Thm.prim_new_tyconst_definition \nprim_new_tyconst_definition \n\nThis is the primitive definition command for type constants.  It takes a  \nstring and a theorem.  The string becomes the name of a new type constant \nin the theory, and must not be the name of an existing type constant.  The\ntheorem argument must have no assumptions and a conclusion of the form    \n\u0060?v. P v\u0060, where \u0060P\u0060 is the characteristic function (prescribing the      \nsubset of the representation type that is in bijection with a general     \ninstance of the new type constant), and the theorem itself establishes    \nthat the subset is non-empty.  The predicate \u0060P\u0060 must not contain free    \nvariables, and its number of type variables becomes the arity of the new  \ntype constant.                                                            \n"},{"uri":"http://localhost:8901/reference/hol-thm-thm.html","title":"thm","content":"thm \n\nThis is the datatype for internal HOL theorems.  A theorem consists of a\nlist of assumptions and a conclusion, all of which are boolean terms.   \n \nthm.Theorem \nTheorem"},{"uri":"http://localhost:8901/reference/hol-thm-thm.html#Theorem","title":"thm.Theorem","content":"thm.Theorem \nTheorem \n"},{"uri":"http://localhost:8901/reference/hol-type.html","title":"Type","content":"Type \n\nThis module defines the internal representation of HOL types.  This is    \ndone by defining an abstract datatype for types, and then primitive syntax\nfunctions for constructing and destructing types, and support for type    \nconstant declaration.  The primitive syntax constructors ensure that only \nwell-formed types can be constructed.  This module is a trusted component \n \nType.hol_type \nhol_type \nType.the_tyconsts \nthe_tyconsts \nType.prim_get_tyconst_arity \nprim_get_tyconst_arity \nType.prim_get_all_tyconsts \nprim_get_all_tyconsts \nType.is_tyconst_name \nis_tyconst_name \nType.prim_new_tyconst \nprim_new_tyconst \nType.mk_var_type \nmk_var_type \nType.dest_var_type \ndest_var_type \nType.is_var_type \nis_var_type \nType.mk_comp_type \nmk_comp_type \nType.dest_comp_type \ndest_comp_type \nType.is_comp_type \nis_comp_type \nType.type_eq \ntype_eq \nType.type_lt \ntype_lt \nType.mk_fun_type \nmk_fun_type \nType.dest_fun_type \ndest_fun_type \nType.is_fun_type \nis_fun_type \nType.type_inst0 \ntype_inst0 \nType.type_inst \ntype_inst"},{"uri":"http://localhost:8901/reference/hol-type.html#the_tyconsts","title":"Type.the_tyconsts","content":"Type.the_tyconsts \nthe_tyconsts \n"},{"uri":"http://localhost:8901/reference/hol-type.html#prim_get_tyconst_arity","title":"Type.prim_get_tyconst_arity","content":"Type.prim_get_tyconst_arity \nprim_get_tyconst_arity \n\nReturns the arity of the type constant with the supplied name as an\narbitrary precision integer.\n"},{"uri":"http://localhost:8901/reference/hol-type.html#prim_get_all_tyconsts","title":"Type.prim_get_all_tyconsts","content":"Type.prim_get_all_tyconsts \nprim_get_all_tyconsts \n\nReturns the name and arity of each declared type constant.  Arities are \ngiven as arbitrary precision integers.\n"},{"uri":"http://localhost:8901/reference/hol-type.html#is_tyconst_name","title":"Type.is_tyconst_name","content":"Type.is_tyconst_name \nis_tyconst_name \n\nThe test for whether a given name is the name of a declared type constant.\n"},{"uri":"http://localhost:8901/reference/hol-type.html#prim_new_tyconst","title":"Type.prim_new_tyconst","content":"Type.prim_new_tyconst \nprim_new_tyconst \n\nThis is the primitive declaration command for type constants.  It takes a \nstring and an arbitrary precision integer.  The string becomes the name of\na new type constant in the theory, and the integer becomes its arity.  Any\nname can be used for a type constant, but supplying an existing type      \nconstant\u0027s name will cause failure.  A note of the declaration is         \nreported, and unit is returned.\n"},{"uri":"http://localhost:8901/reference/hol-type.html#mk_var_type","title":"Type.mk_var_type","content":"Type.mk_var_type \nmk_var_type \n"},{"uri":"http://localhost:8901/reference/hol-type.html#dest_var_type","title":"Type.dest_var_type","content":"Type.dest_var_type \ndest_var_type \n"},{"uri":"http://localhost:8901/reference/hol-type.html#is_var_type","title":"Type.is_var_type","content":"Type.is_var_type \nis_var_type \n"},{"uri":"http://localhost:8901/reference/hol-type.html#mk_comp_type","title":"Type.mk_comp_type","content":"Type.mk_comp_type \nmk_comp_type \n"},{"uri":"http://localhost:8901/reference/hol-type.html#dest_comp_type","title":"Type.dest_comp_type","content":"Type.dest_comp_type \ndest_comp_type \n"},{"uri":"http://localhost:8901/reference/hol-type.html#is_comp_type","title":"Type.is_comp_type","content":"Type.is_comp_type \nis_comp_type \n"},{"uri":"http://localhost:8901/reference/hol-type.html#type_eq","title":"Type.type_eq","content":"Type.type_eq \ntype_eq \n\nChecks that the two terms are of the same type\n"},{"uri":"http://localhost:8901/reference/hol-type.html#type_lt","title":"Type.type_lt","content":"Type.type_lt \ntype_lt \n"},{"uri":"http://localhost:8901/reference/hol-type.html#mk_fun_type","title":"Type.mk_fun_type","content":"Type.mk_fun_type \nmk_fun_type \n\nCreates a function type given a domain and range\n"},{"uri":"http://localhost:8901/reference/hol-type.html#dest_fun_type","title":"Type.dest_fun_type","content":"Type.dest_fun_type \ndest_fun_type \n\nReturns domain and range of a given function type\n"},{"uri":"http://localhost:8901/reference/hol-type.html#is_fun_type","title":"Type.is_fun_type","content":"Type.is_fun_type \nis_fun_type \n\nChecks if a given type is a function type\n"},{"uri":"http://localhost:8901/reference/hol-type.html#type_inst0","title":"Type.type_inst0","content":"Type.type_inst0 \ntype_inst0 \n"},{"uri":"http://localhost:8901/reference/hol-type.html#type_inst","title":"Type.type_inst","content":"Type.type_inst \ntype_inst \n"},{"uri":"http://localhost:8901/reference/hol-type-hol_type.html","title":"hol_type","content":"hol_type \n\n This is the datatype for internal HOL types.  It has 2 classes,           \n corresponding to the 2 primitive syntactic categories of types:\n \u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E\n                                                                  \n Type Variable denotes an occurrence of a type variable.  It has  \n just a name attribute.  Any two occurrences of type variables within a   \n given object represent the same entity iff they have the same name.\n \u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cbr /\u003E\n                                                               \n Compound Type denotes an instance of a type constant.  It has    \n name and type parameter list attributes, where the name must be the name \n of a declared type constant, and the parameter list length must equal the\n declared type constant\u0027s arity.\n  \nhol_type.Tyvar \nTyvar \nhol_type.Tycomp \nTycomp"},{"uri":"http://localhost:8901/reference/hol-type-hol_type.html#Tyvar","title":"hol_type.Tyvar","content":"hol_type.Tyvar \nTyvar \n"},{"uri":"http://localhost:8901/reference/hol-type-hol_type.html#Tycomp","title":"hol_type.Tycomp","content":"hol_type.Tycomp \nTycomp \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html","title":"TypeAnal","content":"TypeAnal \n\nThis module defines type analysis routines for pretypes and preterms, used\nin parsing and printing type/term quotations.  The primary routines are   \ndetyping, type unification, type inference and type consistency check.    \nThis module is used in the implementation of the pretty printer, and is a \ntrusted component of the system.                              \n \nTypeAnal.varenv \nvarenv \nTypeAnal.type_err \ntype_err \nTypeAnal.type_fail_info \ntype_fail_info \nTypeAnal.arity_error \narity_error \nTypeAnal.fun_error1 \nfun_error1 \nTypeAnal.fun_error2 \nfun_error2 \nTypeAnal.overload_error \noverload_error \nTypeAnal.annot_error \nannot_error \nTypeAnal.types_error \ntypes_error \nTypeAnal.pretype_ok \npretype_ok \nTypeAnal.check_pretype \ncheck_pretype \nTypeAnal.pretype_gvar_counter \npretype_gvar_counter \nTypeAnal.reset_pretype_gvar_counter \nreset_pretype_gvar_counter \nTypeAnal.new_pretype_gvar \nnew_pretype_gvar \nTypeAnal.generate_var_preterm \ngenerate_var_preterm \nTypeAnal.generate_const_preterm \ngenerate_const_preterm \nTypeAnal.detype_preterm0 \ndetype_preterm0 \nTypeAnal.detype_preterm \ndetype_preterm \nTypeAnal.basic_unify_pretypes \nbasic_unify_pretypes \nTypeAnal.theta_inst \ntheta_inst \nTypeAnal.theta_closure \ntheta_closure \nTypeAnal.unify_pretypes0 \nunify_pretypes0 \nTypeAnal.unify_pretypes \nunify_pretypes \nTypeAnal.unify_pretype_list \nunify_pretype_list \nTypeAnal.unify_pretype_pairs \nunify_pretype_pairs \nTypeAnal.varenv_inst \nvarenv_inst \nTypeAnal.varenv_subtract \nvarenv_subtract \nTypeAnal.varenv_union \nvarenv_union \nTypeAnal.close_name0 \nclose_name0 \nTypeAnal.close_name \nclose_name \nTypeAnal.close_all_names \nclose_all_names \nTypeAnal.infer_pretypes0 \ninfer_pretypes0 \nTypeAnal.infer_pretypes \ninfer_pretypes \nTypeAnal.resolve_preterm \nresolve_preterm \nTypeAnal.check_preterm_annotations \ncheck_preterm_annotations"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#type_err","title":"TypeAnal.type_err","content":"TypeAnal.type_err \ntype_err \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#type_fail_info","title":"TypeAnal.type_fail_info","content":"TypeAnal.type_fail_info \ntype_fail_info \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#arity_error","title":"TypeAnal.arity_error","content":"TypeAnal.arity_error \narity_error \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#fun_error1","title":"TypeAnal.fun_error1","content":"TypeAnal.fun_error1 \nfun_error1 \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#fun_error2","title":"TypeAnal.fun_error2","content":"TypeAnal.fun_error2 \nfun_error2 \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#overload_error","title":"TypeAnal.overload_error","content":"TypeAnal.overload_error \noverload_error \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#annot_error","title":"TypeAnal.annot_error","content":"TypeAnal.annot_error \nannot_error \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#types_error","title":"TypeAnal.types_error","content":"TypeAnal.types_error \ntypes_error \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#pretype_ok","title":"TypeAnal.pretype_ok","content":"TypeAnal.pretype_ok \npretype_ok \n\nChecks that the supplied pretype is well-formed, by checking that all\ncompound types have the correct arity for the type constant involved.     \nThis gets used on stand-alone type quotations and on types embedded as    \ntype annotations in term quotations.                                      \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#check_pretype","title":"TypeAnal.check_pretype","content":"TypeAnal.check_pretype \ncheck_pretype \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#pretype_gvar_counter","title":"TypeAnal.pretype_gvar_counter","content":"TypeAnal.pretype_gvar_counter \npretype_gvar_counter \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#reset_pretype_gvar_counter","title":"TypeAnal.reset_pretype_gvar_counter","content":"TypeAnal.reset_pretype_gvar_counter \nreset_pretype_gvar_counter \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#new_pretype_gvar","title":"TypeAnal.new_pretype_gvar","content":"TypeAnal.new_pretype_gvar \nnew_pretype_gvar \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#generate_var_preterm","title":"TypeAnal.generate_var_preterm","content":"TypeAnal.generate_var_preterm \ngenerate_var_preterm \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#generate_const_preterm","title":"TypeAnal.generate_const_preterm","content":"TypeAnal.generate_const_preterm \ngenerate_const_preterm \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#detype_preterm0","title":"TypeAnal.detype_preterm0","content":"TypeAnal.detype_preterm0 \ndetype_preterm0 \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#detype_preterm","title":"TypeAnal.detype_preterm","content":"TypeAnal.detype_preterm \ndetype_preterm \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#basic_unify_pretypes","title":"TypeAnal.basic_unify_pretypes","content":"TypeAnal.basic_unify_pretypes \nbasic_unify_pretypes \n\nThis takes two pretypes and returns an old-to-new instn list for generated\ntyvars, calculated by comparing corresponding subcomponents of the        \npretypes.  This instn list is not necessarily closed (i.e. it may need to \nbe applied repeatedly until it makes no change) and may contain           \ninconsistencies when when the two pretypes cannot be unified (instead of  \nfailing).  These are dealt with by instantiation closure (see below).     \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#theta_inst","title":"TypeAnal.theta_inst","content":"TypeAnal.theta_inst \ntheta_inst \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#theta_closure","title":"TypeAnal.theta_closure","content":"TypeAnal.theta_closure \ntheta_closure \n\nTakes an existing closed pretype instn list \u0027theta0\u0027 and a \nsecond (not necessarily closed or consistent) pretype instn list \u0027theta\u0027,\nand incorporates \u0027theta\u0027 into \u0027theta0\u0027, resulting in either a new closed \ninstn list or failure (if inconsistencies exist in \u0027theta\u0027 wrt \u0027theta0\u0027).\n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#unify_pretypes0","title":"TypeAnal.unify_pretypes0","content":"TypeAnal.unify_pretypes0 \nunify_pretypes0 \n\nUnifies any generated tyvars in input pretypes \u0027pty1\u0027 and \u0027pty2\u0027, to \nresult in either a closed pretype instn list for making them equal, or    \nfailure (when the pretypes cannot be unified).  In \u0027unify_pretypes0\u0027, the \nunification is carried out wrt input pretype instn list \u0027theta0\u0027, and the \nresult incorporates \u0027theta0\u0027 (but with its range instantiated according to\nthe unification).  Note that \u0027theta0\u0027 is assumed to be closed.            \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#unify_pretypes","title":"TypeAnal.unify_pretypes","content":"TypeAnal.unify_pretypes \nunify_pretypes \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#unify_pretype_list","title":"TypeAnal.unify_pretype_list","content":"TypeAnal.unify_pretype_list \nunify_pretype_list \n\nUnifies all pretypes in the supplied list with each other,   \nincorporating the result into existing closed instn list \u0027theta0\u0027.\n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#unify_pretype_pairs","title":"TypeAnal.unify_pretype_pairs","content":"TypeAnal.unify_pretype_pairs \nunify_pretype_pairs \n\nUnifies the left pretype with the right pretype of each pair in the\nsupplied list, incorporating all the results into existing closed instn \nlist \u0027theta0\u0027.                                                          \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#varenv_inst","title":"TypeAnal.varenv_inst","content":"TypeAnal.varenv_inst \nvarenv_inst \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#varenv_subtract","title":"TypeAnal.varenv_subtract","content":"TypeAnal.varenv_subtract \nvarenv_subtract \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#varenv_union","title":"TypeAnal.varenv_union","content":"TypeAnal.varenv_union \nvarenv_union \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#close_name0","title":"TypeAnal.close_name0","content":"TypeAnal.close_name0 \nclose_name0 \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#close_name","title":"TypeAnal.close_name","content":"TypeAnal.close_name \nclose_name \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#close_all_names","title":"TypeAnal.close_all_names","content":"TypeAnal.close_all_names \nclose_all_names \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#infer_pretypes0","title":"TypeAnal.infer_pretypes0","content":"TypeAnal.infer_pretypes0 \ninfer_pretypes0 \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#infer_pretypes","title":"TypeAnal.infer_pretypes","content":"TypeAnal.infer_pretypes \ninfer_pretypes \n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#resolve_preterm","title":"TypeAnal.resolve_preterm","content":"TypeAnal.resolve_preterm \nresolve_preterm \n\nReplaces the generated tyvars in the supplied preterm with\ntheir most general valid pretypes, deduced from type inference.  Note that\nthe preterm input is assumed to have been detyped.\n"},{"uri":"http://localhost:8901/reference/hol-typeanal.html#check_preterm_annotations","title":"TypeAnal.check_preterm_annotations","content":"TypeAnal.check_preterm_annotations \ncheck_preterm_annotations \n"},{"uri":"http://localhost:8901/reference/hol-typeanal-varenv.html","title":"varenv","content":"varenv \n \nvarenv.Tail \nTail \nvarenv.Length \nLength \nvarenv.Head \nHead \nvarenv.Item \nItem \nvarenv.IsEmpty \nIsEmpty \nvarenv.Empty \nEmpty"},{"uri":"http://localhost:8901/reference/hol-typeanal-varenv.html#Tail","title":"varenv.Tail","content":"varenv.Tail \nTail \n"},{"uri":"http://localhost:8901/reference/hol-typeanal-varenv.html#Length","title":"varenv.Length","content":"varenv.Length \nLength \n"},{"uri":"http://localhost:8901/reference/hol-typeanal-varenv.html#Head","title":"varenv.Head","content":"varenv.Head \nHead \n"},{"uri":"http://localhost:8901/reference/hol-typeanal-varenv.html#Item","title":"varenv.Item","content":"varenv.Item \nItem \n"},{"uri":"http://localhost:8901/reference/hol-typeanal-varenv.html#IsEmpty","title":"varenv.IsEmpty","content":"varenv.IsEmpty \nIsEmpty \n"},{"uri":"http://localhost:8901/reference/hol-typeanal-varenv.html#Empty","title":"varenv.Empty","content":"varenv.Empty \nEmpty \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html","title":"TypeAnnot","content":"TypeAnnot \n\nThis module defines type analysis routines for pretypes and preterms, used\nin parsing and printing type/term quotations.  The primary routines are   \ndetyping, type unification, type inference and type consistency check.    \nThis module is used in the implementation of the pretty printer, and is a \ntrusted component of the system.                                            \n \nTypeAnnot.domain_restrict \ndomain_restrict \nTypeAnnot.preterm_var \npreterm_var \nTypeAnnot.var_equiv1 \nvar_equiv1 \nTypeAnnot.var_equiv2 \nvar_equiv2 \nTypeAnnot.atom_type_complexity \natom_type_complexity \nTypeAnnot.sort_by_type_complexity \nsort_by_type_complexity \nTypeAnnot.unresolved_atoms \nunresolved_atoms \nTypeAnnot.ordered_unresolved_atoms \nordered_unresolved_atoms \nTypeAnnot.full_annotate_preterm \nfull_annotate_preterm \nTypeAnnot.sift_atoms0 \nsift_atoms0 \nTypeAnnot.sift_atoms \nsift_atoms \nTypeAnnot.closure_info \nclosure_info \nTypeAnnot.atom_info0 \natom_info0 \nTypeAnnot.atom_info \natom_info \nTypeAnnot.pick_atom_coverage \npick_atom_coverage \nTypeAnnot.annotate_preterm_atoms \nannotate_preterm_atoms \nTypeAnnot.min_annotate_preterm \nmin_annotate_preterm"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#domain_restrict","title":"TypeAnnot.domain_restrict","content":"TypeAnnot.domain_restrict \ndomain_restrict \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#preterm_var","title":"TypeAnnot.preterm_var","content":"TypeAnnot.preterm_var \npreterm_var \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#var_equiv1","title":"TypeAnnot.var_equiv1","content":"TypeAnnot.var_equiv1 \nvar_equiv1 \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#var_equiv2","title":"TypeAnnot.var_equiv2","content":"TypeAnnot.var_equiv2 \nvar_equiv2 \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#atom_type_complexity","title":"TypeAnnot.atom_type_complexity","content":"TypeAnnot.atom_type_complexity \natom_type_complexity \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#sort_by_type_complexity","title":"TypeAnnot.sort_by_type_complexity","content":"TypeAnnot.sort_by_type_complexity \nsort_by_type_complexity \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#unresolved_atoms","title":"TypeAnnot.unresolved_atoms","content":"TypeAnnot.unresolved_atoms \nunresolved_atoms \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#ordered_unresolved_atoms","title":"TypeAnnot.ordered_unresolved_atoms","content":"TypeAnnot.ordered_unresolved_atoms \nordered_unresolved_atoms \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#full_annotate_preterm","title":"TypeAnnot.full_annotate_preterm","content":"TypeAnnot.full_annotate_preterm \nfull_annotate_preterm \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#sift_atoms0","title":"TypeAnnot.sift_atoms0","content":"TypeAnnot.sift_atoms0 \nsift_atoms0 \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#sift_atoms","title":"TypeAnnot.sift_atoms","content":"TypeAnnot.sift_atoms \nsift_atoms \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#closure_info","title":"TypeAnnot.closure_info","content":"TypeAnnot.closure_info \nclosure_info \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#atom_info0","title":"TypeAnnot.atom_info0","content":"TypeAnnot.atom_info0 \natom_info0 \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#atom_info","title":"TypeAnnot.atom_info","content":"TypeAnnot.atom_info \natom_info \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#pick_atom_coverage","title":"TypeAnnot.pick_atom_coverage","content":"TypeAnnot.pick_atom_coverage \npick_atom_coverage \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#annotate_preterm_atoms","title":"TypeAnnot.annotate_preterm_atoms","content":"TypeAnnot.annotate_preterm_atoms \nannotate_preterm_atoms \n\nThis function transforms preterm \u0027ptm\u0027 by adding type annotations for    \natoms from \u0027atms\u0027 with types looked up from instn list \u0027thetaC\u0027.  Note   \nthat the preterm will already have been detyped, and that the resulting  \ngenerated tyvars remain in the preterm until now, and so each atom in the\natom list uniquely identifies a specific atom within the preterm.  The   \nresulting type-annotated preterm also has its original generated tyvars  \nfrom detyping, but the added type annotations on atoms give all the      \ninformation required to remove ambiguity in the printed quotation.       \n"},{"uri":"http://localhost:8901/reference/hol-typeannot.html#min_annotate_preterm","title":"TypeAnnot.min_annotate_preterm","content":"TypeAnnot.min_annotate_preterm \nmin_annotate_preterm \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html","title":"Utils1","content":"Utils1 \n\nThis module defines various basic operations on types and terms that get \nused in the implementation of the primitive inference rules and primitive\nassertion commands in the \u0027Thm\u0027 module.  This module is a trusted        \ncomponent of the system.\n \nUtils1.Clash \nClash \nUtils1.destructed_term \ndestructed_term \nUtils1.destructed_type \ndestructed_type \nUtils1.dest_type \ndest_type \nUtils1.is_bool_type \nis_bool_type \nUtils1.a_ty \na_ty \nUtils1.b_ty \nb_ty \nUtils1.c_ty \nc_ty \nUtils1.type_tyvars \ntype_tyvars \nUtils1.type_match0 \ntype_match0 \nUtils1.type_match \ntype_match \nUtils1.dest_term \ndest_term \nUtils1.mk_const \nmk_const \nUtils1.const_name \nconst_name \nUtils1.const_type \nconst_type \nUtils1.var_name \nvar_name \nUtils1.var_type \nvar_type \nUtils1.list_mk_comb \nlist_mk_comb \nUtils1.mk_bin \nmk_bin \nUtils1.dest_bin \ndest_bin \nUtils1.is_bin \nis_bin \nUtils1.dest_cbin \ndest_cbin \nUtils1.mk_binder \nmk_binder \nUtils1.dest_binder \ndest_binder \nUtils1.dest_cbinder \ndest_cbinder \nUtils1.is_binder \nis_binder \nUtils1.is_bool_term \nis_bool_term \nUtils1.mk_eq \nmk_eq \nUtils1.dest_eq \ndest_eq \nUtils1.is_eq \nis_eq \nUtils1.mk_imp \nmk_imp \nUtils1.dest_imp \ndest_imp \nUtils1.is_imp \nis_imp \nUtils1.mk_exists \nmk_exists \nUtils1.list_mk_exists \nlist_mk_exists \nUtils1.dest_exists \ndest_exists \nUtils1.strip_exists \nstrip_exists \nUtils1.is_exists \nis_exists \nUtils1.term_tyvars \nterm_tyvars \nUtils1.alpha_eq0 \nalpha_eq0 \nUtils1.alpha_eq \nalpha_eq \nUtils1.free_vars \nfree_vars \nUtils1.var_free_in0 \nvar_free_in0 \nUtils1.var_free_in \nvar_free_in \nUtils1.variant \nvariant \nUtils1.cvariant_name \ncvariant_name \nUtils1.cvariant \ncvariant \nUtils1.var_inst0 \nvar_inst0 \nUtils1.var_inst \nvar_inst \nUtils1.tyvar_inst0 \ntyvar_inst0 \nUtils1.tyvar_inst \ntyvar_inst"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_type","title":"Utils1.dest_type","content":"Utils1.dest_type \ndest_type \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#is_bool_type","title":"Utils1.is_bool_type","content":"Utils1.is_bool_type \nis_bool_type \n\nA discriminator for the boolean base type\n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#a_ty","title":"Utils1.a_ty","content":"Utils1.a_ty \na_ty \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#b_ty","title":"Utils1.b_ty","content":"Utils1.b_ty \nb_ty \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#c_ty","title":"Utils1.c_ty","content":"Utils1.c_ty \nc_ty \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#type_tyvars","title":"Utils1.type_tyvars","content":"Utils1.type_tyvars \ntype_tyvars \n\nLists all the type variables that occur in a type.\n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#type_match0","title":"Utils1.type_match0","content":"Utils1.type_match0 \ntype_match0 \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#type_match","title":"Utils1.type_match","content":"Utils1.type_match \ntype_match \n\nTakes a type pattern and a type match, and returns an old-to-new  \ntyvar instn list for tyvars in the type pattern to make it equal to the\nmatch.  A failure is raised if the match doesn\u0027t fit the pattern.\n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_term","title":"Utils1.dest_term","content":"Utils1.dest_term \ndest_term \n\nConverts a term in a destructed term\n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#mk_const","title":"Utils1.mk_const","content":"Utils1.mk_const \nmk_const \n\nA derived constructor for constants.  It takes a constant \nname and a type (defined in the type constants db), where the type must be a valid match for the constant\u0027s  \ngeneric type (defined in the term constants db). It returns the constant with \nthe supplied type as its type.\n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#const_name","title":"Utils1.const_name","content":"Utils1.const_name \nconst_name \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#const_type","title":"Utils1.const_type","content":"Utils1.const_type \nconst_type \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#var_name","title":"Utils1.var_name","content":"Utils1.var_name \nvar_name \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#var_type","title":"Utils1.var_type","content":"Utils1.var_type \nvar_type \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#list_mk_comb","title":"Utils1.list_mk_comb","content":"Utils1.list_mk_comb \nlist_mk_comb \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#mk_bin","title":"Utils1.mk_bin","content":"Utils1.mk_bin \nmk_bin \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_bin","title":"Utils1.dest_bin","content":"Utils1.dest_bin \ndest_bin \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#is_bin","title":"Utils1.is_bin","content":"Utils1.is_bin \nis_bin \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_cbin","title":"Utils1.dest_cbin","content":"Utils1.dest_cbin \ndest_cbin \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#mk_binder","title":"Utils1.mk_binder","content":"Utils1.mk_binder \nmk_binder \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_binder","title":"Utils1.dest_binder","content":"Utils1.dest_binder \ndest_binder \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_cbinder","title":"Utils1.dest_cbinder","content":"Utils1.dest_cbinder \ndest_cbinder \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#is_binder","title":"Utils1.is_binder","content":"Utils1.is_binder \nis_binder \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#is_bool_term","title":"Utils1.is_bool_term","content":"Utils1.is_bool_term \nis_bool_term \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#mk_eq","title":"Utils1.mk_eq","content":"Utils1.mk_eq \nmk_eq \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_eq","title":"Utils1.dest_eq","content":"Utils1.dest_eq \ndest_eq \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#is_eq","title":"Utils1.is_eq","content":"Utils1.is_eq \nis_eq \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#mk_imp","title":"Utils1.mk_imp","content":"Utils1.mk_imp \nmk_imp \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_imp","title":"Utils1.dest_imp","content":"Utils1.dest_imp \ndest_imp \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#is_imp","title":"Utils1.is_imp","content":"Utils1.is_imp \nis_imp \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#mk_exists","title":"Utils1.mk_exists","content":"Utils1.mk_exists \nmk_exists \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#list_mk_exists","title":"Utils1.list_mk_exists","content":"Utils1.list_mk_exists \nlist_mk_exists \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#dest_exists","title":"Utils1.dest_exists","content":"Utils1.dest_exists \ndest_exists \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#strip_exists","title":"Utils1.strip_exists","content":"Utils1.strip_exists \nstrip_exists \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#is_exists","title":"Utils1.is_exists","content":"Utils1.is_exists \nis_exists \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#term_tyvars","title":"Utils1.term_tyvars","content":"Utils1.term_tyvars \nterm_tyvars \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#alpha_eq0","title":"Utils1.alpha_eq0","content":"Utils1.alpha_eq0 \nalpha_eq0 \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#alpha_eq","title":"Utils1.alpha_eq","content":"Utils1.alpha_eq \nalpha_eq \n\nTwo terms are alpha-equivalent iff they are equal modulo names chosen for\nbound variable (i.e. ignoring the differences in the names of bound variables)\n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#free_vars","title":"Utils1.free_vars","content":"Utils1.free_vars \nfree_vars \n\nExtracts the free variables in a term: those that occur in the term and \nare unbounded by any lambda abstraction\n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#var_free_in0","title":"Utils1.var_free_in0","content":"Utils1.var_free_in0 \nvar_free_in0 \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#var_free_in","title":"Utils1.var_free_in","content":"Utils1.var_free_in \nvar_free_in \n\nChecks if a variable occurs free in a term\n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#variant","title":"Utils1.variant","content":"Utils1.variant \nvariant \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#cvariant_name","title":"Utils1.cvariant_name","content":"Utils1.cvariant_name \ncvariant_name \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#cvariant","title":"Utils1.cvariant","content":"Utils1.cvariant \ncvariant \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#var_inst0","title":"Utils1.var_inst0","content":"Utils1.var_inst0 \nvar_inst0 \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#var_inst","title":"Utils1.var_inst","content":"Utils1.var_inst \nvar_inst \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#tyvar_inst0","title":"Utils1.tyvar_inst0","content":"Utils1.tyvar_inst0 \ntyvar_inst0 \n"},{"uri":"http://localhost:8901/reference/hol-utils1.html#tyvar_inst","title":"Utils1.tyvar_inst","content":"Utils1.tyvar_inst \ntyvar_inst \n"},{"uri":"http://localhost:8901/reference/hol-utils1-clash.html","title":"Clash","content":"Clash \n \nClash.Data0 \nData0"},{"uri":"http://localhost:8901/reference/hol-utils1-clash.html#Data0","title":"Clash.Data0","content":"Clash.Data0 \nData0 \n"},{"uri":"http://localhost:8901/reference/hol-utils1-destructed_term.html","title":"destructed_term","content":"destructed_term \n \ndestructed_term.Term_var \nTerm_var \ndestructed_term.Term_const \nTerm_const \ndestructed_term.Term_comb \nTerm_comb \ndestructed_term.Term_abs \nTerm_abs"},{"uri":"http://localhost:8901/reference/hol-utils1-destructed_term.html#Term_var","title":"destructed_term.Term_var","content":"destructed_term.Term_var \nTerm_var \n"},{"uri":"http://localhost:8901/reference/hol-utils1-destructed_term.html#Term_const","title":"destructed_term.Term_const","content":"destructed_term.Term_const \nTerm_const \n"},{"uri":"http://localhost:8901/reference/hol-utils1-destructed_term.html#Term_comb","title":"destructed_term.Term_comb","content":"destructed_term.Term_comb \nTerm_comb \n"},{"uri":"http://localhost:8901/reference/hol-utils1-destructed_term.html#Term_abs","title":"destructed_term.Term_abs","content":"destructed_term.Term_abs \nTerm_abs \n"},{"uri":"http://localhost:8901/reference/hol-utils1-destructed_type.html","title":"destructed_type","content":"destructed_type \n \ndestructed_type.Type_var \nType_var \ndestructed_type.Type_comp \nType_comp"},{"uri":"http://localhost:8901/reference/hol-utils1-destructed_type.html#Type_var","title":"destructed_type.Type_var","content":"destructed_type.Type_var \nType_var \n"},{"uri":"http://localhost:8901/reference/hol-utils1-destructed_type.html#Type_comp","title":"destructed_type.Type_comp","content":"destructed_type.Type_comp \nType_comp \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html","title":"Utils2","content":"Utils2 \n\nThis module defines various basic useful operations on types, terms and theorems. \n \nUtils2.Clash \nClash \nUtils2.list_mk_fun_type \nlist_mk_fun_type \nUtils2.strip_fun_type \nstrip_fun_type \nUtils2.rator \nrator \nUtils2.rand \nrand \nUtils2.strip_comb \nstrip_comb \nUtils2.list_mk_abs \nlist_mk_abs \nUtils2.avar \navar \nUtils2.body \nbody \nUtils2.strip_abs \nstrip_abs \nUtils2.is_cbin \nis_cbin \nUtils2.is_cbinder \nis_cbinder \nUtils2.eq_lhs \neq_lhs \nUtils2.eq_rhs \neq_rhs \nUtils2.list_mk_imp \nlist_mk_imp \nUtils2.strip_imp \nstrip_imp \nUtils2.mk_select \nmk_select \nUtils2.dest_select \ndest_select \nUtils2.is_select \nis_select \nUtils2.mk_forall \nmk_forall \nUtils2.list_mk_forall \nlist_mk_forall \nUtils2.dest_forall \ndest_forall \nUtils2.is_forall \nis_forall \nUtils2.strip_forall \nstrip_forall \nUtils2.mk_conj \nmk_conj \nUtils2.list_mk_conj \nlist_mk_conj \nUtils2.dest_conj \ndest_conj \nUtils2.is_conj \nis_conj \nUtils2.strip_conj \nstrip_conj \nUtils2.flatstrip_conj \nflatstrip_conj \nUtils2.term_union \nterm_union \nUtils2.same_types \nsame_types \nUtils2.list_free_vars \nlist_free_vars \nUtils2.term_free_in \nterm_free_in \nUtils2.genvar_count \ngenvar_count \nUtils2.genvar \ngenvar \nUtils2.list_variant \nlist_variant \nUtils2.list_cvariant \nlist_cvariant \nUtils2.all_vars \nall_vars \nUtils2.list_all_vars \nlist_all_vars \nUtils2.subst0 \nsubst0 \nUtils2.subst \nsubst \nUtils2.var_match0 \nvar_match0 \nUtils2.var_match \nvar_match \nUtils2.term_match0 \nterm_match0 \nUtils2.term_match \nterm_match \nUtils2.rename_bvar \nrename_bvar \nUtils2.find_subterm \nfind_subterm \nUtils2.find_subterms0 \nfind_subterms0 \nUtils2.find_subterms \nfind_subterms \nUtils2.dest_eqthm \ndest_eqthm \nUtils2.eqthm_lhs \neqthm_lhs \nUtils2.eqthm_rhs \neqthm_rhs \nUtils2.is_eqthm \nis_eqthm \nUtils2.thm_free_vars \nthm_free_vars \nUtils2.thm_alpha_eq \nthm_alpha_eq"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_mk_fun_type","title":"Utils2.list_mk_fun_type","content":"Utils2.list_mk_fun_type \nlist_mk_fun_type \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#strip_fun_type","title":"Utils2.strip_fun_type","content":"Utils2.strip_fun_type \nstrip_fun_type \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#rator","title":"Utils2.rator","content":"Utils2.rator \nrator \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#rand","title":"Utils2.rand","content":"Utils2.rand \nrand \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#strip_comb","title":"Utils2.strip_comb","content":"Utils2.strip_comb \nstrip_comb \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_mk_abs","title":"Utils2.list_mk_abs","content":"Utils2.list_mk_abs \nlist_mk_abs \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#avar","title":"Utils2.avar","content":"Utils2.avar \navar \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#body","title":"Utils2.body","content":"Utils2.body \nbody \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#strip_abs","title":"Utils2.strip_abs","content":"Utils2.strip_abs \nstrip_abs \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#is_cbin","title":"Utils2.is_cbin","content":"Utils2.is_cbin \nis_cbin \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#is_cbinder","title":"Utils2.is_cbinder","content":"Utils2.is_cbinder \nis_cbinder \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#eq_lhs","title":"Utils2.eq_lhs","content":"Utils2.eq_lhs \neq_lhs \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#eq_rhs","title":"Utils2.eq_rhs","content":"Utils2.eq_rhs \neq_rhs \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_mk_imp","title":"Utils2.list_mk_imp","content":"Utils2.list_mk_imp \nlist_mk_imp \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#strip_imp","title":"Utils2.strip_imp","content":"Utils2.strip_imp \nstrip_imp \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#mk_select","title":"Utils2.mk_select","content":"Utils2.mk_select \nmk_select \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#dest_select","title":"Utils2.dest_select","content":"Utils2.dest_select \ndest_select \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#is_select","title":"Utils2.is_select","content":"Utils2.is_select \nis_select \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#mk_forall","title":"Utils2.mk_forall","content":"Utils2.mk_forall \nmk_forall \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_mk_forall","title":"Utils2.list_mk_forall","content":"Utils2.list_mk_forall \nlist_mk_forall \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#dest_forall","title":"Utils2.dest_forall","content":"Utils2.dest_forall \ndest_forall \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#is_forall","title":"Utils2.is_forall","content":"Utils2.is_forall \nis_forall \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#strip_forall","title":"Utils2.strip_forall","content":"Utils2.strip_forall \nstrip_forall \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#mk_conj","title":"Utils2.mk_conj","content":"Utils2.mk_conj \nmk_conj \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_mk_conj","title":"Utils2.list_mk_conj","content":"Utils2.list_mk_conj \nlist_mk_conj \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#dest_conj","title":"Utils2.dest_conj","content":"Utils2.dest_conj \ndest_conj \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#is_conj","title":"Utils2.is_conj","content":"Utils2.is_conj \nis_conj \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#strip_conj","title":"Utils2.strip_conj","content":"Utils2.strip_conj \nstrip_conj \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#flatstrip_conj","title":"Utils2.flatstrip_conj","content":"Utils2.flatstrip_conj \nflatstrip_conj \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#term_union","title":"Utils2.term_union","content":"Utils2.term_union \nterm_union \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#same_types","title":"Utils2.same_types","content":"Utils2.same_types \nsame_types \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_free_vars","title":"Utils2.list_free_vars","content":"Utils2.list_free_vars \nlist_free_vars \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#term_free_in","title":"Utils2.term_free_in","content":"Utils2.term_free_in \nterm_free_in \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#genvar_count","title":"Utils2.genvar_count","content":"Utils2.genvar_count \ngenvar_count \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#genvar","title":"Utils2.genvar","content":"Utils2.genvar \ngenvar \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_variant","title":"Utils2.list_variant","content":"Utils2.list_variant \nlist_variant \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_cvariant","title":"Utils2.list_cvariant","content":"Utils2.list_cvariant \nlist_cvariant \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#all_vars","title":"Utils2.all_vars","content":"Utils2.all_vars \nall_vars \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#list_all_vars","title":"Utils2.list_all_vars","content":"Utils2.list_all_vars \nlist_all_vars \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#subst0","title":"Utils2.subst0","content":"Utils2.subst0 \nsubst0 \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#subst","title":"Utils2.subst","content":"Utils2.subst \nsubst \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#var_match0","title":"Utils2.var_match0","content":"Utils2.var_match0 \nvar_match0 \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#var_match","title":"Utils2.var_match","content":"Utils2.var_match \nvar_match \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#term_match0","title":"Utils2.term_match0","content":"Utils2.term_match0 \nterm_match0 \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#term_match","title":"Utils2.term_match","content":"Utils2.term_match \nterm_match \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#rename_bvar","title":"Utils2.rename_bvar","content":"Utils2.rename_bvar \nrename_bvar \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#find_subterm","title":"Utils2.find_subterm","content":"Utils2.find_subterm \nfind_subterm \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#find_subterms0","title":"Utils2.find_subterms0","content":"Utils2.find_subterms0 \nfind_subterms0 \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#find_subterms","title":"Utils2.find_subterms","content":"Utils2.find_subterms \nfind_subterms \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#dest_eqthm","title":"Utils2.dest_eqthm","content":"Utils2.dest_eqthm \ndest_eqthm \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#eqthm_lhs","title":"Utils2.eqthm_lhs","content":"Utils2.eqthm_lhs \neqthm_lhs \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#eqthm_rhs","title":"Utils2.eqthm_rhs","content":"Utils2.eqthm_rhs \neqthm_rhs \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#is_eqthm","title":"Utils2.is_eqthm","content":"Utils2.is_eqthm \nis_eqthm \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#thm_free_vars","title":"Utils2.thm_free_vars","content":"Utils2.thm_free_vars \nthm_free_vars \n"},{"uri":"http://localhost:8901/reference/hol-utils2.html#thm_alpha_eq","title":"Utils2.thm_alpha_eq","content":"Utils2.thm_alpha_eq \nthm_alpha_eq \n"},{"uri":"http://localhost:8901/reference/hol-utils2-clash.html","title":"Clash","content":"Clash \n \nClash.Data0 \nData0"},{"uri":"http://localhost:8901/reference/hol-utils2-clash.html#Data0","title":"Clash.Data0","content":"Clash.Data0 \nData0 \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html","title":"Wrap","content":"Wrap \n\nThe primitive inference rules and theory commands have minimal, stripped- \ndown functionality, to make the language and inference kernels as concise \nas possible and their correctness as easy as possible to justify.  This   \nmodule adds basic wrappers around these primitives, giving the rules step \ncounting and the theory commands benign redefinition and slightly enhanced\nfunctionality. \n \nWrap.the_absolute_step_total \nthe_absolute_step_total \nWrap.step_total \nstep_total \nWrap.inc_step_total \ninc_step_total \nWrap.the_relative_step_start \nthe_relative_step_start \nWrap.reset_step_counter \nreset_step_counter \nWrap.step_counter \nstep_counter \nWrap.refl_conv \nrefl_conv \nWrap.beta_conv \nbeta_conv \nWrap.mk_comb_rule \nmk_comb_rule \nWrap.mk_abs_rule \nmk_abs_rule \nWrap.assume_rule \nassume_rule \nWrap.disch_rule \ndisch_rule \nWrap.mp_rule \nmp_rule \nWrap.eq_mp_rule \neq_mp_rule \nWrap.inst_rule \ninst_rule \nWrap.inst_type_rule \ninst_type_rule \nWrap.is_int_big_int \nis_int_big_int \nWrap.int_of_big_int \nint_of_big_int \nWrap.big_int_of_int \nbig_int_of_int \nWrap.get_tyconst_arity \nget_tyconst_arity \nWrap.get_all_tyconsts \nget_all_tyconsts \nWrap.ntyvars \nntyvars \nWrap.new_tyconst \nnew_tyconst \nWrap.new_const \nnew_const \nWrap.new_axiom \nnew_axiom \nWrap.new_const_definition \nnew_const_definition \nWrap.new_const_specification \nnew_const_specification \nWrap.new_tyconst_definition \nnew_tyconst_definition"},{"uri":"http://localhost:8901/reference/hol-wrap.html#the_absolute_step_total","title":"Wrap.the_absolute_step_total","content":"Wrap.the_absolute_step_total \nthe_absolute_step_total \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#step_total","title":"Wrap.step_total","content":"Wrap.step_total \nstep_total \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#inc_step_total","title":"Wrap.inc_step_total","content":"Wrap.inc_step_total \ninc_step_total \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#the_relative_step_start","title":"Wrap.the_relative_step_start","content":"Wrap.the_relative_step_start \nthe_relative_step_start \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#reset_step_counter","title":"Wrap.reset_step_counter","content":"Wrap.reset_step_counter \nreset_step_counter \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#step_counter","title":"Wrap.step_counter","content":"Wrap.step_counter \nstep_counter \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#refl_conv","title":"Wrap.refl_conv","content":"Wrap.refl_conv \nrefl_conv \n\n This is the reflexivity rule for equality.  It takes a term, and returns a\n theorem stating that this term is equal to itself, under no assumptions.  There\n are no restrictions on the supplied term.\n \n          \u0060t\u0060\n       --------\n       |- t = t\n \n See also: eq_sym_conv, eq_sym_rule, eq_trans_rule.\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#beta_conv","title":"Wrap.beta_conv","content":"Wrap.beta_conv \nbeta_conv \n\n This is the beta reduction conversion.  It takes a lambda abstraction\n application term, and returns a theorem stating that the application is equal to\n the lambda abstraction body but with all occurrences of the binding variable\n replaced with the application\u0027s argument, under no assumptions.\n \n            \u0060(\\x. t) s\u0060\n       ---------------------\n       |- (\\x. t) s = t[s/x]\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#mk_comb_rule","title":"Wrap.mk_comb_rule","content":"Wrap.mk_comb_rule \nmk_comb_rule \n\n mk_comb_rule : thm -\u003E thm -\u003E thm                                [ Primitive ]\n \n This is the equality congruence rule for function application.  It takes two\n equality theorems, and applies corresponding sides of the first theorem to the\n second, unioning the assumptions.  The first theorem\u0027s LHS/RHS must be functions\n with domain type equal to the type of the second theorem\u0027s LHS/RHS.\n \n       A1 |- f1 = f2    A2 |- t1 = t2\n       ------------------------------\n          A1 u A2 |- f1 t1 = f2 t2\n \n See also: mk_comb1_rule, mk_comb2_rule, mk_bin_rule, mk_abs_rule.\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#mk_abs_rule","title":"Wrap.mk_abs_rule","content":"Wrap.mk_abs_rule \nmk_abs_rule \n\n This is the equality congruence rule for lambda abstraction.  It takes a\n variable and an equality theorem, and abstracts the variable from both sides of\n the theorem.  The variable must not occur free in the assumptions of the\n supplied theorem.\n \n          \u0060x\u0060   A |- t1 = t2        [ \u0022x\u0022 not free in \u0027A\u0027 ]\n       ------------------------\n       A |- (\\x. t1) = (\\x. t2)\n \n See also: mk_comb_rule.\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#assume_rule","title":"Wrap.assume_rule","content":"Wrap.assume_rule \nassume_rule \n\n This is the assumption rule.  It takes a boolean term, and returns a theorem\n stating that the term holds under the single assumption of the term itself.\n\n     \u0060p\u0060\n   --------\n   {p} |- p\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#disch_rule","title":"Wrap.disch_rule","content":"Wrap.disch_rule \ndisch_rule \n\n This is the implication introduction rule.  It takes a boolean term and a\n theorem, and removes the term from the theorem\u0027s assumptions (if present) and\n adds it as an antecedent of the conclusion.  Note that the term does not have to\n be in the assumptions of the supplied theorem for the rule to succeed.\n \n         \u0060p\u0060   A |- q\n       ----------------\n       A\\{p} |- p ==\u003E q\n \n See also: undisch_rule, mp_rule.\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#mp_rule","title":"Wrap.mp_rule","content":"Wrap.mp_rule \nmp_rule \n\n This is the modus ponens rule.  It takes an implication theorem and a second\n theorem, where the implication theorem\u0027s antecedent is alpha-equivalent to the\n conclusion of the second theorem.  It returns a theorem stating that the\n implication theorem\u0027s consequent holds, under the unioned assumptions of the\n supplied theorems.\n \n       A1 |- p ==\u003E q    A2 |- p\n       ------------------------\n             A1 u A2 |- q\n \n See also: eq_mp_rule, disch_rule, undisch_rule, prove_asm_rule.\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#eq_mp_rule","title":"Wrap.eq_mp_rule","content":"Wrap.eq_mp_rule \neq_mp_rule \n\n This is the equality modus ponens rule.  It takes an equality theorem and a\n second theorem, where the equality theorem\u0027s LHS is alpha-equivalent to the\n conclusion of the second theorem.  It returns a theorem stating that the\n equality theorem\u0027s RHS holds, under the unioned assumptions of the supplied\n theorems.\n \n       A1 |- p \u003C=\u003E q    A2 |- p\n       ------------------------\n             A1 u A2 |- q\n \n See also: mp_rule, eq_imp_rule1, eq_imp_rule2, imp_antisym_rule.\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#inst_rule","title":"Wrap.inst_rule","content":"Wrap.inst_rule \ninst_rule \n\n This is the variable instantiation rule.  It takes a variable instantiation list\n and a theorem, and performs a single parallel instantiation of the free\n variables in the theorem\u0027s assumptions and conclusion, according to the\n instantiation list.  All free occurrences of instantiation list domain elements\n in the theorem get replaced.  Each instantiation list domain element must be a\n variable, and each range element must have the same type as its corresponding\n domain element.\n \n Binding variables in the resulting theorem are renamed as necessary to avoid\n variable capture.  Note that instantiation list entries that do not apply are\n simply ignored, as are repeated entries for a given variable (beyond its first\n entry).  If no instantiation list entries apply, then the returned theorem is\n the same as the input.\n \n           [(x1,t1);(x2,t2);..]    A |- p\n       --------------------------------------\n       A[t1/x1,t2/x2,..] |- p[t1/x1,t2/x2,..]\n \n See also: inst_type_rule, subs_rule, subst_rule.\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#inst_type_rule","title":"Wrap.inst_type_rule","content":"Wrap.inst_type_rule \ninst_type_rule \n\n This is the type variable instantiation rule.  It takes a type variable\n instantiation list and a theorem, and performs a single parallel instantiation\n of the type variables in the theorem\u0027s assumptions and conclusion, according to\n the instantiation list.  All occurrences of instantiation list domain elements\n in the theorem get replaced.  Each instantiation list domain element must be a\n type variable.\n \n Binding variables in the resulting theorem are renamed as necessary to avoid\n variable capture.  Note that instantiation list entries that do not apply are\n simply ignored, as are repeated entries for a given type variable (beyond its\n first entry).  If no instantiation list entries apply, then the returned theorem\n is the same as the input.\n \n            [(tv1,ty1);(tv2,ty2);..]    A |- p\n       ----------------------------------------------\n       A[ty1/tv1,ty2/tv2,..] |- p[ty1/tv1,ty2/tv2,..]\n \n See also: inst_rule.\n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#is_int_big_int","title":"Wrap.is_int_big_int","content":"Wrap.is_int_big_int \nis_int_big_int \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#int_of_big_int","title":"Wrap.int_of_big_int","content":"Wrap.int_of_big_int \nint_of_big_int \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#big_int_of_int","title":"Wrap.big_int_of_int","content":"Wrap.big_int_of_int \nbig_int_of_int \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#get_tyconst_arity","title":"Wrap.get_tyconst_arity","content":"Wrap.get_tyconst_arity \nget_tyconst_arity \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#get_all_tyconsts","title":"Wrap.get_all_tyconsts","content":"Wrap.get_all_tyconsts \nget_all_tyconsts \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#ntyvars","title":"Wrap.ntyvars","content":"Wrap.ntyvars \nntyvars \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#new_tyconst","title":"Wrap.new_tyconst","content":"Wrap.new_tyconst \nnew_tyconst \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#new_const","title":"Wrap.new_const","content":"Wrap.new_const \nnew_const \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#new_axiom","title":"Wrap.new_axiom","content":"Wrap.new_axiom \nnew_axiom \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#new_const_definition","title":"Wrap.new_const_definition","content":"Wrap.new_const_definition \nnew_const_definition \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#new_const_specification","title":"Wrap.new_const_specification","content":"Wrap.new_const_specification \nnew_const_specification \n"},{"uri":"http://localhost:8901/reference/hol-wrap.html#new_tyconst_definition","title":"Wrap.new_tyconst_definition","content":"Wrap.new_tyconst_definition \nnew_tyconst_definition \n"},{"uri":"http://localhost:8901/tactics.html","title":"tactics","content":"#load \u0022avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n\n//let true_def_tr = true_def, mkGraph (Th true_def, \u0022true\\_def\u0022) []\n\n//let th = \n//    (* |- true                        *)\n//    eq_mp_rule_tr\n//      (* |- (\\p. p) = (\\p. p) \u003C=\u003E true  *)\n//      (sym_rule_tr true_def_tr)\n//      (* |- (\\p. p) = (\\p. p)           *)\n//      (refl_conv_tr (parse_term(@\u0022\\(p:bool).p\u0022)))\n\n//th |\u003E print_graph\n\nlet (eq_mp_tac: term -\u003E tactic) =\n  fun tm (asl,w) -\u003E\n    try \n        let tm1 = mk_eq(tm,w)\n        null_meta,[asl, tm1; asl, tm],\n        fun _ [th1; th2] -\u003E eq_mp_rule th1 th2\n    with Failure _ -\u003E failwith \u0022eq_mp_tac\u0022;;\n\ng (parse_term @\u0022true\u0022)\ne2 (eq_mp_tac (parse_term @\u0022(\\(p:bool). p) = (\\p. p)\u0022))\ne2 (CONV_TAC sym_conv)\ne2 (ACCEPT_TAC true_def)\ne2 REFL_TAC\ntop_thm()\n\ng (\u0022p = p\u0022 |\u003E parse_term)\ntop_realgoal()\ne2 REFL_TAC\ntop_thm()\n\nlet truth_thm_tr = (truth_thm, mkGraph (Th truth_thm, \u0022truth\\_thm\u0022) [])\n\nlet th = \n    (* |- ~ true \u003C=\u003E false         *)\n    deduct_antisym_rule_tr\n        (* false |- ~ true             *)\n        (contr_rule_tr (parse_term(@\u0022~ true\u0022)) (assume_rule_tr (parse_term(@\u0022false\u0022))))\n        (* ~ true |- false             *)\n        (eq_mp_rule_tr\n          (* ~ true |- true \u003C=\u003E false    *)\n          (eqf_intro_rule_tr (assume_rule_tr (parse_term(@\u0022~ true\u0022))))\n           truth_thm_tr )\n\nth |\u003E print_graph\n\nlet (deduct_antisym_rule_tac: tactic) =\n  fun (asl,w) -\u003E\n    let tm1,tm2 = dest_eq w\n    let th1 = assume_rule tm1\n    let th2 = assume_rule tm2\n    try \n        null_meta,[(\u0022\u0022,th2)::asl, tm1; (\u0022\u0022,th1)::asl, tm2],\n        fun _ [th1; th2] -\u003E deduct_antisym_rule th1 th2\n    with Failure _ -\u003E failwith \u0022deduct_antisym_rule_tac\u0022;;\n\nlet (CONTR_TAC: thm_tactic) =\n  let propagate_thm th i [] = INSTANTIATE_ALL i th in\n  fun cth (asl,w) -\u003E\n    try let th = contr_rule w cth in\n        null_meta,[],propagate_thm th\n    with Failure _ -\u003E failwith \u0022CONTR_TAC\u0022\n\n\ng (parse_term @\u0022~ true \u003C=\u003E false\u0022)\ne2 deduct_antisym_rule_tac\ne2 (CONTR_TAC (\u0022false\u0022 |\u003E parse_term |\u003E assume_rule))\ne2 (eq_mp_tac (\u0022true\u0022 |\u003E parse_term))\n\n//let th1 = (just_fn1:justification) null_inst []\n\n//let (deduct_antisym_tac: tactic) =\n//  fun (asl,w) -\u003E\n//    try let l,r = dest_eq w in\n//        null_meta,[asl, mk_imp(l,r); asl, mk_imp(r,l)],\n//        fun _ [th1; th2] -\u003E deduct_antisym_rule th1 th2\n//    with Failure _ -\u003E failwith \u0022deduct_antisym_tac\u0022;;\n\n//let asl : (string * thm) list = []\n\n//let w = \u0022~ true \u003C=\u003E false \u0022 |\u003E parse_term\n//let l,r = dest_eq w\n//let th1_tm = mk_imp(l,r)\n//let th2_tm = mk_imp(r,l)\n\n//let newgoals = [asl, th1_tm; asl, th2_tm]\n//let justfn = fun _ [th1; th2] -\u003E deduct_antisym_rule th1 th2\n\n//let (eq_mp_tac: tactic) =\n//  fun (asl,w) -\u003E\n//    try let l,r = dest_eq w in\n//        null_meta,[asl, mk_imp(l,r); asl, mk_imp(r,l)],\n//        fun _ [th1; th2] -\u003E eq_mp_rule th1 th2\n//    with Failure _ -\u003E failwith \u0022eq_mp_tac\u0022;;\n\n//let (imp_antisym_rule_tac: tactic) =\n//  fun (asl,w) -\u003E\n//    try let l,r = dest_eq w in\n//        null_meta,[asl, mk_imp(l,r); asl, mk_imp(r,l)],\n//        fun _ [th1; th2] -\u003E imp_antisym_rule th1 th2\n//    with Failure _ -\u003E failwith \u0022imp_antisym_rule_tac\u0022;;\n\n//let (DISCH_TAC: tactic) =\n//  let f_tm = false_tm in\n//  fun (asl,w) -\u003E\n//    try let ant,c = dest_imp w in\n//        let th1 = assume_rule ant in\n//        null_meta,[(\u0022\u0022,th1)::asl,c],\n//        fun i [th] -\u003E prim_disch_rule (instantiate i ant) th\n//    with Failure _ -\u003E \n//        try\n//            let ant = dest_not w in\n//            let th1 = assume_rule ant in\n//            null_meta,[(\u0022\u0022,th1)::asl,f_tm],\n//            fun i [th] -\u003E not_intro_rule(prim_disch_rule (instantiate i ant) th)\n//        with Failure _ -\u003E failwith \u0022DISCH_TAC\u0022\n\n//let (UNDISCH_TAC: term -\u003E tactic) =\n// fun tm (asl,w) -\u003E\n//   try let sthm,asl\u0027 = remove1 (fun (_,asm) -\u003E alpha_eq (concl asm) tm) asl in\n//       let thm = snd sthm in\n//       null_meta,[asl\u0027,mk_imp(tm,w)],\n//       fun i [th] -\u003E prim_mp_rule th (INSTANTIATE_ALL i thm)\n//   with Failure _ -\u003E failwith \u0022UNDISCH_TAC\u0022\n\n//let goal1:goal = ([], (parse_term @\u0022~ true \u003C=\u003E false\u0022));;\n//let (_,goal_list1,just_fn1) = imp_antisym_rule_tac goal1\n\n//let (_,goal_list2,just_fn2) = DISCH_TAC goal_list1.[1]\n//let goal3 = ACCEPT_TAC (\u0022false\u0022 |\u003E parse_term |\u003E assume_rule) goal_list2.[0]\n\n\n//let goal2 = UNDISCH_TAC (\u0022false\u0022 |\u003E parse_term) goal_list1.[0]\n\n//let th1 = (just_fn1:justification) null_inst []"},{"uri":"http://localhost:8901/3_Liguaggio_HOL.html","title":"LINGUAGGIO HOL\n","content":"(**\n\nLINGUAGGIO HOL\n=============\n\nIl linguaggio HOL \u0026egrave; un potente linguaggio formale in grado di descrivere la maggior parte \ndella matematica. Questo capitolo spiega il liguaggio e la versione di sintassi concreta usata dal sistema.\nSpiega inoltre varie operazioni che si possono eseguire sulle espressioni, e \ncome configurare l\u0027input e l\u0027output\n\n3.1 Sintassi lessicale\n------------\n\nQuesta sezione spiega la sintassi lessicale usata sia per i tipi che i termini (si vedano rispettivamente \nle sezioni 3.2.2 e 3.2.3). Per una grammatica formale della sintassi lessicale si veda l\u0027Appendice C.\n\n**3.1.1 Token**\n\nI tipi e i termini si dividono in una lista di token lessicali. I token identificatori sono usati \nper riferirsi esplitamente a entit\u0026agrave; HOL (cio\u0026egrave; variabili, costanti, variabili di tipo \ne costanti di tipo). I token parole riservate aiutano a dare una struttura sintattica. Qualsiasi \ntipo di spazio tra identificatori e/o token non viene a sua volta catturato in token.\n\nPer esempio il seguente termine (Esempio 3.1):\n\n\u0060\\x. y \u002B foo x\u0060\n\n\nsi divde in 7 token: \u0060\\\u0060, \u0060x\u0060, \u0060.\u0060, \u0060y\u0060, \u0060\u002B\u0060, \u0060foo\u0060, \u0060x\u0060. \n\n\u0060x\u0060, \u0060y\u0060, \u0060foo\u0060 e la costante \u0060\u002B\u0060 costituiscono toke indentificatori, mentre \n\u0060\\\u0060 e \u0060.\u0060 sono token di parole riservate.\n\nHOL \u0026egrave; case sensitive sia nei confronti di nomi di entit\u0026agrave; che \nrispetto a parole riservate.\n\n**3.1.2 Nomi regolari e irregolari**\n\nTutte le entit\u0026agrave; HOL hanno almeno un attributo nome, che nel sistema corrente \u0026egrave; una sequenza \ndi caratteri ASCII. Non ci sono restrizioni sulla forma di questo nome - potenzialmente pu\u0026ograve; coinvolgere \nqualsiasi combinazione di cifre, underscore, caratteri simbolici, spazi o persino caratteri non stampabili, \ncos\u0026igrave; come caratteri alfanumerici.\n\nTuttavia, la forma di token identificatori che pu\u0026ograve; essere usata per riferirisi a entit\u0026agrave; HOL \ndipende dal fatto che il nome dell\u0027entit\u0026agrave; sia \u0027\u0027regolare\u0027\u0027 o \u0027\u0027irregolare\u0027\u0027. l\u0027identificatore per \nun nome regolare pu\u0026ograve; essere semplicemente il nome stesso (cos\u0026igrave; come per tutte le entit\u0026agrave; \nnell\u0027esempio 3.1), mentre l\u0027identificatore per un nome irregolare richiede una quotazione (si veda \nla Sezione 3.1.5).\n\nCi sono tre forme di nomi regolari:\n\n1. Alfanumerici\n    - iniziano con una lettera o con un \u0060_\u0060, seguiti da zero o pi\u0026ugrave; lettere, cifre, \n        altri \u0060_\u0060 e \u0060\u0027\u0060.\n2. Numerici\n    - iniziano con una cifra, seguita da zero o pi\u0026ugrave; cifre e \u0060_\u0060\n    - non possono essere seguiti immediatamente da una lettera o da \u0060\u0027\u0060\n3. Simbolici\n    - uno o pi\u0026ugrave; dei seguenti caratteri: \u0060! # \u0026 * \u002B - . / ; \u003C = \u003E ? @ | ~ ^ [ ] \\ { }\u0060\n\nTutti gli altri nomi sono irregolari. Questi includono qualsiasi nome che contenga caratteri di spazio, \npunteggiatura, caratteri non stampabili o una miscela di caratteri alfanumerici e simbolici. Include anche \nla sequenza vuota di caratteri.\n\n- Caratteri di spazio: space, tab, line-feed, form-feed, carriage-return\n- Caratteri di punteggiatura: \u0060( ) , :\u0060\n- Caratteri non stampabili: qualsiasi codice ASCII \u003C 32 o \u003E 126\n\n**3.1.3 Parole Riservate**\n\nCi sono tre forme di toke di parola riservata:\n\n1. Punteggiatura:\n    - un singolo carattere di punteggiatura (si veda la Sezione 3.1.2)\n2. Parola chiave:\n    - un nome regolare non-numerico da questo insieme fisso di 8 token: \u0060and else if in let then \\ .\u0060\n3. Parentesi di enumerazione:\n    - un nome regolare non-numerico per delimitare l\u0027inizio o la fine di espressioni di enumerazione\n    - l\u0027utente pu\u0026ograve; estendere l\u0027insieme delle parentesi di enumerazione (si veda la Sezione 3.4.4)\n    - nel sistema base non \u0026egrave; definita alcuna parentesi di enumerazione \n\nIdentificatori per entit\u0026agrave; con nomi che vanno in conflitto con parole riservate richiedono il \nquoting (si veda la Sezione 3.1.5).\n\nSi noti che il token lessicale \u0060=\u0060 \u0026egrave; un caso speciale nella sintasi lessicale di HOL.\nBench\u0026egrave; sia normalmente un identificatore, e sia classificato come tale dalla \nsintassi lessicale, \u0026egrave; di fatto una parola chiave quando occore come parte di una dichiarazione \nlet (si veda la Sezione 3.4.2).\n\n**Giustapposizione di token**\n\nLe quotazioni devono essere scritte con parentesi e spaziature sufficienti da distinguere token \nalfanumerici/numerici adiacenti o token simbolici adiacenti (sia che questi token siano \nidentificatori o parole riservate). Per esempio, in \u0060\\ ^ . ^ = 5\u0060 (dove \u0060^\u0060 di fatto \u0026egrave; una \nvariabile), \u0026egrave; inserita una spaziatura tra \u0060\\\u0060 e\u0060^\u0060, e tra \u0060^\u0060 e \u0060.\u0060, che sono tutti token \nsimbolici\n\n**3.1.5 Quoting di identificatori**\n\nGli identificatori per entit\u0026agrave; con nomi irregolari o nomi che vanno in conflitto con parole \nriservate devono essere delimitati in modo speciale. Questo implica aggiungere un carattere di doppio \napice all\u0027inizio e alla fine del nome, come in \u0060\u0022then\u0022 = \u0022foo x\u0022\u0060 (che significa la variabile con nome \n\u0060\u0022then\u0022\u0060 \u0026egrave; uguale alla variabile chiamata \u0060\u0022foo x\u0022\u0060). Questo meccanismo \u0026egrave; chiamato \n\u0027\u0027quoting di identificatore\u0027\u0027.\n\nQualsiasi carattere \u0060\u0022\u0060 o \u0060\\\u0060 in un nome quotato deve essere preceduto da un carattere backslash di escape, \ncome in \u0060\\\\ \\\u0022\u0060 (per un carattere di backslash seguito da un carattere di spazio seguito da un carattere di \ndoppio apice). Ogni carattere di backquote o non stampabilie in un nome quotato deve essere immesso con un \nbackslash seguito dal codice ASCII decimale di 3 cifre (con degli zero iniziali per caratteri con codici \nASCII minori di 100), come in \u0060\\007\\127\u0060 per il carattere ASCII 7 seguito dal carattere ASCII 127. Questi \ncodici ASCII di 3 cifre possono essere usati anche per i caratteri stampabili, come in \u0060\\111\\107\u0060 (per \n\u0060ok\u0060), ma questo naturalmente non \u0026egrave; richiesto.\n\nAnche le variabili e le costanti con nomi numerici devono essere quotate (perch\u0026eacute; i token numerici nei \ntermini denotano numerali di numeri naturali - Si veda la Sezione 3.4.5). Questo non si applica alle \nvariabili di tipo e alle costanti di tipo con nomi numerici.\n\nIl quoting di nomi di entit\u0026agrave; che non lo richiedono (cio\u0026egrave; quelle regolari, o con nomi che non \nvanno in conflitto) \u0026egrave; permesso, e denta lo stessa cosa del nome non quotato.\n\n**3.1.6 Marcautre Speciali**\n\nGli identificatori possono avere un marcatire prefisso di un carattere per decrivere un\u0027informazione \nextra. Il marcatore \u0060$\u0060 indica che l\u0027identificatore occore \u0027\u0027defixato\u0027\u0027 (si veda la Sezione 3.5.8), come \nin \u0060$=\u0060. I marcatori \u0060\u0027\u0060 e \u0060%\u0060 indicano rispettivamente che l\u0027identificatore \u0026egrave; per una variabile \ndi tipo o per una variabile (si veda la Sezione 3.6.2), come in \u0060\u0027a\u0060 e \u0060%x\u0060.\n\nQuesti marcatori sono pare dello stesso token lessicale della parte principale dell\u0027identificatore, e \ndevono precederlo immediatamente, senza alcuno spazio infrapposto. Se l\u0027identificatore usa il quoting \n(si veda la Sezione 3.1.5), allora i marcatori devono essere scritti fuori ed immediatamente \nprima dei doppi apici, come in \u0060%\u0022let\u0022\u0060.\n\nSe un identificatore ha sia un marcatore di defizine e un marcatore di variabile o di variabile di tipo, \nallore il marcatore di defizine deve venire prima come in \u0060$%=\u0060.\n\n*)\n\n(1,2,3) |\u003E fst\n\nlet _,_,z = 1,2,3"},{"uri":"http://localhost:8901/avvio.html","title":"avvio","content":"#I \u0022../src/bin/Debug/net7.0\u0022\n#r \u0022nholz.dll\u0022\nopen HOL\nfsi.AddPrinter print_type\nfsi.AddPrinter print_qtype\nfsi.AddPrinter print_term\nfsi.AddPrinter print_qterm\nfsi.AddPrinter print_thm\n//fsi.AddPrinter print_graph\n\n//CoreThry.load\n//Equal.load\n//Bool.load\n\n//let x = parse_term(@\u0022x:\u0027a\u0022) \n//let f = parse_term(@\u0022f:\u0027a-\u003E\u0027b\u0022)\n//let g = parse_term(@\u0022g:\u0027a-\u003E\u0027b\u0022)\n\n//let th1 = @\u0022\\x. (f:\u0027a-\u003E\u0027b) x\u0022 |\u003E parse_term |\u003E eta_conv_tr\n//let th2 = sym_rule_tr th1\n//let th3 = @\u0022!x. (f:\u0027a-\u003E\u0027b) x = g x\u0022 |\u003E parse_term |\u003E assume_rule_tr\n//let th4 = spec_rule_tr x th3\n//let th5 = mk_abs_rule_tr x th4\n//let th6 = @\u0022\\x. (g:\u0027a-\u003E\u0027b) x\u0022 |\u003E parse_term |\u003E eta_conv_tr\n//let th7 = [th2; th5; th6] |\u003E list_trans_rule_tr\n//let th8 = @\u0022(f:\u0027a-\u003E\u0027b)=g\u0022 |\u003E parse_term |\u003E assume_rule_tr\n//let th9 = mk_comb1_rule_tr th8 x\n//let th10 = gen_rule_tr x th9\n//let th11 = deduct_antisym_rule_tr th7 th10\n//let th = list_gen_rule_tr [f;g] th11\n\n//th |\u003E snd |\u003E view\n\n\n"},{"uri":"http://localhost:8901/B1_Teorie.html","title":"TEORIE\n","content":"(**\n\nTEORIE\n=============\n\nTeoria Core\n------------\n\n**Costani di Tipo**\n*)\n// bool             \u0060:bool\u0060                         Nonfix\n// -\u003E               \u0060:\u00271-\u003E\u00272\u0060                       Infix (5, RightAssoc)\n(**\n\n**Costanti**\n*)\n   \n// true             \u0060:bool\u0060                         Nonfix\n// ==\u003E              \u0060:bool-\u003Ebool-\u003Ebool\u0060             Infix (10, RightAssoc)\n// /\\               \u0060:bool-\u003Ebool-\u003Ebool\u0060             Infix (20, RightAssoc)\n// =                \u0060:\u0027a-\u003E\u0027a-\u003Ebool\u0060                 Infix (30, NonAssoc)\n// @                \u0060:(\u0027a-\u003Ebool)-\u003E\u0027a\u0060               Binder\n// !                \u0060:(\u0027a-\u003Ebool)-\u003Ebool\u0060             Binder\n// ?                \u0060:(\u0027a-\u003Ebool)-\u003Ebool\u0060             Binder\n// ONE_ONE          \u0060:(\u0027a-\u003E\u0027b)-\u003Ebool\u0060               Nonfix\n// TYPE_DEFINITION  \u0060:(\u0027a-\u003Ebool)-\u003E(\u0027b-\u003E\u0027a)-\u003Ebool\u0060   Nonfix\n\n(**\n**Costanti Alias**\n\nL\u0027unico alias supportato \u0026egrave; \u0060\u003C=\u003E\u0060, per un\u0027istanza di tipo di \u0060=\u0060.\n\n*)\n\n// \u003C=\u003E              \u0060:bool-\u003Ebool-\u003Ebool\u0060             Infix (5, NonAssoc)\n\n(**\n**Definizioni**\n*)\n\n(***hide***)\n#I \u0022../src/bin/Debug/net7.0\u0022\n#r \u0022nholz.dll\u0022\nopen HOL\nfsi.AddPrinter print_type\nfsi.AddPrinter print_qtype\nfsi.AddPrinter print_term\nfsi.AddPrinter print_qterm\nfsi.AddPrinter print_thm\n(***unhide***)\n\ntrue_def                                                  // istanza della proprieta\u0027 riflessiva di uguaglianza per la \n// |- true \u003C=\u003E (\\(p:bool). p) = (\\p. p)                   // funzione d\u0027identita\u0027 booleana\n\nconj_def                                                  // funzione binaria che restituisce se il fatto che i due \n// |- $/\\ = (\\p1 p2. !p. (p1 ==\u003E (p2 ==\u003E p)) ==\u003E p)       // argomenti inisieme implichino il valore, implica il valore\n\nforall_def                                                // funzione che restituisce se il predicato restituisce true per \n// |- $! = (\\(P:\u0027a-\u003Ebool). P = (\\x. true))                // ogni input\n\nexists_def                                                // funzione che restituisce per un P se un qualsiasi elemento \n// |- $? = (\\(P:\u0027a-\u003Ebool). P ($@ P))                      // selezionato come soddisfacente il predicato necessariamente  \n                                                          // soddisfa il predicato\n\none_one_def                                               // funzione che restituisce se la funzione argomento e\u0027  \n// |- ONE_ONE =                                           // iniettiva, cioe\u0027 se l\u0027uguaglianza dei valori per due argomenti   \n//     (\\(f:\u0027a-\u003E\u0027b). !x1 x2. f x1 = f x2 ==\u003E x1 = x2)     // implica ncessariamente l\u0027uguaglianza dei due argomenti\n\ntype_definition_def                                       // funzione che prende un predicato per elementi del tipo di \n// |- TYPE_DEFINITION =                                   // rappresentazione e un mapping da elementi del nuovo tipo al \n//     (\\P (rep:\u0027b-\u003E\u0027a). ONE_ONE rep                      // tipo di  rappresentazione e restituisce se il mapping e\u0027 \n//                     /\\ (!x. P x \u003C=\u003E (?y. x = rep y)))  // iniettivo e mappa su  elementi che  soddisfano il predicato. \n                                                          // E\u0027 usata per definire nuove costanti di tipo\n\n(**\n**Assiomi**\n*)\n\neta_ax                                                     // per ogni funzione f la lambda astrazione dell\u0027applicazione\n// |- !(f:\u0027a-\u003E\u0027b). (\\x. f x) = f                           // di f a alla variabile lambda e\u0027 uguale alla funzione stessa\n   \nimp_antisym_ax                                             // proprieta\u0027 antisimmetrica dell\u0027implicazione\n// |- !p1 p2. (p1 ==\u003E p2) ==\u003E                               \n//              ((p2 ==\u003E p1) ==\u003E (p1 \u003C=\u003E p2))               \n   \nselect_ax                                                  // per ogni P e x, se x soddisfa P, allora P e\u0027 soddisfatto  \n// |- !(P:\u0027a-\u003Ebool) x. P x ==\u003E P ($@ P)                    // anche dall\u0027elemento selezionato per P\n\n(**\nLogica Predicativa\n------------------\n\n**Costanti**\n*)\n\n// false            \u0060:bool\u0060                         Nonfix\n// ~                \u0060:bool-\u003Ebool\u0060                   Prefix\n// \\/               \u0060:bool-\u003Ebool-\u003Ebool\u0060             Infix (15, RightAssoc)\n// ?!               \u0060:(\u0027a-\u003Ebool)-\u003Ebool\u0060             Binder\n// LET              \u0060:(\u0027a-\u003E\u0027b)-\u003E\u0027a-\u003E\u0027b\u0060             Nonfix *\n// ONTO             \u0060:(\u0027a-\u003E\u0027b)-\u003Ebool\u0060               Nonfix\n// COND             \u0060:bool-\u003E\u0027a-\u003E\u0027a-\u003E\u0027a\u0060             Nonfix *\n\n\n\n(**\n**Definizioni**\n*)\n\nfalse_def                                                    // falsita\u0027\n// |- false \u003C=\u003E (!p. p)                                      //\n\nnot_def                                                      // negazione logica\n// |- $~ = (\\p. p ==\u003E false)                                 // \n\ndisj_def                                                     // digiunzione\n// |- $\\/ = (\\p1 p2. !p. (p1 ==\u003E p) ==\u003E (p2 ==\u003E p) ==\u003E p)    // \n\nuexists_def                                                  // quantificazione esistenziale univoca\n// |- $?! = (\\(P:\u0027a-\u003Ebool). ?x. P x /\\ (!y. P y ==\u003E y = x))  // \n\nlet_def                                                      // espressioni let: \u0060LET (LET (\\x1 x2. t) s1) s2\u0060\n// |- LET = (\\(f:\u0027a-\u003E\u0027b) x. f x)                             // e\u0027 stampato come \u0060let x1 = s1 and x2 = s2 in t\u0060  \n\nonto_def                                                     // suriettivita\u0027\n// |- ONTO = (\\(f:\u0027a-\u003E\u0027b). !y. ?x. y = f x)                  // \n\ncond_def                                                     // espressioni condizionali\n// |- COND =                                                 // \u0060COND c t1 t2\u0060 e stampato come\n//     (\\p (t1:\u0027a) t2.                                       // \u0060if c then t1 else t2\u0060\n//         @x. ((p \u003C=\u003E true) ==\u003E x = t1)                     // \n//              /\\ ((p \u003C=\u003E false) ==\u003E x = t2))               // \n\n\n(**\nCoppie ordinate\n--------------\n\n**Costanti di tipo**\n*)\n\n// #                \u0060:\u00271#\u00272\u0060                        Infix (10, RightAssoc)\n\n(**\n**Costanti**\n*)\n\n// MkPairRep        \u0060:\u0027a-\u003E\u0027b-\u003E\u0027a-\u003E\u0027b-\u003Ebool\u0060         Nonfix\n// IsPairRep        \u0060:(\u0027a-\u003E\u0027b-\u003Ebool)-\u003Ebool\u0060         Nonfix\n// PairAbs          \u0060:(\u0027a-\u003E\u0027b-\u003Ebool)-\u003E\u0027a#\u0027b\u0060        Nonfix\n// PairRep          \u0060:\u0027a#\u0027b-\u003E\u0027a-\u003E\u0027b-\u003Ebool\u0060          Nonfix\n// PAIR             \u0060:\u0027a-\u003E\u0027b-\u003E\u0027a#\u0027b\u0060                Nonfix *\n// FST              \u0060:\u0027a#\u0027b-\u003E\u0027a\u0060                    Nonfix\n// SND              \u0060:\u0027a#\u0027b-\u003E\u0027b\u0060                    Nonfix\n\n(**\n**Definizioni di tipo**\n*)\n\nprod_def\n// |- ?(f:\u0027a#\u0027b-\u003E\u0027a-\u003E\u0027b-\u003Ebool). TYPE_DEFINITION IsPairRep f\n\n(**\n**Definizioni**\n*)\n\nmk_pair_rep_def                                         // la funzione di rappresentazione restituisce vero solo \n// |- MkPairRep =                                       // quando ogni argomento e\u0027 uguale al suo corrispondente\n//     (\\(x:\u0027a) (y:\u0027b) a b. a = x /\\ b = y)             // elemento nella coppia\n\nis_pair_rep_def                                         // la funzione caratteristica per l\u0027operatore di tipo prodotto.\n// |- IsPairRep =                                       // Prende la funzione di rappresentazione e restituisce vero se \n//     (\\(r:\u0027a-\u003E\u0027b-\u003Ebool). ?a b. r = MkPairRep a b)     // esiste una coppia per cui ne e\u0027 la concreta rappresentazione\n\nprod_def                                                // definizione del tipo prodotto\n// |- ?(f:\u0027a#\u0027b-\u003E\u0027a-\u003E\u0027b-\u003Ebool).                         // \n//                   TYPE_DEFINITION IsPairRep f        // \n\nprod_bij_def1                                           // biiezioni del tipo prodotto\n// |- !(a:\u0027a#\u0027b). PairAbs (PairRep a) = a               // \n                                                        // \nprod_bij_def2                                           // \n// |- !(r:\u0027a-\u003E\u0027b-\u003Ebool).                                // \n//       IsPairRep r \u003C=\u003E PairRep (PairAbs r) = r        // \n\npair_def                                                // funzione di accoppiamento. E\u0027 definita come l\u0027astrazione del \n// |- PAIR =                                            // tipo prodotto della funzione \n//     (\\(x:\u0027a) (y:\u0027b). PairAbs (MkPairRep x y))        // PAIR t1 t2 e\u0027 elaborata e stampata come (t1,t2).\n\nfst_def                                                 // seleziona il primo componente della coppia\n// |- FST = (\\(p:\u0027a#\u0027b). @x. ?y. p = (x,y))             //\n\nsnd_def                                                 // seleziona il secondo componente della coppia\n// |- SND = (\\(p:\u0027a#\u0027b). @y. ?x. p = (x,y))             // \n\n\n(**\nIndividui\n--------------\n\n**Costanti di tipo**\n*)\n// ind              \u0060:ind\u0060                          Nonfix\n\n(**\n**Costanti**\n*)\n\n// IND_ZERO         \u0060:ind\u0060                          Nonfix\n// IND_SUC          \u0060:ind-\u003Eind\u0060                     Nonfix\n\n(**\n**Definizioni**\n*)\nind_suc_zero_spec\n// |- ONE_ONE IND_SUC /\\ (!i. ~ (IND_SUC i = IND_ZERO))\n\n(**\n**Assiomi**\n*)\n\ninfinity_ax                                             // l\u0027assioma dell\u0027infinito dichiara che il nuovo tipo degli\n// |- ?(f:ind-\u003Eind). ONE_ONE f /\\ ~ ONTO f              // individui e\u0027 infinito affermando che esiste una funzione\n                                                        // totale iniettiva da individui a individui che non e\u0027\n                                                        // suriettiva\n\n(**\nNumeri naturali\n---------------\n\n**Costanti di tipo**\n*)\n\n// nat              \u0060:nat\u0060                          Nonfix\n\n(**\n**Costanti**\n*)\n\n// IsNatRep         \u0060:ind-\u003Ebool\u0060                    Nonfix\n// NatAbs           \u0060:ind-\u003Enat\u0060                     Nonfix\n// NatRep           \u0060:nat-\u003Eind\u0060                     Nonfix\n// ZERO             \u0060:nat\u0060                          Nonfix\n// SUC              \u0060:nat-\u003Enat\u0060                     Nonfix\n// PRE              \u0060:nat-\u003Enat\u0060                     Nonfix\n// \u002B                \u0060:nat-\u003Enat-\u003Enat\u0060                Infix (50, LeftAssoc)\n// -                \u0060:nat-\u003Enat-\u003Enat\u0060                Infix (50, LeftAssoc)\n// *                \u0060:nat-\u003Enat-\u003Enat\u0060                Infix (55, LeftAssoc)\n// EXP              \u0060:nat-\u003Enat-\u003Enat\u0060                Infix (60, LeftAssoc)\n// EVEN             \u0060:nat-\u003Ebool\u0060                    Nonfix\n// ODD              \u0060:nat-\u003Ebool\u0060                    Nonfix\n// \u003C                \u0060:nat-\u003Enat-\u003Ebool\u0060               Infix (40, NonAssoc)\n// \u003C=               \u0060:nat-\u003Enat-\u003Ebool\u0060               Infix (40, NonAssoc)\n// \u003E                \u0060:nat-\u003Enat-\u003Ebool\u0060               Infix (40, NonAssoc)\n// \u003E=               \u0060:nat-\u003Enat-\u003Ebool\u0060               Infix (40, NonAssoc)\n// BIT0             \u0060:nat-\u003Enat\u0060                     Nonfix\n// BIT1             \u0060:nat-\u003Enat\u0060                     Nonfix\n// NUMERAL          \u0060:nat-\u003Enat\u0060                     Nonfix\n\n(**\n**Definizioni di tipo**\n*)\n\nnat_def\n// |- ?(f:nat-\u003Eind). TYPE_DEFINITION IsNatRep f\n\n(**\n**Definizioni**\n*)\n\nis_nat_rep_def                                   // funzione caratteristica dei naturali definita come quella funzione che \n// |- !i. IsNatRep i \u003C=\u003E                         // restituisce vero per un elemento di ind sse qualsiasi proprieta\u0027 che \n//    (!P. P IND_ZERO /\\                         // valga per IND_ZERO e tutti i suoi successori sotto IND_SUCC vale \n//       (!j. P j ==\u003E P (IND_SUC j)) ==\u003E P i)    // necessariamente anche per l\u0027elemento. Questo da il piu\u0027 piccolo sotto-\n                                                 // insieme di ind che contiene IND_ZERO ed e\u0027 chiuso sotto IND_SUC\n\nnat_bij_def1                                     // biiezioni del tipo dei naturali\n// |- !a. NatAbs (NatRep a) = a                  //\n                                                 //\nnat_bij_def2                                     //\n// |- !r. IsNatRep r \u003C=\u003E NatRep (NatAbs r) = r   //\n\nzero_def                                         // ZERO e SUCC sono definiti in termini dei loro equivalenti nel tipo \n// |- ZERO = NatAbs IND_ZERO                     // degli individui\n                                                 //\nsuc_def                                          //\n// |- !n. SUC n = NatAbs (IND_SUC (NatRep n))    //\n\npre_def\n// |- PRE 0 = 0 /\\ (!n. PRE (SUC n) = n)\n\nadd_def\n// |- (!n. 0 \u002B n = n) \n//         /\\ (!m n. SUC m \u002B n = SUC (m \u002B n))\n\nsub_def\n// |- (!n. n - 0 = n) \n//         /\\ (!m n. m - SUC n = PRE (m - n))\n\nmult_def\n// |- (!n. 0 * n = 0) \n//         /\\ (!m n. SUC m * n = n \u002B m * n)\n\nexp_def\n// |- (!n. n EXP 0 = 1) \n//         /\\ (!m n. m EXP SUC n = m * m EXP n)\n\neven_def\n// |- (EVEN 0 \u003C=\u003E true) \n//         /\\ (!n. EVEN (SUC n) \u003C=\u003E ~ EVEN n)\n\nodd_def\n// |- !n. ODD n \u003C=\u003E ~ EVEN n\n\nlt_def\n// |- (!m. m \u003C 0 \u003C=\u003E false) \n//        /\\ (!m n. m \u003C SUC n \u003C=\u003E m = n \\/ m \u003C n)\n\nle_def\n// |- !m n. m \u003C= n \u003C=\u003E m \u003C n \\/ m = n\n\ngt_def\n// |- !m n. m \u003E n \u003C=\u003E n \u003C m\n\nge_def\n// |- !m n. m \u003E= n \u003C=\u003E n \u003C= m\n\n(**\n\nI numeri naturali sono definiti in termini di \u0060SUC\u0060 e dell\u0027addizione. La rappresentazione implica l\u0027applicare una sequenza di operatori\n\u0060BIT0\u0060 e \u0060BIT1\u0060 alla costante \u0060ZERO\u0060, con \u0060NUMERAL\u0060 come un tag che viene applicato al risultato. Sia \u0060BIT0\u0060 che \u0060BIT1\u0060 duplicano il loro \nargmento aggiungendo rispettivamente 0 o 1. Il tag \u0060NUMERAL\u0060 semplicemente ritorna il suo argomento, ed \u0026egrave; usato per identicare \natomi di numerali nei termini. Letta dall\u0027interno all\u0027esterno, una sequenza di \u0060BIT0\u0060 e \u0060BIT1\u0060 corrisponde direttamente agli 0 e agli 1 \ndella notazione binaria. \n\nAd esempio, il numero 6 \u0026egrave; rappresentato da \u0060NUMERAL (BIT0 (BIT1 (BIT1 ZERO)))\u0060 o 110 in binario.\n*)\n\nbit0_def                                           \n// |- (BIT0 ZERO = ZERO)                           \n//     /\\ (!n. BIT0 (SUC n) = SUC (SUC (BIT0 n)))  \n                                                   \nbit1_def                                           \n// |- !n. BIT1 n = SUC (BIT0 n)                    \n                                                   \nnumeral_def                                        \n// |- !n. NUMERAL n = n                            "},{"uri":"http://localhost:8901/1_Introduzione.html","title":"Introduzione\n","content":"(**\n\nIntroduzione\n===========\n\n\nQuesto \u0026egrave; il Manuale Utente di NHOLZ e fornisce una descrizione completa di come usare il sistema.\n\n1.1 Concetti Base\n--------------\n\n**1.1.1 NHOLZ**\n\nNHOLZ \u0026egrave; un porting di HOL Zero in F# che ha lo scopo di avere un dimostratore di teoremi HOL, cio\u0026egrave; un programma \nche supporta dimostrazioni formali e lo sviluppo di teorie nella logica HOL (si veda pi\u0026ugrave; avanti), a disposizione in F#\nper lo studio a livello personale di sistemi di questo tipo. Si \u0026egrave; scelto HOL Zero come base perch\u0026eacute; \u0026egrave;\nun dimostratore di teoremi relativamente semplice che si concentra su buone funzionalit\u0026agrave; di base, \nrobustezza architetturale, lo sviluppo della sintassi concreta, un prettyprinting completo e non ambiguo, e la \nleggibilit\u0026agrave; del codice sorgente e perch\u0026eacute; per le sue caratteristiche \u0026egrave; risultato piuttosto semplice \neffettuarne il porting. \n\nNHOLZ non \u0026egrave; adatto allo sviluppo di dimostrazioni di grandi dimensioni. Esso, infatti, supporta soltanto uno \nstile di dimostrazione nella semplice deduzione naturale, e manca di funzionalit\u0026agrave; interattive ed automatiche \navanzate che altri sistemi HOL hanno.\n\nL\u0027interazione utente con HOL avviene immettendo istruzioni a riga di comando in formato ASCII in una sessione \ninterativa F#. Queste istruzioni sono di fatto espressioni nel linguaggio di programmazione che vengono valutate \ndall\u0027interprete REPL una volta immesse. \n\nColoro che hanno una pi\u0026ugrave; profonda conoscenza di F# possono estenderne le funzionalit\u0026agrave;. Una modalit\u0026agrave; di \nestensione consiste nell\u0027immettere definizioni in una sessione di NHOLZ (cio\u0026egrave; una sessione interativa F# con il codice \nsorgente di NHOLZ incorporata). Qualsiasi di queste estensioni sono sicure nel senso che non possono introdurre incoerenze \nlogiche nel sistema. Questa sicurezza \u0026egrave; garantita dal fatto che NHOLZ \u0026egrave; implementato secondo quella che viene \nchiamata un\u0027architettura nello \u0027\u0027stile LCF\u0027\u0027 (si veda la Sessione 4.1.3), che \u0026egrave; usata anche in altri sistemi HOL. \n\n**1.1.2 La logica HOL**\n\nLa logica HOL \u0026egrave; una logica predicativa tipizzata, classica, di ordine superiore, cio\u0026egrave; una logica \npredicativa con un sistema di tipi, con la legge del terzo escluso come teorema, e con la possibilit\u0026agrave; di \nquantificare su funzioni. E\u0027 basata sul lambda calcolo tipizzato di Alonzo Church. Ha un sistema polimorfico di \ntipi relativamente semplice che non \u0026egrave; dipendentemente tipizzato e non supporta la quantificazione su \nvariabili di tipo. Si faccia riferimento al glossario per una spiegazione estesa di questi concetti.\n\nLa logica HOL fu sviluppata per la prima volta negli anni 1980 per un sistema prototipo chiamato Cambridge HOL, ed \n\u0026egrave; ora supportata dalla famiglia di dimostratori di teoremi HOL che include HOL4, ProofPower HOL, HOL Light \ne Isabelle/HOL. Questi sistemi sono stati utilizzati come strumenti affidabili essenziali in una variet\u0026agrave; di \nprogetti industriali, che includono la verifica dello sviluppo di microcircuiti integrati per computer e software \nsafety-critical. Essi sono anche preminenti nella formalizzazione della matematica, in particolare nell\u0027innovativo \nprogetto Flyspeck di Tom Hales per formalizzare la sua dimostrazione della congettura di Keplero.\n\n**1.1.3 Common HOL**\n\nCommon HOL \u0026egrave; uno standard per le funzionalit\u0026agrave; di base di un sistema HOL, che ha lo scopo di facilitare la portabilit\u0026agrave; del codice sorgente \ne delle dimostrazioni formali tra i membri della famiglia HOL. Esso consiste nelle seguenti componenti:\n\n- la specifica di una API di funzionalit\u0026agrave; HOL di base, per permettere il porting del codice sorgente tra sistemi HOL compatibili;\n- l\u0027implementazione dell\u0027API per vari sistemi HOL;\n- la specifica di un formato di file di dimostrazione, per permettere il porting delle dimostrazioni formali tra sistemi HOL compatibili;\n- l\u0027implementazioni di oggetti per l\u0027esportazione e l\u0027importazione delle dimostrazioni tra vari sistemi HOL.\n\nNHOLZ, in generale, supporta lo standard Common HOL avendolo ereditato da HOL Zero. Va, tuttavia, notato che non supporta \nle term e le type quotation.\n\n1.2 Avviare una sessione\n------------------------\n\nUna sessione di NHOLZ \u0026egrave; avviata da uno script F#. Innanzitutto \u0026egrave; necessario referenziare la dll \ne importare i relativi moduli:\n\n*)\n\n#I \u0022../src/bin/Debug/net7.0\u0022\n#r \u0022nholz.dll\u0022\nopen HOL\n\n(**\n\nimpostare il pretty printing delle espressioni:\n\n*)\n\nfsi.AddPrinter print_type\nfsi.AddPrinter print_qtype\nfsi.AddPrinter print_term\nfsi.AddPrinter print_qterm\nfsi.AddPrinter print_thm\n\n(**\ne caricare quindi i moduli con i seguenti comandi:\n*)\n\nCoreThry.load\nEqual.load\nBool.load\nBoolAlg.load\nBoolClass.load\nPair.load\nInd.load\nNat.load\nNatNumrl.load\nNatArith.load\nNatRel.load\nNatEval.load\n\n(**\n\nI primi pochi secondi di avvio richiedono il build del sistema da zero. Alcune centinaia di righe di output \nscorrono velocemente sullo schermo. \n\n*)\n\n// ...\n// [HZ] Storing theorem \u0022sub_floor_thm\u0022.\n// [HZ] Setting term fixity for name \u0022\u003E\u0022.\n// [HZ] Declaring constant \u0022\u003E\u0022.\n// [HZ] Adding definition for constant \u0022\u003E\u0022.\n// [HZ] Setting term fixity for name \u0022\u003E=\u0022.\n// [HZ] Declaring constant \u0022\u003E=\u0022.\n// [HZ] Adding definition for constant \u0022\u003E=\u0022.\n// val it : (string * thm) list =\n//   [(\u0022eta_ax\u0022, |- !(f:\u0027a-\u003E\u0027b). (\\x. f x) = f);\n//    (\u0022imp_antisym_ax\u0022, |- !p1 p2. (p1 ==\u003E p2) ==\u003E (p2 ==\u003E p1) ==\u003E (p1 \u003C=\u003E p2));\n//    (\u0022infinity_ax\u0022, |- ?(f:ind-\u003Eind). ONE_ONE f /\\ ~ ONTO f);\n//    (\u0022select_ax\u0022, |- !(P:\u0027a-\u003Ebool) x. P x ==\u003E P ($@ P))]\n// \n// \u003E \n\n(**\n\nil sistema \u00E8 quindi pronto per ricevere i comandi dall\u0027utente.\nQuesti comandi sono di fatto espressioni F#.\n\n1.3 Panoramica d\u0027uso\n--------------\n\nQuesta sezione fornisce una breve introduzione a semplici operazioni, incluso come immettere espressioni \nHOL e come eseguire una semplice dimostrazione. Per informazioni pi\u0026ugrave; approfondite, \nil lettore dovrebbe procedere nei capitoli seguenti del manuale.\n\n**1.3.1 Termini, Tipi e Teoremi**\n\nLe espressioni nel linguaggio HOL sono chiamati termini HOL. I termini sono scritti utilizzando una stringa di caratteri \nASCII a cui va applicata la funzione \u0060parse_term\u0060. Nel momento in cui si immette un termine in una sessione \nquesto viene controllato e ristampato a video.\n\nLa sintassi dei termini \u0026egrave; semplice e intuitiva, e si va incontro a vari meccanismi sintattici. \nPer esempio, il seguente termine significa \u0027\u0027per tutti i numeri naturali \u0060x\u0060, \u0060y\u0060 e \u0060z\u0060, se \u0060x\u0060 \u0026egrave; \nminore di \u0060y\u0060 e \u0060y\u0060 \u0026egrave; minore di \u0060z\u0060 allora \u0060x\u0060 \u0026egrave; minore di \u0060z\u0060\u0027\u0027:\n\n*)\n\n@\u0022!x y z. x \u003C y /\\ y \u003C z ==\u003E x \u003C z\u0022 |\u003E parse_term\n(*** include-fsi-output ***)\n\n(**\n\nSe si immette un termine mal formato si ricever\u0026agrave; un messaggio di errore.\n\n*)\n\n\u0022x =\u0022 |\u003E parse_term\n\n// \u003E \n// HOL.Exn\u002BHolErr: [HZ] SYNTAX ERROR: Unexpected end of quotation instead of RHS for infix \u0022=\u0022\n// ...\n\n(**\n\nSi noti che i messaggi specifici del sistema, diversamente da quelli che derivano dall\u0027interprete F#,   \nin generale, hanno il prefisso \u0060[HZ]\u0027. Questo vale per tutti i messaggi riportati da NHOLZ, inclusi \nmessaggi di errore, warnings e feedback generici all\u0027utente.\n\nHOL \u0026egrave; un linguaggio tipizzato, cos\u0026igrave; ogni termine e sottotermine ha un tipo, e i termini \ndevono essere costruiti in modo da avere un tipo corretto. Questo impedisce la costruzione di enunciati \nprivi di significato come \u0027\u00273 \u0026egrave; uguale a vero\u0027\u0027.\n*)\n\n\u00223 = true\u0022 |\u003E parse_term\n// \u003E \n// HOL.Exn\u002BHolErr: [HZ] TYPE ERROR: Function subterm domain type incompatible with argument subterm type\n\n(**\nI sottotermini possono essere annotati per indicare il loro tipo, facendo seguire al sottotermine \nil simbolo di i due punti \u0060:\u0060 e poi il suo tipo, il tutto chiuso tra parentesi. \nIl meccanismo di inferenza del tipo \u0026egrave; usato per risolvere i tipi nei termini. Ad ogni termine inserito \nsenza annotazioni di tipo sufficienti sono assegnate delle variabili di tipo numerate per tutti i tipi non \ndeterminabili. Di default i termini sono ristampati indietro con solamente le annotazioni di tipo sufficienti \nper evitare qualsiasi ambiguit\u0026agrave; circa i tipi di ogni sottotermine.\n*)\n\n\u0022!(w:nat) (x:nat) y z. w = x /\\ y = z\u0022 |\u003E parse_term\n(*** include-fsi-output ***)\n\n(**\nI tipi HOL possono essere scritti fuori dal contesto di un termine usando la funzone \u0060parse_type\u0060. \n*)\n\n\u0022nat#nat-\u003Ebool\u0022 |\u003E parse_type\n(*** include-fsi-output ***)\n\n(**\n1.3.2 Teoremi, Dimostrazioni ed Asserzioni\n----------------------------------------\n\nI teoremi HOL consistono di un insieme di termini di assunzione con valore booleano e di un termine conclusione con \nvalore booleano, e sono riservati ad enunciati di cui si \u0026egrave; stabilito che valgono (per dimostrazione o asserzione \n- si veda sotto). Il significato di tali enunciati \u0026egrave; che la conclusione vale assumendo che valgano tutte le assunzioni. \nI teoremi sono mostrati usando un runstile (\u0060|-\u0060) per separare tutte le assunzioni dalla conclusione. Il sistema di base \ncontiene gi\u0026agrave; oltre 100 teoremi pre-dimostrati, ognuno dei quali non ha assunzione. Questi sono elencati \nnell\u0027Appendice B2.\n\n*)\n\nexcluded_middle_thm\n(*** include-fsi-output ***)\n\n(**\nLe regole di inferenza della logica HOL sono implementate in NHOLZ come funzioni F# che prendono \nteoremi e/o termini e restituiscono teoremi. Un passo di dimostrazione \u0026egrave; eseguito semplicemente \nvalutando l\u0027applicazione di una tale funzione. Dettagli sulle regole d\u0027inferenza sono forniti \nnell\u0027[Appendice A5](A5_Inference_Rules.html)\n*)\n\n\u0022x \u002B y \u003C 5\u0022 |\u003E parse_term |\u003E assume_rule\n// val it : thm = x \u002B y \u003C 5 |- x \u002B y \u003C 5\n\nspec_rule (\u0022a = 0\u0022 |\u003E parse_term) excluded_middle_thm\n// val it : thm = |- a = 0 \\/ ~ (a = 0)\n\n(**\nLe dimostrazioni sono semplicemente espressioni F# composte con applicazioni di regole di inferenza ad ogni livello.\n*)\n\ndeduct_antisym_rule\n    (contr_rule (\u0022~ true\u0022 |\u003E parse_term) (assume_rule (\u0022false\u0022 |\u003E parse_term)))\n    (eq_mp_rule (eqf_intro_rule (assume_rule (\u0022~ true\u0022 |\u003E parse_term))) truth_thm)\n// val it : thm = |- ~ true \u003C=\u003E false\n\n(**\nil sistema di base supporta le seguenti teorie matematiche di base: logica predicativa, lambda calcolo, \ncoppie ordinate e aritmetica dei numeri naturali. Dettagli circa ogni teoria sono forniti \nnell\u0027[Appendice B1](B1_Teorie.html).\n\nLe teorie del sistema possono essere estese usando i comandi di teoria per dichiarare nuove \ncostanti e costanti di tipo e per enunciare proposizioni a loro riguardo. Per esempio, il \ncomando di definizione di costante introduce una nuova costante e restituisce un nuovo \nteorema, che afferma che il valore della costante \u0026egrave; uguale a un\u0027espressione data. \nPrende un termine di uguaglianza con la nuova costante come lato sinistro del\u0027eguaglianza e \nil valore della costante come lato destro. Dettagli su ciascun comendo di teoria sono forniti \nnell\u0027Appendice A4.\n*)\n\n\u0022max_height = 7\u0022 |\u003E parse_term |\u003E new_const_definition\n// [HZ] Declaring constant \u0022max_height\u0022.\n// [HZ] Adding definition for constant \u0022max_height\u0022.\n// val it : thm = |- max_height = 7"},{"uri":"http://localhost:8901/B2_Teoremi.html","title":"TEOREMI\n","content":"(**\nTEOREMI\n=============\n\nPer i teoremi gi\u0026agrave; documentati, cliccando sul nome del teorema si apre una pagina \ndi dettaglio con l\u0027esposizione della dimostrazione a codice e un rendering della dimostrazione nel calcolo \ndei sequenti. \n\nLaddove sono disponibili, per le regole di inferenza utilizzate, vengono usate delle estensioni \nal sistema base con dimostrazioni ad albero, strategie di dimostrazioni all\u0027indietro e un opzione \u0060view\u0060\ndi visualizzazione dell\u0027albero di dimostrazione in LaTeX.\n\nQueste estensioni non sono derivate da Hol Zero e sono in corso di implementazione. \n\n**[truth\\_thm](teoremi\\0001_truth.html)**\n\n$\\vdash \\top$\n\nvero \u0026egrave; derivabile\n\n**[fun\\_eq\\_thm](0002_fun_eq.html)**\n\n$\\vdash \\forall (f:\\alpha \\rightarrow \\beta)\\ g.\\ f = g\\ \\Leftrightarrow\\ (\\forall x.\\ f\\ x = g\\ x)$\n\nL\u0027euivalenza tra funzioni corrisponde all\u0027equivalenza dei loro valori a parit\u0026agrave; di argomento\n\n\nPropriet\u0026agrave; algebriche degli operatori logici\n------------\n\n**[not\\_true\\_thm](0003_not_true.html)**\n\n$\\vdash \\neg \\top \\Leftrightarrow \\bot$\n\nnon vero equivale a falso\n\n**[not\\_false\\_thm](0004_not_false.html)**\n\n$\\vdash \\neg \\bot \\Leftrightarrow \\top$\n\nnon falso equivale a vero\n\n**[true\\_not\\_eq\\_false\\_thm](0005_true_not_eq_false.html)**\n\n$\\vdash \\neg (\\top \\Leftrightarrow \\bot)$\n\nvero non equivale a falso\n\n**[not\\_dist\\_disj\\_thm](0006_not_dist_disj.html)**\n\n$\\forall p\\ q.\\ \\neg (p \\vee q) \\Leftrightarrow \\neg p \\wedge \\neg q$\n\nditribuzione della negazione sulla disgiunzione\n\n**[conj\\_id\\_thm](0007_conj_id.html)**\n\n$\\forall p.\\ p \\wedge \\top \\Leftrightarrow p$\n\nvero \u0026egrave; l\u0027identit\u0026agrave; della congiunzione\n\n**[conj\\_zero\\_thm](0008_conj_zero.html)**\n\n$\\forall p.\\ p \\wedge \\bot \\Leftrightarrow \\bot$\n\ncongiunzione zero\n\n**[conj\\_idem\\_thm](0009_conj_idem.html)**\n\n$\\forall p.\\ p \\wedge p \\Leftrightarrow p$\n\ncongiunzione idem\n\n**[conj\\_comm\\_thm](0010_conj_comm.html)**\n\n$\\forall p.\\ p \\wedge q \\Leftrightarrow q \\wedge p$\n\ncommutativit\u0026agrave; della congiunzione\n\n**[conj\\_assoc\\_thm](0011_conj_assoc.html)**\n\n$\\forall p\\ q\\ r.\\ p \\wedge (q \\wedge r) \\Leftrightarrow (p \\wedge q) \\wedge r$\n\nassociativit\u0026agrave; della congiunzione\n\n**[conj\\_absorb\\_disj\\_thm](0012_conj_absorb_disj.html)**\n\n$\\forall p\\ q.\\ p \\wedge (p \\vee q) \\Leftrightarrow p$\n\nassorbimento della disgiunzione nella congiunzione\n\n**[conj\\_dist\\_right\\_disj\\_thm](0013_conj_dist_right_disj.html)**\n\n$\\forall p\\ q\\ r.\\ p \\wedge (q \\vee r) \\Leftrightarrow (p \\wedge q) \\vee (p \\wedge r)$\n\ndistributivit\u0026agrave; a destra della congiunzione sulla disgiunzione\n\n**[conj\\_dist\\_left\\_disj\\_thm](0014_conj_dist_left_disj.html)**\n\n$\\forall p\\ q\\ r.\\ (p \\vee q) \\wedge r \\Leftrightarrow (p \\wedge r) \\vee (q \\wedge r)$\n\ndistributivit\u0026agrave; a sinistra della congiunzione sulla disgiunzione\n\nwork in prog...\n\n**[disj\\_id\\_thm](0016_disj_id.html)**\n\n$\\vdash \\forall p.\\ p \\vee \\bot \\Leftrightarrow p$\n\nfalso \u0026egrave; l\u0027identit\u0026agrave; della disgiunzione\n\n**[disj\\_zero\\_thm](0017_disj_zero.html)**\n\n$\\vdash \\forall p.\\ p \\vee \\top \\Leftrightarrow \\top$\n\n**[disj\\_idem\\_thm](0018_disj_idem.html)**\n\n$\\vdash \\forall p.\\ p \\vee p \\Leftrightarrow p$\n\n\n\n...\n\nLogica classica\n----------------\n\nTutti i teoremi seguenti sono derivati attraverso l\u0027assioma di scelta e pertanto \npossono essere considerati come logica classica.\n\nVa comunque notato che alcuni sono di fatto derivabili nella logica intuizionista \nse si utilizza una definizione alternativa dell quantificatore esistenziale \n(come in HOL Light).\n\n**[excluded\\_middle\\_thm](0044_excluded_midle.html)**\n\n$\\vdash \\forall p.\\ p \\vee \\neg p$\n\nPer ogni proposizione, o essa \u0026egrave; dimostrabile o lo \u0026egrave; la sua negazione\n\n**[bool\\_cases\\_thm](0045_bool_cases.html)**\n\n$\\vdash \\forall p.\\ (p \\Leftrightarrow \\top) \\vee (p \\Leftrightarrow \\bot)$\n\nPer ogni proposizione, o essa equivale a true oppure equivale a false\n\n...\n\n*)\n\n(**\nWork in progress\n-----\n*)\n\n(***hide***)\n#load \u0022avvio.fsx\u0022\nopen HOL\n(***unhide***)\n\ncond_false_thm\n// |- !(t1:\u0027a) t2. (if false then t1 else t2) = t2\n\ncond_idem_thm\n// |- !p (t:\u0027a). (if p then t else t) = t\n\ncond_not_thm\n// |- !p (t1:\u0027a) t2. (if (~ p) then t1 else t2) = (if p then t2 else t1)\n\ncond_true_thm\n// |- !(t1:\u0027a) t2. (if true then t1 else t2) = t1\n\n\nconj_contr_thm\n//   |- !p. p /\\ ~ p \u003C=\u003E false\n\n\ndisj_absorb_conj_thm\n//   |- !p q. p \\/ (p /\\ q) \u003C=\u003E p\n\ndisj_assoc_thm\n//   |- !p q r. p \\/ (q \\/ r) \u003C=\u003E (p \\/ q) \\/ r\n\ndisj_comm_thm\n//   |- !p q. p \\/ q \u003C=\u003E q \\/ p\n\ndisj_dist_left_conj_thm\n//   |- !p q r. (p /\\ q) \\/ r \u003C=\u003E (p \\/ r) /\\ (q \\/ r)\n\ndisj_dist_right_conj_thm\n//   |- !p q r. p \\/ (q /\\ r) \u003C=\u003E (p \\/ q) /\\ (p \\/ r)\n\nexists_dist_disj_thm\n//   |- !(P:\u0027a-\u003Ebool) Q. (?x. P x \\/ Q x) \u003C=\u003E (?x. P x) \\/ (?x. Q x)\n\nexists_null_thm\n//   |- !t. (?(x:\u0027a). t) \u003C=\u003E t\n\nexists_one_point_thm\n//   |- !(P:\u0027a-\u003Ebool) a. (?x. x = a /\\ P x) \u003C=\u003E P a\n\n//exists_value_thm\n//   |- !(x:\u0027a). ?y. y = x\n\nforall_dist_conj_thm\n//   |- !(P:\u0027a-\u003Ebool) Q. (!x. P x /\\ Q x) \u003C=\u003E (!x. P x) /\\ (!x. Q x)\n\nforall_null_thm\n//   |- !t. (!(x:\u0027a). t) \u003C=\u003E t\n\nforall_one_point_thm\n//   |- !(P:\u0027a-\u003Ebool) a. (!x. x = a ==\u003E P x) \u003C=\u003E P a\n\n//imp_alt_def_thm\n//   |- $==\u003E = (\\p q. p /\\ q \u003C=\u003E p)\n\nimp_disj_thm\n//   |- !p q. (p ==\u003E q) \u003C=\u003E (~ p \\/ q)\n\nimp_dist_left_disj_thm\n//   |- !p q r. (p \\/ q ==\u003E r) \u003C=\u003E (p ==\u003E r) /\\ (q ==\u003E r)\n\nimp_dist_right_conj_thm\n//   |- !p q r. (p ==\u003E q /\\ r) \u003C=\u003E (p ==\u003E q) /\\ (p ==\u003E r)\n\n//imp_imp_thm\n//   |- !p q r. (p ==\u003E q ==\u003E r) \u003C=\u003E (p /\\ q ==\u003E r)\n\nimp_left_id_thm\n//   |- !p. (true ==\u003E p) \u003C=\u003E p\n\nimp_left_zero_thm\n//   |- !p. false ==\u003E p\n\nimp_refl_thm\n//   |- !p. p ==\u003E p\n\nimp_right_zero_thm\n//   |- !p. p ==\u003E true\n\nnot_dist_conj_thm\n//   |- !p q. ~ (p /\\ q) \u003C=\u003E ~ p \\/ ~ q\n\n\n\nnot_dist_exists_thm\n//   |- !(P:\u0027a-\u003Ebool). ~ (?x. P x) \u003C=\u003E (!x. ~ P x)\n\nnot_dist_forall_thm\n//   |- !(P:\u0027a-\u003Ebool). ~ (!x. P x) \u003C=\u003E (?x. ~ P x)\n\nnot_dneg_thm\n//   |- !p. ~ ~ p \u003C=\u003E p\n\nselect_eq_thm\n//   |- !(a:\u0027a). (@x. x = a) = a\n\nskolem_thm\n//   |- !(P:\u0027a-\u003E\u0027b-\u003Ebool). (!x. ?y. P x y) \u003C=\u003E (?f. !x. P x (f x))\n\nuexists_thm1\n//   |- !(P:\u0027a-\u003Ebool). (?!x. P x) \u003C=\u003E (?x. P x /\\ (!y. P y ==\u003E y = x))\n\nuexists_thm2\n//   |- !(P:\u0027a-\u003Ebool). (?!x. P x) \u003C=\u003E (?x. !y. P y \u003C=\u003E x = y)\n\nuexists_thm3\n//   |- !(P:\u0027a-\u003Ebool). (?!x. P x)\n//                     \u003C=\u003E (?x. P x) /\\ (!x\u0027 x\u0027\u0027. P x\u0027 /\\ P x\u0027\u0027 ==\u003E x\u0027 = x\u0027\u0027)\n\nuexists_one_point_thm\n//   |- !(P:\u0027a-\u003Ebool) a. (?!x. x = a /\\ P x) \u003C=\u003E P a\n\nunique_skolem_thm\n//   |- !(P:\u0027a-\u003E\u0027b-\u003Ebool). (!x. ?!y. P x y) \u003C=\u003E (?f. !x y. P x y \u003C=\u003E f x = y)\n\n\n\n\n(**\nPAIRS\n----\n*)\n\nfst_snd_thm\n//   |- !(p:\u0027a#\u0027b). (FST p, SND p) = p\n\nfst_thm\n//   |- !(x:\u0027a) (y:\u0027b). FST (x,y) = x\n\npair_eq_thm\n//   |- !(x:\u0027a) (y:\u0027b) u v. (x,y) = (u,v) \u003C=\u003E x = u /\\ y = v\n\npair_surjective_thm\n//   |- !(p:\u0027a#\u0027b). ?x y. p = (x,y)\n\nsnd_thm\n//   |- !(x:\u0027a) (y:\u0027b). SND (x,y) = y\n\n(**\nINDIVIDUALS\n----\n*)\n\nind_suc_injective_thm\n//   |- !i j. IND_SUC i = IND_SUC j \u003C=\u003E i = j\n\nind_suc_not_zero_thm\n//   |- !i. ~ (IND_SUC i = IND_ZERO)\n\n(**\nNATURAL NUMBERS\n----\n*)\n\nadd_assoc_thm\n//   |- !l m n. l \u002B (m \u002B n) = (l \u002B m) \u002B n\n\n//add_comm_thm\n//   |- !m n. m \u002B n = n \u002B m\n\n//add_dist_left_suc_thm\n//   |- !m n. (SUC m) \u002B n = SUC (m \u002B n)\n\n//add_dist_right_suc_thm\n//   |- !m n. m \u002B (SUC n) = SUC (m \u002B n)\n\n//add_eq_cancel_thm\n//   |- !l m n. l \u002B n = m \u002B n \u003C=\u003E l = m\n\n//add_eq_zero_thm\n//   |- !m n. m \u002B n = 0 \u003C=\u003E m = 0 /\\ n = 0\n\n//add_id_thm\n//   |- !n. n \u002B 0 = n\n\n//add_le_cancel_thm\n//   |- !l m n. l \u002B n \u003C= m \u002B n \u003C=\u003E l \u003C= m\n\n//add_lt_cancel_thm\n//   |- !l m n. l \u002B n \u003C m \u002B n \u003C=\u003E l \u003C m\n\n//add_sub_cancel_thm\n//   |- !m n. (m \u002B n) - n = m\n\n//even_suc_thm\n//   |- !n. EVEN (SUC n) \u003C=\u003E ~ EVEN n\n\n//exp_dist_right_add_thm\n//   |- !l m n. l EXP (m \u002B n) = (l EXP m) * (l EXP n)\n\n//exp_dist_right_suc_thm\n//   |- !m n. m EXP (SUC n) = m * m EXP n\n\n//exp_right_id_thm\n//   |- !n. n EXP 1 = n\n\n//exp_right_zero_thm\n//   |- !n. n EXP 0 = 1\n\n//le_antisym_thm\n//   |- !m n. m \u003C= n /\\ n \u003C= m ==\u003E m = n\n\n//le_cases_thm\n//   |- !m n. m \u003C= n \u003C=\u003E m \u003C n \\/ m = n\n\n//le_refl_thm\n//   |- !n. n \u003C= n\n\n//le_trans_thm\n//   |- !l m n. l \u003C= m /\\ m \u003C= n ==\u003E l \u003C= n\n\n//le_zero_thm\n//   |- !n. n \u003C= 0 \u003C=\u003E n = 0\n\n//lt_asym_thm\n//   |- !m n. ~ (m \u003C n /\\ n \u003C m)\n\n//lt_irrefl_thm\n//   |- !n. ~ (n \u003C n)\n\n//lt_suc_cases_thm\n//   |- !m n. m \u003C SUC n \u003C=\u003E m = n \\/ m \u003C n\n\n//lt_suc_le_thm\n//   |- !m n. m \u003C SUC n \u003C=\u003E m \u003C= n\n\n//lt_suc_thm\n//   |- !n. n \u003C SUC n\n\n//lt_trans_thm\n//   |- !l m n. l \u003C m /\\ m \u003C n ==\u003E l \u003C n\n\n//lt_zero_cases_thm\n//   |- !n. n = 0 \\/ 0 \u003C n\n\n//mult_assoc_thm\n//   |- !l m n. l * (m * n) = (l * m) * n\n\n//mult_comm_thm\n//   |- !m n. m * n = n * m\n\n//mult_dist_left_add_thm\n//   |- !l m n. (l \u002B m) * n = l * n \u002B m * n\n\n//mult_dist_left_suc_thm\n//   |- !m n. (SUC m) * n = n \u002B m * n\n\n//mult_dist_right_add_thm\n//   |- !l m n. l * (m \u002B n) = l * m \u002B l * n\n\n//mult_dist_right_suc_thm\n//   |- !m n. m * SUC n = m \u002B (m * n)\n\n//mult_eq_cancel_thm\n//   |- !l m n. ~ (l = 0) ==\u003E (l * m = l * n \u003C=\u003E m = n)\n\n//mult_eq_zero_thm\n//   |- !m n. m * n = 0 \u003C=\u003E m = 0 \\/ n = 0\n\n//mult_id_thm\n//   |- !n. n * 1 = n\n\n//mult_le_cancel_thm\n//   |- !l m n. ~ (l = 0) ==\u003E (l * m \u003C= l * n \u003C=\u003E m \u003C= n)\n\n//mult_lt_cancel_thm\n//   |- !l m n. ~ (l = 0) ==\u003E (l * m \u003C l * n \u003C=\u003E m \u003C n)\n\n//mult_zero_thm\n//   |- !n. n * 0 = 0\n\n//nat_cases_thm\n//   |- !n. n = 0 \\/ (?m. n = SUC m)\n\n//nat_induction_thm\n//   |- !P. P 0 /\\ (!n. P n ==\u003E P (SUC n)) ==\u003E (!n. P n)\n\n//nat_recursion_thm\n//   |- !(e1:\u0027a) e2. ?F. F 0 = e1 /\\ (!n. F (SUC n) = e2 (F n) n)\n\n//not_lt_cases_thm\n//   |- !m n. ~ (m \u003C n) \u003C=\u003E n = m \\/ n \u003C m\n\n//not_lt_zero_thm\n//   |- !n. ~ (n \u003C 0)\n\n//odd_suc_thm\n//   |- !n. ODD (SUC n) \u003C=\u003E ~ ODD n\n\n//one_not_zero_thm\n//   |- ~ (1 = 0)\n\n//one_odd_thm\n//   |- ODD 1\n\n//pre_suc_thm\n//   |- !n. PRE (SUC n) = n\n\n//pre_zero_thm\n//   |- PRE 0 = 0\n\n//sub_cancel_thm\n//   |- !n. n - n = 0\n\n//sub_dist_right_suc_thm\n//   |- !m n. m - SUC n = PRE (m - n)\n\n//sub_floor_thm\n//   |- !m n. m \u003C= n ==\u003E m - n = 0\n\n//sub_right_id_thm\n//   |- !n. n - 0 = n\n\n//suc_add_thm\n//   |- !n. SUC n = n \u002B 1\n\n//suc_injective_thm\n//   |- !m n. SUC m = SUC n \u003C=\u003E m = n\n\n//suc_le_cancel_thm\n//   |- !m n. SUC m \u003C= SUC n \u003C=\u003E m \u003C= n\n\n//suc_le_lt_thm\n//   |- !m n. SUC m \u003C= n \u003C=\u003E m \u003C n\n\n//suc_lt_cancel_thm\n//   |- !m n. SUC m \u003C SUC n \u003C=\u003E m \u003C n\n\n//suc_not_zero_thm\n//   |- !n. ~ (SUC n = 0)\n\n//suc_one_thm\n//   |- SUC 1 = 2\n\n//suc_sub_suc_thm\n//   |- !m n. SUC m - SUC n = m - n\n\n//suc_twice_odd_thm\n//   |- !n. ODD (SUC (2 * n))\n\n//suc_zero_thm\n//   |- SUC 0 = 1\n\n//twice_even_thm\n//   |- !n. EVEN (2 * n)\n\n//twice_thm\n//   |- !n. 2 * n = n \u002B n\n\n//two_not_zero_thm\n//   |- ~ (2 = 0)\n\n//zero_even_thm\n//   |- EVEN 0\n\n//zero_le_thm\n//   |- !n. 0 \u003C= n\n\n//zero_lt_suc_thm\n//   |- !n. 0 \u003C SUC n\n\n//zero_lt_thm\n//   |- !n. 0 \u003C n \u003C=\u003E ~ (n = 0)\n\n//zero_not_odd_thm\n//   |- ~ ODD 0\n\n//********************************************************************************"},{"uri":"http://localhost:8901/goaltree.html","title":"goaltree","content":"#load \u0022avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n\n([],\u0022!p q r. p /\\ (q \\/ r) \u003C=\u003E (p /\\ q) \\/ (p /\\ r)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E conj_rule_bk [0] [0]\n|\u003E disj_cases_rule_bk [0] [] [] \u0022(p /\\ q)\u0022 \u0022(p /\\ r)\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022r:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022(p /\\ q)\u0022 \u0022(p /\\ r)\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [0] [0] \u0022q:bool\u0022 \u0022r:bool\u0022\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n\n|\u003E disj1_rule_bk\n|\u003E conj_rule_bk [0] [1]\n|\u003E conjunct1_rule_bk \u0022q \\/ r\u0022\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n\n|\u003E disj2_rule_bk\n|\u003E conj_rule_bk [0] [1]\n|\u003E conjunct1_rule_bk \u0022q \\/ r\u0022\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n//|\u003E view\n|\u003E root\n|\u003E linearizeProof\n"},{"uri":"http://localhost:8901/A5_Inference_Rules.html","title":"Regole d\u0027inferenza\n","content":"(**\nRegole d\u0027inferenza\n==================\n\nQuesta appendice fornisce una descrizione delle regole d\u0027inferenza\n*)\n\n(**\n\nRegole primitive\n----------------\n\n$\\dfrac\n{t}\n{\\vdash t = t}\n\\textsf{ refl_conv}\n$\n\nQuesta \u0026egrave; la regola di riflessivit\u0026agrave; per l\u0027uguaglianza. Prende un \ntermine, e restituisce un teorema che afferma che il termine \u0026egrave; uguale a \nse stesso, senza alcuna assunzione. Non ci sono restrizioni al termine fornito.\n\nSi veda anche: sym\\_conv, sym\\_rule, trans\\_rule.\n\n$\\dfrac\n{(\\lambda x. t)\\ s}\n{\\vdash (\\lambda x. t)\\ s = t[s/x]}\n\\textsf{ beta_conv}\n$\n\nQuesta \u0026egrave; la conversione di beta riduzione. Prende una lambda astrazione \napplicata a un termine, e restituisce un teorema che afferma che l\u0027applicazione \n\u0026egrave; uguale al corpo della lambda astrazione con tutte le occorrenze della \nvariabile legata sostituita con l\u0027argomento dell\u0027apllicazione, senza alcuna \nassunzione.\n\n$\\dfrac\n{A_1 \\vdash f_1 = f_2 \\qquad  A_2 \\vdash t_1 = t_2}\n{A_1 \\cup A_2 \\vdash f_1\\ t_1 = f_2\\ t_2}\n\\textsf{ mk_comb_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza di eguaglianza per l\u0027applicazione di \nfunzione. Prende due teoremi di equivalenza, e applica i corrispondenti lati del \nprimo teorema a quelli del secondo, unendo le loro assunzioni. I lati sinistro e \ndestro del primo teorema devono essere funzioni con il tipo del dominio uguale al \ntipo dei lati sinistro e destro del secondo teorema.\n\nSi veda anche: mk\\_comb1\\_rule, mk\\_comb2\\_rule, mk\\_bin\\_rule, mk\\_abs\\_rule.\n\n$\\dfrac\n{x \\qquad A \\vdash t_1 = t_2}\n{A \\vdash (\\lambda x.\\ t_1) = (\\lambda x.\\ t_2))}\n\\textsf{ mk_abs_rule}\n$\n\n(per x non libera in A)\n\nQuesta \u0026egrave; la regola di congruenza di eguaglianza per la lambda astrazione.\nPrende una variabile e un teorema di uguaglianza, e astrae la variabile da \nentrambi i lati del teorema. La variabile non deve occorrere libera nelle \nassunzioni del teorema fornito.\n\nSi veda anche: mk\\_comb\\_rule.\n\n$\\dfrac\n{p}\n{p \\vdash p}\n\\textsf{ assume_rule}\n$\n\nQuesta \u0026egrave; la regola di assunzione. Prende un termine booleano, e restituisce \nun teorema che afferma che il termine vale sotto la singola assunzione del termine \nstesso.\n\nSi veda anche: add\\_asm\\_rule.\n\n$\\dfrac\n{p \\qquad A \\vdash q}\n{A \\setminus \\{p\\} \\vdash p \\Rightarrow q}\n\\textsf{ disch_rule}\n$\n\nQuesta \u0026egrave; la regola d\u0027intrdouzone dell\u0027implicazione. Prende un termine booleano \ne un teorema, rimuove il termine (se presente) dalle assunzioni del teorema e lo \naggiunge come antecedente della conclusione. Si noti che il termine non deve essere \npresente nelle assunzioni del teorema fornito perch\u0026eacute; la regola abbia \nsuccesso.\n\nSi veda anche: undisch\\_rule, mp\\_rule.\n\n$\\dfrac\n{A_1 \\vdash p \\Rightarrow q \\qquad A_2 \\vdash p}\n{A_1 \\cup A_2 \\vdash q}\n\\textsf{ mp_rule}\n$\n\nQuesta \u0026egrave; la regola di modus ponens. Prende un teorema di implicazione ed \nun secondo teorema, dove l\u0027antecendente del teorema di implicazione \u0026egrave; \nalfa-equivalente alla conclusione del secondo teorema. Restituisce un teorema che \nafferma che vale il conseguente del teorema di implicazione, sotto l\u0027unione delle \nassunzioni dei teoremi forniti.\n\nSi veda anche: eq\\_mp\\_rule, disch\\_rule, undisch\\_rule, prove\\_asm\\_rule.\n\n$\\dfrac\n{A_1 \\vdash p \\Leftrightarrow q \\qquad A_2 \\vdash p}\n{A_1 \\cup A_2 \\vdash q}\n\\textsf{ eq_mp_rule}\n$\n\nQuesta \u0026egrave; la regola di modus ponens per l\u0027uguaglianza. Prende un teorema di \nuguaglianza e un secondo teorema, dove il lato sinistro del teorema \u0026egrave; \nalf-equivalente alla conclusione del secondo teorema. Restituisce un teorema che \naggerma la parte destra del teorema di uguaglianza vale, sotto l\u0027unione delle \nassunzioni dei teoremi forniti.\n\nSi veda anche: mp\\_rule, eq\\_imp\\_rule1, eq\\_imp\\_rule2, imp\\_antisym\\_rule.\n\n$\\dfrac\n{[(x_1,t_1);(x_2,t_2);\\dots] \\qquad   A \\vdash p}\n{A[t_1/x_1,t_2/x_2,\\dots] \\vdash p[t_1/x_1,t_2/x_2,\\dots]}\n\\textsf{ inst_rule}\n$\n\nQuesta \u0026egrave; la regola d\u0027istanziazione della variabile. Prende una lista di \ninstanziazioni di variabili e un teorema, ed esegue una singola instanziazione \nparallela delle variabili libere nelle assunzioni e nella conclusione del teorema, \nsecondo la lista di instanziazioni. Tutte le occorrenze libere di elementi nel dominio \ndella lista di instanziazione sono sostituite nel teorema. Ciascun elemento del dominio \ndella lista di instanziazione deve essere una variabile, e ciascun elemento nel rango \ndeve avere lo stesso tipo del corrispondente elemento del dominio.\n\nLe variabili legate nel teorema risultante sono rinominate a seconda delle \nnecessit\u0026agrave; per evitare catture di variabili. Si noti che gli elementi della \nlista che non possono essere applicati sono semplicemente ignorati, cos\u0026igrave; \ncome lo sono gli elementi ripetuti per una data variabile (oltre al primo elemento). \nSe nessun elemento della lista soddisfa i criteri, allora il teorema risultante \n\u0026egrave; lo stesso del teorema in input.\n\nSi veda anche: inst\\_type\\_rule, subs\\_rule, subst\\_rule.\n\n$\\dfrac\n{[(tv_1,ty_1);(tv_2,ty_2);\\dots] \\qquad   A \\vdash p}\n{A[ty_1/tv_1,ty_2/tv_2,\\dots] \\vdash p[ty_1/tv_1,ty_2/tv_2,\\dots]}\n\\textsf{ inst_type_rule}\n$\n\nQuesta \u0026egrave; la regola d\u0027istanziazione delle variabili di tipo. Prende una lista di \ninstanziazioni di variabili di tipo e un teorema, ed esegue una singola instanziazione \nparallela delle variabili di tipo nelle assunzioni e nella conclusione del teorema, secondo \nla lista di instanziazione. Tutte le occorrenze di elementi nel dominio della lista \ndi instanziazione sono sostituite nel teorema. Ciascun elemento del dominio della \nlista deve essere una variabile di tipo.\n\nLe variabili legate nel teorema risultante sono rinominate a seconda delle \nnecessit\u0026agrave; per evitare catture di variabili. Si noti che gli elementi della \nlista che non possono essere applicati sono semplicemente ignorati, cos\u0026igrave; \ncome lo sono gli elementi ripetuti per una data variabile (oltre al primo elemento). \nSe nessun elemento della lista soddisfa i criteri, allora il teorema risultante \n\u0026egrave; lo stesso del teorema in input.\n\nSi veda anche: inst\\_rule.\n\nEguaglianza\n----------------\n\n$\\dfrac\n{A \\vdash f_1 = f_2 \\qquad t}\n{A \\vdash f_1\\ t = f_2\\ t}\n\\textsf{ mk_comb1_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza di eguaglianza di funzioni per l\u0027applicazione di \nfunzioni. Prende un teorema di equivalenza su funzioni e un termine, e fornisce \nil termine come argomento a ciascun lato del teorema. Il tipo del termine fornito \ndeve essere lo stesso del tipo del dominio delle funzioni.\n\nDerivazione:\n\n$\\tiny{\n\\dfrac\n    {\n        A \\vdash f_1 = f_2 \n        \\qquad \n        \\dfrac\n            {t}\n            {\\vdash t = t}\n            \\textsf{ refl_conv}    \n    }\n    {A \\vdash f_1\\ t = f_2\\ t}\n    \\textsf{ mk_comb_rule}\n}$\n\nSi veda anche: mk\\_comb2\\_rule, mk\\_comb\\_rule.\n\n$\\dfrac\n{f \\qquad  A \\vdash t_1 = t_2}\n{A \\vdash f\\ t_1 = f\\ t_2}\n\\textsf{ mk_comb2_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza di eguaglianza di argomenti per l\u0027applicazione di \nfunzioni. Prende un termine funzione e un teorema di uguaglianza, ed applica la \nfunzione a ciascun lato del teorema. Il tipo del dominio della funzione fornita deve \nessere lo stesso del tipo dei lati sinitro e destro del teorema.\n\nDerivazione:\n\n$\\tiny{\n\\dfrac\n    {\n        \\dfrac\n            {f}\n            {\\vdash f = f}\n            \\textsf{ refl_conv} \n        \\qquad \n        A \\vdash t_1 = t_2 \n    }\n    {A \\vdash f\\ t_1 = f\\ t_2}\n    \\textsf{ mk_comb_rule}\n}$\n\nSi veda anche: mk\\_comb1_rule, mk\\_comb\\_rule.\n\n$\\dfrac\n{A_1 \\vdash t_1 = t_2 \\qquad  A_2 \\vdash t_2 = t_3}\n{A_1 \\cup A2 \\vdash t_1 = t_3}\n\\textsf{ trans_rule}\n$\n\nQuesta \u0026egrave; la regola di transitivit\u0026agrave; per l\u0027uguaglianza. Prende \ndue teoremi di uguaglianza, dove il lato destro del primo teorema \u0026egrave; \nlo stesso (modulo alfa-equivalenza) del lato sinistro del secondot. Restituisce \nun teorema che afferma che il lato sinistro del primo teorema uguaglia il \nlato destro del secondo teorema, sotto l\u0027unione delle assunzioni dei due \nteoremi.\n\nSi veda anche: list\\_trans\\_rule, refl\\_conv, sym\\_rule, imp\\_trans\\_rule.\n\n$\\dfrac\n{A \\vdash t_1 = t_2}\n{A \\vdash t_2 = t_1}\n\\textsf{ sym_rule}\n$\n\nQuesta \u0026egrave; la regola di simmetria per l\u0027uguaglianza. Scambia il lato \nsinistro con il destro nel teorema di uguaglianza fornito.\n\nSi veda anche: sym\\_conv, refl\\_conv, trans\\_rule.\n\n$\\dfrac\n{A \\vdash f = (\\lambda v.\\ t)  \\qquad s}\n{A \\vdash f\\ s = t[s/v]}\n\\textsf{ app_beta_rhs_rule}\n$\n\nQuesta regola \u0026egrave; utilizzata per espandere una funzione definita in termini \ndi una lambda astrazione. Prende un teorema di uguaglianza e un termine, dove \nla parte destra del teorema \u0026egrave; una lambda astrazione con una variabile \nlegata dello stesso tipo del termine argomento. Restituisce un teorema che \nafferma che l\u0027argomento sinistro del teorema applicato al termine in input \n\u0026egrave; uguale alla beta riduzione della lambda astrazione applicata al termine \nin input.\n\n**list\\_app\\_beta\\_rhs\\_rule**\n\nda documentare...\n\n$\\dfrac\n{A \\vdash (\\lambda v_1. t_1) = (\\lambda v_2. t_2)  \\qquad s}\n{A \\vdash t_1[s/v_1] = t_2[s/v_2]}\n\\textsf{ app_beta_rule}\n$\n\nSi veda anche: app\\_beta\\_rhs\\_rule.\n\n**list\\_app\\_beta\\_rule**\n\nDa documentare...\n\n$\\dfrac\n{t\u0027 \\qquad t}\n{\\vdash t = t\u0027}\n\\textsf{ alpha_link_conv}\n$\n\nQuesta \u0026egrave; la regola di conversione alfa linking. Prende due termini \nalfa-equivalentei e restituisce un terorema che afferma che il secondo \u0026egrave; \nuguale al primo, senza alcuna assunzione. Fallisce se i termini forniti non sono \nalfa equivalenti.\n\n$\\dfrac\n{y \\qquad \\lambda x.\\ t}\n{\\vdash (\\lambda x.\\ t) = (\\lambda y.\\ t[y/x])}\n\\textsf{ alpha_conv}\n$\n\nQuesta \u0026egrave; la regola di alfa conversione. Sostituisce la variabile legata \ne tutte le sue occorrenze nel termine di lambda astrazione  fornito (il secondo \nargomento) con la variabile fornita (come primo argomento).\n\nSi veda anche alpha\\_link\\_conv.\n\n$\\dfrac\n{A_1 \\vdash s_1 = t_1 \\qquad A_2 \\vdash s_2 = t_2 \\qquad \\dots \\qquad t}\n{A_1 \\cup A_2 \\cup \\dots \\vdash t = t[t_1/s_1,t_2/s_2,\\dots] }\n\\textsf{ subs_conv}\n$\n\nQuesta \u0026egrave; la conversione di sostituzione base. Prende una lista di \nteoremi di eguaglianza e un termine, e trasofrma il termine eseguendo una \nsingola sostituzione parallela di tutti i suoi sottotermini liberi secondo \ni teoremi di eguaglianza. Tutto le occorrenze libere dei lati sinistri dei \nteoremi di eguaglianza nel termine vegono rimpiazzate. Il teorema risultante \nha l\u0027unione delle assunzioni di tutti i teoremi forniti (indipendentemente \ndal fatto che esse si applichino al teorema).\n\nLe variabili legate nel lato destro del teorema risultante sono rinominate \na seconda delle necessit\u0026agrave; per evitare catture di variabili. Si noti \nche se uno dei lati sinistri dei teorei di uguaglianza occorre libero \nin uno degli altri, allora viene usato di preferenza il teorema con il lato \nsinistro pi\u0026ugrave; ampio, e se due teoremi di uguaglianza hanno lati sinistri \nalfa-equivalenti, allora di preferenza \u0026egrave; usato di preferenza il primo \nteorema nella lisa. Se nessuno dei teoremi di eguaglianza pu\u0026ograve; essere \nusato, allora il lato destro del teorema risultante \u0026egrave; lo stesso del \nsuo lato sinistro.\n\nSi veda anche: subs\\_rule, subst\\_conv, inst\\_rule.\n\n$\\dfrac\n{A_1 \\vdash s_1 = t_1 \\qquad A_2 \\vdash s_2 = t_2 \\qquad \\dots \\qquad A \\vdash t}\n{A_1 \\cup A_2 \\cup \\dots \\cup A \\vdash t = t[t_1/s_1,t_2/s_2,\\dots] }\n\\textsf{ subs_rule}\n$\n\nQuesta \u0026egrave; la regola di sostituzione di base. Prende una lista di \nteoremi di equivalenza e un teorema, ed esegue una singola sostituzione \nparallela dei sottotermini liberi nella conclusione del teorema secondo i \nteoremi di equivalenza. Tutte le occorrenze libere dei lati sinistri dei \nteoremi di equivalenza nel teorema vengono rimpiazzate. Il teorema risultante \nha l\u0027unione di tutte le assunzioni di tutti i teoremi forniti (indipendentemente \ndal fatto che questi si applichino o meno al teorema fornito).\n\nLe variabili legate nel teorema risultante sono rinominate \na seconda delle necessit\u0026agrave; per evitare catture di variabili. Si noti \nche se uno dei lati sinistri dei teorei di uguaglianza occorre libero \nin uno degli altri, allora viene usato di preferenza il teorema con il lato \nsinistro pi\u0026ugrave; ampio, e se due teoremi di uguaglianza hanno lati sinistri \nalfa-equivalenti, allora di preferenza \u0026egrave; usato di preferenza il primo \nteorema nella lisa. Se nessuno dei teoremi di eguaglianza pu\u0026ograve; essere \nusato, allora la conclusione del teorema risultante \u0026egrave; la stessa \ndell\u0027input.\n\nSi veda anche: subs\\_conv, subst\\_rule, inst\\_rule.\n\n$\\dfrac\n{(v_1, A_1 \\vdash s_1 = t_1) \\qquad (v_2, A_2 \\vdash s_2 = t_2) \\qquad \\dots \\qquad t \\qquad t[s_1/v_1,s_2/v_2,\\dots]}\n{A_1 \\cup A_2 \\cup \\dots \\vdash t = t[s_1/v_1,s_2/v_2,\\dots] = t[t_1/v_1,t_2/v_2,\\dots]}\n\\textsf{ subst_conv}\n$\n\nQuesta \u0026egrave; la conversione di sostituzione tramite template. Prende uno \nschema di sostituzione (nella forma di una lista di associazione e un termine \ntemplate) seguito da un termine principale, e trasforma il termine principale \ncon una singola sostituzione parallela di tutti i suoi sottotermini liberi, secondo \nlo schema di sostituzione. Il termine template determina quali occorrenze \nlibere dei lati sinistri del teorema di equivalenza nel termine principale sono \nrimpiazzate, e riflette la struttura sintattica del termine, eccetto che per \nl\u0027avere atomi variabili template al posto dei sottotoermini a causa del \nrimpiazzamento. La lista di associazione mappa ogni variabile template a un \nteorema di equivalenza, con il lato sinistro del teorema di equivalenza per \nil sottotermine del termine principale originale e il lato destro per il \nsottotermine che lo rimpiazza. Il teorema risultante ha l\u0027unione delle \nassunzioni di tutti i teoremi forniti (indipenentemente dal fatto che essi \nsi applichino al template fornito).\n\nLe variabili legate nel teorema risultante sono rinominate secondo le \nnecessit\u0026agrave; per evitare catture di variabili. Si noti che se due elementi \nappaiono nella lista di associazione per la stessa variabile template, allora \nviene usato il primo elemento, e che elementi per variabili che non appaiono \nnel template sono ignorate. Se nessun elemento pu\u0026ograve; essere applicato, \nallora il lato destro della conclusione del teorema risultante \u0026egrave; \nlo stesso del suo lato sinistro.\n\nSi veda anche: subst\\_rule, subs\\_conv, inst\\_rule.\n\n$\\dfrac\n{(v_1, A_1 \\vdash s_1 = t_1) \\qquad (v_2, A_2 \\vdash s_2 = t_2) \\qquad \\dots \\qquad t \\qquad A \\vdash t[s_1/v_1,s_2/v_2,\\dots]}\n{A_1 \\cup A_2 \\cup \\dots \\cup A \\vdash t = t[t_1/v_1,t_2/v_2,\\dots]}\n\\textsf{ subst_rule}\n$\n\nQuesta \u0026egrave; la regola di sostituzione tramite template. Prende uno \nschema di sostituzione (nella forma di una lista di associazione e di \nun termine template) seguito da un teorema, ed esegue una singola sostituzione \nparallela di tutti i sottotermini liberi nella conclusione del teorema, secondo \nlo schema di sostituzione. Il termine template determina quali occorrenze \nlibere dei lati sinistri del teorema di equivalenza vengono rimpiazzate nella \nconclusione del teorema, eccetto che variabili atomiche template al posto \ndei sottotermini a causa del rimpiazzamento. La lista di associazione mappa \nogni variabile template a un teorema di equivalenza, con il lato sinistro del \nteorema di equivalenza per il sottotermine del teorema originale fornito e il \nlato destro per il sottotermine che viene sostituito. Il teorema risultante \nha l\u0027unione delle assunzioni di tutti i teoremi forniti (indipenentemente dal \nfatto che essi si applichino al template fornito).\n\nLe variabili di astrazione nel teorema risultante sono rinominate secondo le \nnecessit\u0026agrave; per evitare catture di variabili. Si noti che se due elementi \nappaiono nella lista di associazione per la stessa variabile template, allora \nviene usato il primo elemento, e che elementi per variabili che non appaiono \nnel template sono ignorate. Se nessun elemento pu\u0026ograve; essere applicato, \nallora il lato destro della conclusione del teorema risultante \u0026egrave; \nlo stesso del suo lato sinistro.\n\nSi veda anche: subst\\_conv, subs\\_rule, inst\\_rule.\n\n**conv\\_rule**\n\nRegola di metaconversione.\n\nPrende una regola di conversione \u0060term -\u003E thm\u0060 e un teorema e applica \u0060eq_mp_rule\u0060 alla conclusione \nconvertita e al teorema stesso.\n\nLogica\n------------\n\n$\\dfrac\n{A \\vdash p \\Leftrightarrow \\top}\n{A \\vdash p}\n\\textsf{ eqt_elim_rule}\n$\n\nQuesta \u0026egrave; la regola di eliminazione di equivalenza a vero. Prende un \nteoram di guguaglianza con ha \u0060true\u0060 sul lato destro, e restituisce un \nteorema che afferma che il lato sinistro vale, sotto le stesse assunzioni.\n\nSi veda anche: eqt\\_intro\\_rule, eqf\\_elim\\_rule.\n\n$\\dfrac\n{A \\vdash p \\Rightarrow q}\n{A \\cup \\{p\\} \\vdash q}\n\\textsf{ undisch_rule}\n$\n\nQuesta \u0026egrave; la regola di anti-scaricamento. Prende un teorema di implicazione, \ne rimuove l\u0027antecedente dalla conclusione e lo aggiunge nelle assunzioni.\n\nSi veda anche: disch\\_rule, mp\\_rule, prove\\_asm\\_rule.\n\n$\\dfrac\n{q \\qquad A \\vdash p}\n{A \\cup \\{q\\} \\vdash p}\n\\textsf{ add_asm_rule}\n$\n\nQuesta \u0026egrave; la regola di aggiunta di un\u0027assunzione. Prende un termine booleano \ne un teorema e restituisce lo stesso teorema ma con il termine fornito aggiunto \nalle sue assunzioni. Il teorema restituito in output coincide con quello fornito in input \nse il termine \u0026egrave; gi\u0026agrave; presente nelle assunzioni.\n\n$\\dfrac\n{A_1 \\vdash p \\qquad A_2 \\vdash q}\n{A_1 \\cup (A_2 \\setminus \\{p\\}) \\vdash q}\n\\textsf{ prove_asm_rule}\n$\n\nQuesta \u0026egrave; la regola di assunzione provata. Prende due teoremi, e \nrestituisce il secondo teorema ma con la conclusione del primo teorema \nrimossa (se presente) dalle sue assunzioni a cui sono aggiunte le assunzioni \ndel primo teorema. Si noti che la conclusione del primo teorema non deve \nessere nelle assunzioni del secondo affinch\u0026egrave; questa regola abbia \nsuccesso.\n\nSi veda anche: mp\\_rule, undisch\\_rule.\n\n$\\dfrac\n{A \\vdash p \\Leftrightarrow q}\n{A \\vdash p \\Rightarrow q}\n\\textsf{ eq_imp_rule1}\n$\n\nQuesta \u0026egrave; la prima regola di eliminazione dell\u0027equivalenza.\nPrende un teorema che afferma l\u0027equivalenza di due termini booleani, e \nrestituisce un teorema che afferna che il sinistro implica il destro, \nsotto le stesse assunzioni.\n\nSi veda anche: eq\\_imp\\_rule2, imp\\_antisym\\_rule, eq\\_mp\\_rule, undisch\\_rule, mk\\_imp\\_rule.\n\n$\\dfrac\n{A \\vdash p \\Leftrightarrow q}\n{A \\vdash q \\Rightarrow p}\n\\textsf{ eq_imp_rule2}\n$\n\nQuesta \u0026egrave; la seconda regola di eliminazione dell\u0027equivalenza.\nPrende un teorema che afferma l\u0027equivalenza di due termini booleani, e \nrestituisce un teorema che afferna che il destro implica il sinistro, \nsotto le stesse assunzioni.\n\nSi veda anche: eq\\_imp\\_rule1, imp\\_antisym\\_rule, eq\\_mp\\_rule, undisch\\_rule, mk\\_imp\\_rule.\n\n$\\dfrac\n{A \\vdash p \\Rightarrow \\bot}\n{A \\vdash \\neg p}\n\\textsf{ not_intro_rule}\n$\n\nQuesta \u0026egrave; la regola di introduzione della negazione logica. Prende un \nteorema di implicazione dove il lato destro \u0026egrave; \u0060false\u0060, e restituisce la \nnegazione logica del lato sinistro, sotto le stesse assunzioni.\n\nSi veda anche: not\\_elim\\_rule, eqf\\_elim\\_rule, eqf\\_intro\\_rule, deduct\\_contrapos\\_rule.\n\n$\\dfrac\n{A \\vdash \\neg p}\n{A \\vdash p \\Rightarrow \\bot}\n\\textsf{ not_elim_rule}\n$\n\nQuesta \u0026egrave; la regola di eliminazione della negazione logica. Prende \nun teorema di negazione logica, e restituisce un\u0027implicazione con \nil termine negato sul lato sinistro e \u0060false\u0060 sul lato destro, sotto le \nstesse assunzioni.\n\nSi veda anche: not\\_intro\\_rule, eqf\\_intro\\_rule, eqf\\_elim\\_rule.\n\n$\\dfrac\n{q \\qquad A \\vdash p}\n{A \\cup \\{\\neg p\\} \\setminus \\{q\\} \\vdash \\neg q}\n\\textsf{ deduct_contrapos_rule}\n$\n\nQuesta \u0026egrave; la regola di contraddizione per la deduzione. Scambia e \nnega logicamente il termine dell\u0027assunzione fornita e la conclusione del \nteorema fornito. Si noti che il termine fornito non deve essere presente \nnelle assunzioni del teorema di input perhc\u0026eacute; la regola abbia successo. \nSe la negazione logica della conclusione del teorema in input coincide con \nil termine fornito, allora non occorrer\u0026agrave; nelle assunzioni del teorema \nrisultante.\n\nSee also: not\\_intro\\_rule, disch\\_rule, contr\\_rule, ccontr\\_rule.\n\n$\\dfrac\n{A \\vdash p \\Leftrightarrow \\bot}\n{A \\vdash \\neg p}\n\\textsf{ eqf_elim_rule}\n$\n\nQuesta \u0026egrave; la regola di eliminazione di equivalenza a falso. Prende un \nteoram di equivalenza con la \u0060false\u0060 sulla destra, e restituisce la negazione \nlogica del lato sinistro, sotto le stesse assunzioni.\n\nSi veda anche: eqf\\_intro\\_rule, not\\_intro\\_rule, not\\_elim\\_rule, mk\\_not\\_rule,\neqt\\_elim\\_rule, deduct\\_contrapos\\_rule.\n\n$\\dfrac\n{A_1 \\vdash p \\Rightarrow q \\qquad A_2 \\vdash q \\Rightarrow r}\n{A_1 \\cup A_2 \\vdash p \\Rightarrow r}\n\\textsf{ imp_trans_rule}\n$\n\nQuesta \u0026egrave; la regola di transitivt\u0026agrave; per l\u0027implicazione. Prende due \nteoremi d\u0027implicazione come argomenti, dove il lato destro del primo teorema \n\u0026egrave; lo stesso (modulo alfa-equivalenza) del lato sinistro del secondo. \nRestituisce un teorema che afferma che il lato sinistro del primo teorema \nimplica il lato destro del secondo, sotto l\u0027unione delle assunzione dei due \nteoremi.\n\nSi veda anche: list\\_imp\\_trans\\_rule, eq\\_trans\\_rule, disch\\_rule, imp\\_anitsym\\_asm\\_rule.\n\n**list\\_imp\\_trans\\_rule**\n\nSi veda anche: imp\\_trans\\_rule.\n\n$\\dfrac\n{t \\qquad A \\vdash \\forall x\\ \\dots p}\n{A \\vdash p[t/x]}\n\\textsf{ spec_rule}\n$\n\nQuesta \u0026egrave; la regola di eliminazine universale. Spoglia il \nquantificatore universale pi\u0026ugrave; esterno del teorema, e sostituisce nel corpo ciascuna \noccorrenza della variabile legata eliminata con il termine fornito. \nIl tipo del termine fornito deve essere uguale al tipo della variabile eliminata.\n\nSi veda anche: spec\\_rule, spec\\_all\\_rule, bspec\\_rule, list\\_gen\\_rule.\n\n$\\dfrac\n{[t_1;t_2;\\dots] \\qquad A \\vdash \\forall x_1\\ x_2\\ \\dots p}\n{A \\vdash p[t_1/x_1; t_2/x_2; \\dots]}\n\\textsf{ list_spec_rule}\n$\n\nQuesta \u0026egrave; la regola di eliminazine universale composta. Spoglia il \nquantificatore universale pi\u0026ugrave; esterno del teorema fornito per \nogni elemento nella lista di termini fornita, sostituendo nel corpo ciascuna \noccorrenza di una variabile legata eliminata con il corrispondente elemento \nnella lista di termini. Il tipo di ogni termine nella lista deve essere \nuguale al tipo della sua corrispondente variabile.\n\nSi veda anche: spec\\_rule, spec\\_all\\_rule, bspec\\_rule, list\\_gen\\_rule.\n\n$\\dfrac\n{A \\vdash \\forall x_1\\ x_2 \\dots x_n.\\ p}\n{A \\vdash p}\n\\textsf{ spec_all_rule}\n$\n\nQuesta \u0026egrave; la regola composta di eliminazione di default del quantificatore \nuniversale. Elimina tutti i quantificatori universali esterni dal teorema fornito. \nSi noti che il teorema fornito non deve necessariamente essere una quantificazione \nuniversale perch\u0026egrave; il teorema abbia successo (in  questo caso il teorema \nrisultante \u0026egrave; semplicemente lo stesso del teorema fornito):\n\nSi veda anche: spec\\_rule, list\\_spec\\_rule, bspec\\_rule, list\\_gen\\_rule.\n\n$\\dfrac\n{\\lambda y.\\ t \\qquad A \\vdash \\forall x.\\ p}\n{A \\vdash p[\\lambda y.\\ t\\ /\\ x; t[s/y] /\\ x\\ s]}\n\\textsf{ bspec_rule}\n$\n\nQuesta \u0026egrave; la regola di eliminazione del quantifcatore universale con \nbeta-riduzione. Toglie il quantificatore universale pi\u0026ugrave; esterno dal \nteorema fornito, e sostituisce nel corpo ogni occorrenza della variabile legata \neliminata con il termine fornito. Se il termine in input \u0026egrave; una lambda \nastrazione, esegue anche la beta riduzione di ogni occorrenza sostituita che \nsia applicata ad un argomento. Il tipo del termine fornito deve essere uguale \nal tipo della variabile legata eliminata.\n\nSi veda anche: spec\\_rule, list\\_spec\\_rule, spec\\_all\\_rule, gen\\_rule.\n\n$\\dfrac\n{p \\qquad A \\vdash \\bot}\n{A \\vdash p}\n\\textsf{ contr_rule}\n$\n\nQuesta \u0026egrave; la regola di contraddizione della logica intuizionista. Prende \nun termine booleano e un teorema con falso come conclusione. Restituisce un \nteorema con il termine fornito come sua conclusione, sotto le stess assunzioni \ndel teorema fornito.\n\nSee also: ccontr\\_rule, deduct\\_contrapos\\_rule.\n\n$\\dfrac\n{\\lambda x.\\ f\\ x}\n{A \\vdash (\\lambda x.\\ f\\ x) = f}\n\\textsf{ eta_conv}\n$\n\nQuesta \u0026egrave; la regola di eta riduzione. Prende un termine di lambda \nastrazione, dove il corpo \u0026egrave; un\u0027applicazione di funzione, e la variabile \nlegata \u0026egrave; il sottotermine argomento dell\u0027applicazione della funzione e \nnon \u0026egrave; libera nel sottotermine funzione. Restituisce un teoream che \nafferma che il termine \u0026egrave; uguale al sottotermine funzione, senza alcuna \nassunzione.\n\nSi veda anche: beta\\_conv.\n\n$\\dfrac\n{A_1 \\vdash p \\Rightarrow q \\qquad A_2 \\vdash q \\Rightarrow p}\n{A_1 \\cup A_2 \\vdash p \\Leftrightarrow q}\n\\textsf{ imp_antisym_rule}\n$\n\nQuesta \u0026egrave; la regola di antisimmetria per l\u0027implicazione. Prende due \nteoremi di implicazione come argomenti, dove il lato sinistro di ciascuno \n\u0026egrave; lo stesso (modulo alfa-equivalenza) del lato destro dell\u0027altro. \nRestituisce \n\nSi veda anche: list\\_gen\\_rule, spec\\_rule, mk\\_forall\\_rule.\n\n$\\dfrac\n{A_1 \\vdash p  \\qquad A_2 \\vdash q }\n{A_1 \\setminus \\{q\\} \\cup A_2 \\setminus \\{p\\} \\vdash p \\Leftrightarrow q}\n\\textsf{ deduct_antisym_rule}\n$\n\nQuesta \u0026egrave; la regola di antisimmetria per la deduzione. Prende due \nteoremi come argomenti. Restituisce un teorema che afferma che le conclusioni \nfornite sono equivalente, sotto l\u0027unione delle assunzioni ma con la conclusione \ndi un teorema rimossa dalle assunzioni dell\u0027altro\n\nSee also: imp\\_antisym\\_rule, undisch\\_rule.\n\n$\\dfrac\n{t_1 = t_2}\n{\\vdash t_1 = t_2 \\Leftrightarrow t_2 = t_2}\n\\textsf{ sym_conv}\n$\n\nQuesta \u0026egrave; la conversione di simmetria per l\u0027uguaglianza. Trasforma il \ntermine di ugualianza fornito scambiando il lato sinistro con il destro, senza \nalcuna assunzione.\n\nSi veda anche: sym\\_rule, refl\\_conv.\n\n$\\dfrac\n{A \\vdash p}\n{A \\vdash p \\Leftrightarrow \\top}\n\\textsf{ eqt_intro_rule}\n$\n\nQuesta \u0026egrave; la regola di introduzione di equivalenza a vero. Prende un \nqualsiasi teorema, e restituisce il teorema che afferma che la conclusione \n\u0026egrave; equivalente a \u0060true\u0060, sotto le stesse assunzioni.\n\nSi veda anche: eqt\\_elim\\_rule, eq\\f_intro\\_rule.\n\n$\\dfrac\n{A \\vdash \\neg p}\n{A \\vdash p \\Leftrightarrow \\bot}\n\\textsf{ eqf_intro_rule}\n$\n\nQuesta \u0026egrave; la regola di introduzione di equivalenza a falso. Prende un \nteoram con la negazione logica come sua conclusione, e restituisce un teoram \nche afferma che il corpo della negazione \u0026egrave; equivalente a \u0060false\u0060, sotto \nle stesse assunzioni.\n\nSi veda anche: eqf\\_elim\\_rule, not\\_elim\\_rule, not\\_intro\\_rule, mk\\_not\\_rule,\neqt\\_intro\\_rule.\n\n$\\dfrac\n{x \\qquad A \\vdash p}\n{A \\vdash \\forall x.\\ p}\n\\textsf{ gen_rule}\n$\n\nper x non libera in A \n\nQuesta \u0026egrave; di introduzione del quantificatore universale. Quantifica \nuniversamente il teorema fornito con la variabile legata fornita sotto le \nstesse assunzioni. La variabile legata non deve comparire libera nelle \nassunzioni.\n\nSi veda anche: list\\_gen\\_rule, spec\\_rule, mk\\_forall\\_rule.\n\n$\\dfrac\n{[x_1;x_2;\\dots] \\qquad A \\vdash p}\n{A \\vdash \\forall x_1\\ x_2\\ \\dots\\ .\\ p}\n\\textsf{ list_gen_rule}\n$\n\nper $x_1, x_2, \\dots$ non libere in A \n\n$\\dfrac\n{A_1 \\vdash p \\qquad A_2 \\vdash q}\n{A_1 \\cup A_2 \\vdash p \\wedge q}\n\\textsf{ conj_rule}\n$\n\nQuesta \u0026egrave; la regola di e-introduzione. Congiunge i due teoremi forniti\ne unisce le loro assunzioni.\n\nSi veda anche: conjunct1\\_rule, conjunct2\\_rule, mk\\_conj\\_rule.\n\n$\\dfrac\n{A \\vdash p \\wedge q}\n{A \\vdash p}\n\\textsf{ conjunct1_rule}\n$\n\nQuesta \u0026egrave; la regola di e-eliminazione a sinistra. Rimuove il \ncongiunto a destra dal teorema di congiuzione fornito.\n\nSi veda anche: conjunct2\\_rule, conjunct\\_rule, mk\\_conj\\_rule.\n\n$\\dfrac\n{A \\vdash p \\wedge q}\n{A \\vdash q}\n\\textsf{ conjunct2_rule}\n$\n\nQuesta \u0026egrave; la regola di e-eliminazione a destra. Rimuove il \ncongiunto a sinistra dal teorema di congiuzione fornito.\n\nSi veda anche: conjunct1\\_rule, conjunct\\_rule, mk\\_conj\\_rule.\n\n$\\dfrac\n{A \\vdash p \\vee q \\qquad A_1 \\vdash r \\qquad A_2 \\vdash r}\n{A \\cup A_1 \\setminus \\{p\\} \\cup A_2 \\setminus \\{q\\} \\vdash r}\n\\textsf{ disj_cases_rule}\n$\n\nQuesta \u0026egrave; la regola di o-eliminazione. Prende un teorema di disgiunzione \ne due teoremi extra che condividono la stessa conclusione. Restituisce un \nteorema con la stessa conclusione dei teoremi extra. Le assunzioni del teorema \nrestituito sono l\u0027unione delle assunzioni dei teoremi extra, ma con il \nlato sinistro del teorema di disgiunzione rimosso dalle assunzioni del primo \ne il lato destro rimosso da quelle del secondo, e unite insieme con le \nassunzioni del teorema di disgiunzione.\n\nSi veda anche: disj1\\_rule, disj2\\_rule, mk\\_disj\\_rule.\n\n$\\dfrac\n{A \\vdash p \\qquad q}\n{A \\vdash p \\vee q}\n\\textsf{ disj1_rule}\n$\n\nQuesta \u0026egrave; la regola di o-introduzione per il lato sinistro. Disgiunge il \ntermine booleano fornito al lato destro del teorema in input.\n\nSi veda anche: disj2\\_rule, disj\\_cases\\_rule, mk\\_disj1\\_rule.\n\n$\\dfrac\n{p \\qquad A \\vdash q}\n{A \\vdash p \\vee q}\n\\textsf{ disj2_rule}\n$\n\nQuesta \u0026egrave; la regola di o-introduzione per il lato destro. Disgiunge il \ntermine booleano fornito al lato sinistro del teorema in input.\n\nSi veda anche: disj2\\_rule, disj\\_cases\\_rule, mk\\_disj1\\_rule.\n\n$\\dfrac\n{y \\qquad A_1 \\vdash \\exists x.\\ p \\qquad A_2 \\vdash q}\n{A_1 \\cup A_2 \\setminus \\{p[y/x]\\} \\vdash q}\n\\textsf{ choose_rule}\n$\n\ncon $y$ non libera in: $\\exists x.\\ p$, $q$ o $A_2 \\setminus \\{p[y/x]\\}$\n\nQuesta \u0026egrave; la regola di eliminazione del quantificatore esistenziale.\nRimuove, dalle assunzioni di un teorema principale fornito, il corpo di un \nteorema esistenziale fornito (ma con tutte le occorrenze della variabile \nlegata sostituite con una variabile fornita), e aggiunge le assunzioni del \nteorema esistenziale. Alla variabile fornita non \u0026egrave; permesso di essere \nlibera nella conclusione del teorema esistenziale o nelle altre assuzioni del \nteorema principale originario o nella sua conclusione. Si noti che il corpo \nalterato del teorema esistenziale non deve essere presente nelle assunzioni \ndel teorema principale affinch\u0026eacute; questa regola abbia successo.\n\nSee also: exists\\_rule, mk_exists\\_rule.\n\nRegole di congruenza per l\u0027uguaglianza\n------------------\n\n$\\dfrac\n{f \\qquad A_1 \\vdash s_1 = s_2 \\qquad A_2 \\vdash t_1 = t_2}\n{A_1 \\cup A_2 \\vdash f\\ s_1\\ t_1 = f\\ s_2\\ t_2}\n\\textsf{ mk_bin_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza di eguaglianza per l\u0027applicazione di \nfunzione binaria. Prende un termine di funzione binaria e due teoremi di \neguaglianza, e applica la funzione nella forma curried ai corrispondenti \nlati di ciascun teorema, sotto l\u0027unione delle loro assunzioni. Il tipo \ndella funzione fornita deve avere essere binario nella forma curried, con i tipi \ndel primo e del secondo dominio uguali al tipo di ciascun lato del teorema \ncorrispondente.\n\nSi veda anche: mk\\_comb\\_rule.\n\n$\\dfrac\n{f \\qquad \\vdash s_1 = s_2 \\qquad t}\n{\\vdash f\\ s_1\\ t = f\\ s_2\\ t}\n\\textsf{ mk_bin1_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza di eguaglianza per l\u0027applicazione di \nfunzione binaria sul lato sinistro. Prende un termine di funzione binaria, un \nteorema di uguaglianza e un termine, e applica la funzione in forma curried \nai lati corrispondenti del teorema come suo lato sinistro e il termine fornito \ncome lato destro. Il tipo della funzione fornita deve avere essere binario \nnella forma curried, con il tipo del primo dominio uguale al tipo di ciascun \nlato del teorema e il secondo dominio uguale al tipo del termine argomento \naggiunto a destra.\n\n\nSi veda anche: mk\\_bin2\\_rule, mk\\_bin\\_rule, mk\\_comb\\_rule.\n\n$\\dfrac\n{f \\qquad s \\qquad \\vdash t_1 = t_2}\n{\\vdash f\\ s\\ t_1 = f\\ s\\ t_2}\n\\textsf{ mk_bin2_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza di eguaglianza per l\u0027applicazione di \nfunzione binaria sul lato destro. Prende un termine di funzione binaria, un \nteorema di uguaglianza e un termine, e applica la funzione in forma curried \nal termine fornito sul lato sinistro e ai lati corrispondenti del teorema \ncome suo lato destro. Il tipo della funzione fornita deve avere essere binario \nnella forma curried, con il tipo del primo dominio uguale al tipo del termine \nargomento a sinistra, e il tipo del secondo dominio uguale al tipo di ciascun \nlato del teorema.\n\nSi veda anche: mk\\_bin1\\_rule, mk\\_bin\\_rule, mk\\_comb\\_rule.\n\n$\\dfrac\n{A_1 \\vdash s_1 = s_2 \\qquad A_2 \\vdash t_1 = t_2}\n{A_1 \\cup A_2 \\vdash s_1 = t_1 \\Leftrightarrow s_2 = t_2}\n\\textsf{ mk_eq_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per l\u0027eguaglianza. \nPrende due teoremi di uguaglianza, e uguaglia i corrispondenti lati del \nprimo teorema con quelli del secondo, unendone le assunzioni. I tipi di \nciascun lato di ogni equazione devono essere uguali.\n\nSi veda anche: mk\\_eq1\\_rule, mk\\_eq2\\_rule, mk\\_eq\\_rule.\n\n$\\dfrac\n{A \\vdash s_1 = s_2 \\qquad t}\n{A \\vdash s_1 = t \\Leftrightarrow s_2 = t}\n\\textsf{ mk_eq1_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per l\u0027eguaglianza \nsul lato sinistro. Prende un teorema di uguaglianza e un termine, e uguaglia \nogni lato del teorema con il termine fornito. Il tipo del termine fornito \ndeve essere uguale al tipo di ciascun lato del teorema fornito.\n\nSi veda anche: mk\\_eq2\\_rule, mk\\_eq\\_rule, mk\\_eq1\\_rule.\n\n$\\dfrac\n{s \\qquad A \\vdash t_1 = t_2}\n{A \\vdash s = t_1 \\Leftrightarrow s = t_2}\n\\textsf{ mk_eq2_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per l\u0027eguaglianza \nsul lato destro. Prende un termine e un teorema di eguaglianza, e uguaglia \nil termine a ciascun lato del teorema. Il tipo del termine fornito deve \nessere uguale al tipo di cascun lato del teorema fornito.\n\nSi veda anche: mk\\_eq1\\_rule, mk\\_eq\\_rule, mk\\_eq1\\_rule.\n\n$\\dfrac\n{A \\vdash p_1 \\Leftrightarrow p_2}\n{A \\vdash \\neg p_1 \\Leftrightarrow \\neg p_2}\n\\textsf{ mk_not_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la negazione \nlogica, Prende un teorema di eguaglianza booleana, e nega logicamente \nciascun lato del teorema.\n\nSi veda anche: mk\\_comb\\_rule, eqf\\_intro\\_rule, eqf\\_elim\\_rule.\n\n$\\dfrac\n{A_1 \\vdash p_1 \\Leftrightarrow p_2 \\qquad A_2 \\vdash q_1 \\Leftrightarrow q_2}\n{A_1 \\cup A_2 \\vdash p_1 \\wedge p_2 \\Leftrightarrow q_1 \\wedge q_2 }\n\\textsf{ mk_conj_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza per la congiunzione. Prende due teoremi \ndi egualianza boolena, e congiunge i corrispondenti lati del rpimo teorema \ncon quelli del secondo, unendone le assunzioni.\n\nSi veda anche: mk\\_conj1\\_rule, mk\\_conj2\\_rule, mk\\_bin\\_rule, conj\\_rule.\n\n$\\dfrac\n{A \\vdash p_1 \\Leftrightarrow p_2 \\qquad q}\n{A \\vdash p_1 \\wedge q \\Leftrightarrow p_2 \\wedge q}\n\\textsf{ mk_conj1_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza per il lato sinistro della congiunzione. \nPrende un teorema di eguaglianza booleana e un termine booleano, e congiunge \nciaszun lato del teorema con il termine fornito\n\nSi veda anche: mk\\_conj2\\_rule, mk\\_conj\\_rule, mk\\_bin1\\_rule, conj\\_rule.\n\n$\\dfrac\n{p \\quad A \\vdash q_1 \\Leftrightarrow q_2}\n{A \\vdash p \\wedge q_1 \\Leftrightarrow p \\wedge q_2}\n\\textsf{ mk_conj2_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza per il lato destro della congiunzione. \nPrende un termine booleano e un teorema di eguaglianza booleana, e congiunge il \ntermine fornito con ciascun lato del teorema.\n\nSi veda anche: mk\\_conj1\\_rule, mk\\_conj\\_rule, mk\\_bin1\\_rule, conj\\_rule.\n\n$\\dfrac\n{A_1 \\vdash p_1 \\Leftrightarrow p_2 \\quad A_2 \\vdash q_1 \\Leftrightarrow q_2}\n{A_1 \\cup A_2 \\vdash p_1 \\vee q_1 \\Leftrightarrow p_2 \\vee q_2}\n\\textsf{ mk_disj_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza per la disgiunzione, Prende due \nteoremi di eguaglianza booleana, e disgiunge i corrispondenti lati del \nprimo teorema con quelli del secondo, unendone le assunzioni.\n\nSi veda anche: mk\\_disj1\\_rule, mk\\_disj2\\_rule, mk\\_bin\\_rule, disj1\\_rule, disj2\\_rule.\n\n$\\dfrac\n{A \\vdash p_1 \\Leftrightarrow p_2 \\quad q}\n{A \\vdash p_1 \\vee q \\Leftrightarrow p_2 \\vee q}\n\\textsf{ mk_disj1_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la disgiunzione sul \nlato sinistro. Prende un teorema di eguaglianza booleana e un termine booleano, \ne disgiunge ogni lato del teorema con il termine fornito.\n\nSi veda anche: mk\\_disj2\\_rule, mk\\_disj\\_rule, mk\\_bin1\\_rule, disj1\\_rule.\n\n$\\dfrac\n{p \\qquad A \\vdash q_1 \\Leftrightarrow q_2}\n{A \\vdash p \\vee q_1 \\Leftrightarrow p \\vee q_2}\n\\textsf{ mk_disj2_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la disgiunzione sul \nlato destro. Prende un termine booleano e un teorema di eguaglianza booleana, \ne disgiunge il termine fornito con ogni lato del teorema.\n\nSi veda anche: mk\\_disj1\\_rule, mk\\_disj\\_rule, mk\\_bin1\\_rule, disj2\\_rule.\n\n$\\dfrac\n{A_1 \\vdash p_1 \\Leftrightarrow p_2 \\quad A_2 \\vdash q_1 \\Leftrightarrow q_2}\n{A_1 \\cup A_2 \\vdash p_1 \\Rightarrow q_1 \\Leftrightarrow p_2 \\Rightarrow q_2}\n\\textsf{ mk_imp_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per l\u0027implicazione. \nPrende due teoremi di eguaglianza booleana, e crea l\u0027implicazione dai \ncorrispondeti lati del primo e del secondo teorema, unendone le assunzioni.\n\nSi veda anche: mk\\_imp1\\_rule, mk\\_imp2\\_rule, mk\\_bin\\_rule.\n\n$\\dfrac\n{A \\vdash p_1 \\Leftrightarrow p_2 \\quad q}\n{A \\vdash p_1 \\Rightarrow q \\Leftrightarrow p_2 \\Rightarrow q}\n\\textsf{ mk_imp1_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per l\u0027implicazione \nsu lato sinistro. Prende un teorema di eguaglianza booleana e un termine \nbooleano, e crea le implicazioni da ogni lato del teorema, con il lato \ndel teorema come antecedente e il termine come conseguente.\n\nSi veda anche: mk\\_imp2\\_rule, mk\\_imp\\_rule, mk\\_bin1\\_rule\n\n$\\dfrac\n{p \\qquad A \\vdash q_1 \\Leftrightarrow q_2}\n{A \\vdash p \\Rightarrow q_1 \\Leftrightarrow p \\Rightarrow q_2}\n\\textsf{ mk_imp2_rule}\n$\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per l\u0027implicazione \nsu lato destro. Prende un termine booleano e un teorema di eguaglianza \nbooleana, e rende il termine un antecedente di ciascun lato del teorema.\n\nSi veda anche: mk\\_imp1\\_rule, mk\\_imp\\_rule, mk\\_bin2\\_rule\n\n$\\dfrac\n{x \\qquad A \\vdash p_1 \\Leftrightarrow p_2}\n{A \\vdash (\\forall x.\\ p_1) \\Leftrightarrow (\\forall x.\\ p_2) }\n\\textsf{ mk_forall_rule}\n$\n\nper \u0060x\u0060 non libera in \u0060A\u0060\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la quantificazione \nuniversale. Prende una variabile e un teorema di uguaglianza, e quantifica \nuniversalmente la variabile su entrambi i lati del teorema. La variabile \nnon deve occorrere libera nelle assunzioni del teorema fornito\n\nSi veda anche: mk\\_abs\\_rule, mk\\_comb\\_rule, gen\\_rule.\n\n$\\dfrac\n{x \\qquad A \\vdash p_1 \\Leftrightarrow p_2}\n{A \\vdash (\\exists x.\\ p_1) \\Leftrightarrow (\\exists x.\\ p_2) }\n\\textsf{ mk_exists_rule}\n$\n\nper \u0060x\u0060 non libera in \u0060A\u0060\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la quantificazione \nesistenziale. Prende una variabile e un teorema di uguaglianza, e quantifica \nin modo esistenzaiale la variabile su entrambi i lati del teorema. La variabile \nnon deve occorrere libera nelle assunzioni del teorema fornito\n\nSi veda anche: mk\\_uexists\\_rule, mk\\_abs\\_rule, mk\\_comb\\_rule, exists\\_rule.\n\n$\\dfrac\n{x \\qquad A \\vdash p_1 \\Leftrightarrow p_2}\n{A \\vdash (\\exists ! x.\\ p_1) \\Leftrightarrow (\\exists ! x.\\ p_2) }\n\\textsf{ mk_uexists_rule}\n$\n\nper \u0060x\u0060 non libera in \u0060A\u0060\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la quantificazione \nesistenziale univoca. Prende una variabile e un teorema di eguaglianza, e \nquantifica con quantificatore esistenziale univoco la variabile su \nentrambi i lato del teorema. La variabile non deve occorrere libera \nnelle assunzioni del teorema fornito.\n\nSi veda anche: mk\\_exists\\_rule, mk\\_abs\\_rule, mk\\_comb\\_rule       \n\n$\\dfrac\n{x \\qquad A \\vdash p_1 \\Leftrightarrow p_2}\n{A \\vdash (\\epsilon x.\\ p_1) \\Leftrightarrow (\\epsilon x.\\ p_2) }\n\\textsf{ mk_uexists_rule}\n$\n\nper \u0060x\u0060 non libera in \u0060A\u0060\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la selezione.\nPrende una variabile e un teorema di eguaglianza, e seleziona la variabile \nda entrambi i lati del teorema. La variabile non deve occorrere libera \nnelle assunzioni del teorema.\n\nSi veda anche: mk\\_abs\\_rule, mk\\_comb\\_rule.\n\nLogica classica\n------------------\n\n$\\dfrac\n{A \\vdash \\exists x.\\ p}\n{A \\vdash p[(\\epsilon x. p)/x]}\n\\textsf{ select_rule}\n$\n\nQuesta \u0026egrave; la regola di selezione esistenziale. Elimina il \nquantificatore esistenziale del teorema fornito, e sostituisce nel corpo \nogni occorrenza della variabile legata con l\u0027operatore di selezione \napplicato al corpo originario (con la stessa variabile legata).\n\nSi veda anche: exists\\_rule.\n\n$\\dfrac\n{\\exists x.\\ p \\qquad t \\qquad A \\vdash p[t/x]}\n{A \\vdash \\exists x.\\ p}\n\\textsf{ exists_rule}\n$\n\nQuesta \u0026egrave; la regola di intruduzione esistenzial. Prende un termine esistenziale,\nun termine testimone e un teorema, dove la conclusionde del teorema \u0026egrave; il corpo \ndel termine esistenziale ma con il termine testimone che sostituisce le occorrenze \ndella sua variabile legata. Restituisce un teorema che afferma che il termine esistenziale \nfornito vale, sotto le stesse assunzioni del teorema fornito.\n\n$\\dfrac\n{p \\qquad A \\vdash \\bot}\n{A \\setminus \\{\\neg p\\} \\vdash p}\n\\textsf{ ccontr_rule}\n$\n\nQuesta \u0026egrave; la regola contraddizione della logica classica. Prende un termine \nbooleano e un teorema con falso come sua conclusione. Restituisce un teorema con \nil termine fornito come sua conclusione, e con le stesse assunzioni del teorema \nfornito ma con la negazione logica del termine fornito rimossa. Si noti che la \nnegazione logica del termine fornito non deve essere necessariamente presente \nnelle assunzioni del teorema affinch\u0026eacute; questa regola abbia successo.\n\nSi veda anche: contr\\_rule, deduct\\_contrapos\\_rule.\n\n\n\nwork in progress...\n*)\n\n\n\n\n#I \u0022../src/bin/Debug/net7.0\u0022\n#r \u0022nholz.dll\u0022\nopen HOL\n\n(**\n\n| NatEval.eval\\_add\\_conv                  \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per l\u0027addizione numerale. Prende \nun termine della forma \u0060m \u002B n\u0060, dove \u0060m\u0060 e \u0060n\u0060 sono entrambi numeri naturali, \ne restituisce un teorema che afferma che questo equivale al suo valore numerale, \nsenza assunzioni.\n\nSi veda anche: eval\\_sub\\_conv, eval\\_mult\\_conv, eval\\_exp\\_conv.\n\n*)\n\neval_add_conv\n\n///    \u0060m \u002B n\u0060                                                             \n/// ------------                                                           \n/// |- m \u002B n = z \n\n(**\n\n| NatEval.eval\\_even\\_conv                     \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per la parit\u0026agrave; per un numerale. \nPrende un termine della forma \u0060Even n\u0060, dove \u0060n\u0060 \u0026egrave; un numerale per un numero \nnaturale, e restituisce un teorema che afferma il suo valore booleano, \nsenza assunzioni.\n\nSi veda anche: eval\\_odd\\_conv.\n\n*)\n\neval_even_conv\n\n//     \u0060EVEN n\u0060                                                         \n// ---------------                                                      \n// |- EVEN n \u003C=\u003E z    \n\n\n(**\n\n| NatEval.eval\\_exp\\_conv                     \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per l\u0027esponenziazione numerale.\nPrende un termine della forma \u0060m EXP n\u0060, dove \u0060m\u0060 e \u0060n\u0060sono entrambi numerali \ndi numeri naturali, e restituisce un teorema che afferma che questo equivale \nal suo valore, senza assunzioni.\n\nSi veda anche: eval\\_add\\_conv, eval\\_sub\\_conv, eval\\_mult\\_conv.\n\n*)\n\neval_exp_conv\n\n//    \u0060m EXP n\u0060                                                          \n// --------------                                                        \n// |- m EXP n = z    \n\n(**\n\n| NatEval.eval\\_ge\\_conv                     \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione il confronto maggiore-o-uguale-a.\nPrende un termine della forma \u0060m \u003E= n\u0060, dove \u0060m\u0060 e \u0060n\u0060sono entrambi numerali \ndi numeri naturali, e restituisce un teorema che afferma che questo equivale \nal suo valore booleano, senza assunzioni.\n\nSi veda anche: eval\\_gt\\_conv, eval\\_le\\_conv, eval\\_lt\\_conv, eval\\_nat\\_eq\\_conv.\n\n*)\n\neval_ge_conv\n\n//      \u0060m \u003E= n\u0060\n//  ---------------\n//  |- m \u003E= n \u003C=\u003E z\n\n(**\n\n| NatEval.eval\\_gt\\_conv                    \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione il confronto maggiore-di.\nPrende un termine della forma \u0060m \u003E n\u0060, dove \u0060m\u0060 e \u0060n\u0060sono entrambi numerali \ndi numeri naturali, e restituisce un teorema che afferma che questo equivale \nal suo valore booleano, senza assunzioni.\n\nSi veda anche: eval\\_ge\\_conv, eval\\_le\\_conv, eval\\_lt\\_conv, eval\\_nat\\_eq\\_conv.\n\n*)\n\neval_gt_conv\n\n//      \u0060m \u003E n\u0060    \n//  -------------- \n//  |- m \u003E n \u003C=\u003E z \n\n(**\n\n| NatEval.eval\\_le\\_conv                    \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per il confronto minore-o-uguale-a.\nPrende un termine della forma \u0060m \u003C= n\u0060, dove \u0060m\u0060 e \u0060n\u0060sono entrambi numerali \ndi numeri naturali, e restituisce un teorema che afferma che questo equivale \nal suo valore booleano, senza assunzioni.\n\nSi veda anche: eval\\_lt\\_conv, eval\\_ge\\_conv, eval\\_gt\\_conv, eval\\_nat\\_eq\\_conv.\n\n*)\n\neval_le_conv\n\n//        \u0060m \u003C= n\u0060                               \n//    --------------                            \n//    |- m \u003C= n \u003C=\u003E z\n\n(**\n\n| NatEval.eval\\_lt\\_conv                    \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per il confronto minore-di.\nPrende un termine della forma \u0060m \u003C n\u0060, dove \u0060m\u0060 e \u0060n\u0060sono entrambi numerali \ndi numeri naturali, e restituisce un teorema che afferma che questo equivale \nal suo valore booleano, senza assunzioni.\n\nSi veda anche: eval\\_le\\_conv, eval\\_ge\\_conv, eval\\_gt\\_conv, eval\\_nat\\_eq\\_conv.\n\n*)\n\neval_lt_conv\n\n//        \u0060m \u003C n\u0060                               \n//    --------------                            \n//    |- m \u003C n \u003C=\u003E z\n\n(** Es. *)\n\n\u002212 \u003C 7\u0022 |\u003E parse_term |\u003E eval_lt_conv\n// val it : thm = |- 12 \u003C 7 \u003C=\u003E false\n\n\u00227 \u003C 12\u0022 |\u003E parse_term |\u003E eval_lt_conv\n// val it : thm = |- 7 \u003C 12 \u003C=\u003E true\n\n(**\n\n| NatEval.eval\\_mult\\_conv                \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per la moltiplicazione numerale. \nPrende un termine della forma \u0060m * n\u0060, dove \u0060m\u0060 e \u0060n\u0060 sono entrambi numerali di \nnumeri naturali, e restituisce un teorema che afferma che questo equivale al \nsuo valore numerale, senza assunzioni.\n\nSi veda anche: eval\\_add\\_conv, eval\\_sub\\_conv, eval\\_exp\\_conv.\n\n*)\n\neval_mult_conv\n\n//     \u0060m * n\u0060                                                            \n//  ------------                                                          \n//  |- m * n = z\n\n(** Es. *)\n\n\u002212 * 7\u0022 |\u003E parse_term |\u003E eval_mult_conv\n// val it : thm = |- 12 * 7 = 84\n\n(**\n\n| NatEval.eval\\_nat\\_eq\\_conv                   \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per l\u0027eguaglianza numerica. \nPrende un termine della forma \u0060m = n\u0060, dove \u0060m\u0060 e \u0060n\u0060 sono entrambi numerali di \nnumeri naturali, e restituisce un teorema che afferma che questo equivale al \nsuo valore booleano, senza assunzioni.\n\nSi veda anche: eval\\_le\\_conv, eval\\_lt\\_conv, eval\\_ge\\_conv, eval\\_gt\\_conv.\n\n*)\n\neval_nat_eq_conv\n\n//      \u0060m = n\u0060                                                            \n//  --------------                                                         \n//  |- m = n \u003C=\u003E z   \n\n(**\n\n| NatEval.eval\\_odd\\_conv                   \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per la disparit\u0026agrave; numerale. \nPrende un termine della forma \u0060ODD n\u0060, dove \u0060n\u0060 \u0026egrave; un numerale di un numero \nnaturale, e restituisce un teorema che afferma il suo valore booleano, senza \nassunzioni.\n\nSi veda anche: eval\\_even\\_conv.\n\n*)\n\neval_odd_conv\n\n//      \u0060ODD n\u0060                                                            \n//  --------------                                                         \n//  |- ODD n \u003C=\u003E z \n\n\n(**\n\n| NatEval.eval\\_pre\\_conv                  \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per il predcessore numerale. Prende \nun termine della forma \u0060PRE n\u0060, dove \u0060n\u0060 \u0026egrave, un numerale di un numero naturale, \ne restituisce un teorema che afferma che questo equivale al suo valore numerale, \nsenza assunzioni.\n\nSi veda anche: eval\\_suc\\_conv.\n\n*)\n\neval_pre_conv\n\n//     \u0060PRE n\u0060                                                         \n//  ------------                                                       \n//  |- PRE n = z   \n\n(**\n\n| NatEval.eval\\_sub\\_conv                  \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per la sottrazione numerale. Prende \nun termine della forma \u0060m - n\u0060, dove \u0060m\u0060 e \u0060n\u0060 sono entrambi numerali di numeri \nnaturali, e restituisce un teorema che afferma che questo equivale al suo \nvalore numerale, senza assunzioni.\n\nSi veda anche: eval\\_add\\_conv, eval\\_mult\\_conv, eval\\_exp\\_conv.\n\n*)\n\neval_sub_conv\n\n//     \u0060m - n\u0060                                                         \n//  ------------                                                       \n//  |- m - n = z  \n\n\n(**\n\n| NatEval.eval\\_suc\\_conv                  \n-------------------\n\nQuesta \u0026egrave; la conversione di valutazione per il successore numerale. Prende \nun termine della forma \u0060SUCC n\u0060, dove \u0060n\u0060 \u0026egrave; un numerale per un numero naturale, \ne restituisce un teorema che afferma che questo equivale al suo valore numerale, \nsenza assunzioni.\n\nSi veda anche: eval\\_add\\_conv, eval\\_mult\\_conv, eval\\_exp\\_conv.\n\n*)\n\neval_suc_conv\n\n//     \u0060SUC n\u0060                                                            \n//  ------------                                                          \n//  |- SUC n = z     \n\n(**\n\n| BoolClass.eval\\_sub\\_conv                  \n-------------------\n\nQuesta \u0026egrave; di introduzione del quantificatore esistenziale. Prende \nun termine esistenziale, un termine testimone, e un teorema, dove la conclusione \ndel teorea \u0026egrave; il corpo del termine esistenziale ma con il termine testimone \nche sostituisce le occorrenze della sua variabile legata. Restituisce un teorema \nche afferma che il termine esistenziale fornito vale, sotto le stesse \nassunzioni del teorema fornito.\n\nSi veda anche: choose\\_rule, select\\_rule, mk\\_exists\\_rule.\n\n*)\n\n\n\n(**\n\n| Pair.mk\\_pair\\_rule\n-------------------\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per l\u0027accoppiamento.\nPrende due teoremi di uguaglianza, e accoppia i corrispondenti lati del \nprimo teorema con quelli del secondo, unendone le assunzioni\n\nSi veda anche: mk\\_pair1\\_rule, mk\\_pair2\\_rule, mk\\_bin\\_rule.\n\n*)\n\nmk_pair_rule\n\n//  A1 |- x1 = x2    A2 |- y1 = y2                                       \n//  ------------------------------                                       \n//   A1 u A2 |- (x1,y1) = (x2,y2)    \n\n(**\n\n| Pair.mk\\_pair1\\_rule\n-------------------\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la coppia a \nsinistra. Prende un teorema di uguaglianza e un termine, e accoppia ogni \nlato del teorema con il termine.\n\nSi veda anche: mk\\_pair2\\_rule, mk\\_pair\\_rule, mk\\_bin1\\_rule.\n\n*)\n\nmk_pair1_rule\n\n//    A |- x1 = x2   \u0060y\u0060                                                  \n//   --------------------                                                 \n//   A |- (x1,y) = (x2,y) \n\n(**\n\n| Pair.mk\\_pair2\\_rule\n-------------------\n\nQuesta \u0026egrave; la regola di congruenza dell\u0027eguaglianza per la coppia a \ndestra. Prende un termine un teorema di uguaglianza, e accoppia il termine \ncon ogni lato del teorema.\n\nSi veda anche: mk\\_pair1\\_rule, mk\\_pair\\_rule, mk\\_bin2\\_rule.\n\n*)\n\nmk_pair2_rule\n\n///     \u0060x\u0060   A |- y1 = y2                                                    \n///    --------------------                                                   \n///    A |- (x,y1) = (x,y2)  \n\n   \n"},{"uri":"http://localhost:8901/index.html","title":"Manuale\n","content":"(**\nManuale\n==================\n\n1. [Introduzione](1_Introduzione.html)\n2. [Il linguaggio HOL](3_Liguaggio_HOL.html)\n3. [Appendice A5 - Regole d\u0027inferenza](A5_Inference_Rules.html)\n4. [Appendice B1 - Teorie](B1_Teorie.html)\n5. [Appendice B2 - Teoremi](B2_Teoremi.html)\n\n[Teorie.xlsx](Teorie.xlsx)\n*)"},{"uri":"http://localhost:8901/teoremi/0018_disj_idem.html","title":"Disj Idem\n","content":"(**\nDisj Idem\n=============\n\n$\\vdash \\forall p.\\ p \\vee p \\Leftrightarrow p$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ndisj_idem_thm\n// |- !p. p \\/ p \u003C=\u003E p\n\nlet p = \u0022p:bool\u0022 |\u003E parse_term\nlet th1 = assume_rule p                                  //      p |- p\nlet th2 = disj1_rule th1 p                               //      p |- p \\/ p\nlet th3 = assume_rule (@\u0022p \\/ p\u0022 |\u003E parse_term)          // p \\/ p |- p \\/ p\nlet th4 = disj_cases_rule th3 th1 th1                    // p \\/ p |- p\nlet th7 = deduct_antisym_rule th2 th4                    //        |- p \\/ p \u003C=\u003E p\nlet th8 = gen_rule p th7                                 //        |- !p. p \\/ p \u003C=\u003E p\n\n(***hide***)\n//let th1 = assume_rule_tr p                          \n//let th2 = disj1_rule_tr th1 p                       \n//let th3 = assume_rule_tr (@\u0022p \\/ p\u0022 |\u003E parse_term)  \n//let th4 = disj_cases_rule_tr th3 th1 th1            \n//let th7 = deduct_antisym_rule_tr th2 th4            \n//let th8 = gen_rule_tr p th7                         \n(***unhide***)\n\n(**\n$\n\\small{ \t\n\\dfrac\n\t{p:bool\n\t\\qquad\n\t\\dfrac\n\t\t{\\dfrac\n\t\t\t{\\dfrac\n\t\t\t\t{p:bool}\n\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ assume_rule}\n\t\t\t\\qquad\n\t\t\tp:bool}\n\t\t\t{p\\ \\vdash\\ p\\ \\vee\\ p}\n\t\t\t\\textsf{ disj1_rule}\n\t\t\\qquad\n\t\t\\dfrac\n\t\t\t{\\dfrac\n\t\t\t\t{p\\ \\vee\\ p}\n\t\t\t\t{p\\ \\vee\\ p\\ \\vdash\\ p\\ \\vee\\ p}\n\t\t\t\t\\textsf{ assume_rule}\n\t\t\t\\qquad\n\t\t\t\\dfrac\n\t\t\t\t{p:bool}\n\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ assume_rule}\n\t\t\t\\qquad\n\t\t\t\\dfrac\n\t\t\t\t{p:bool}\n\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t{p\\ \\vee\\ p\\ \\vdash\\ p}\n\t\t\t\\textsf{ disj_cases_rule}}\n\t\t{\\vdash\\ p\\ \\vee\\ p\\ \\Leftrightarrow\\ p}\n\t\t\\textsf{ deduct_antisym_rule}}\n\t{\\vdash\\ \\forall\\ p.\\ p\\ \\vee\\ p\\ \\Leftrightarrow\\ p}\n\t\\textsf{ gen_rule} }\n$\n*)"},{"uri":"http://localhost:8901/teoremi/0033_select_eq.html","title":"0033_select_eq","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nselect_eq_thm\n\n([],\u0022!(a:\u0027a). (@x. x = a) = a\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E select_rule_bk \u0022?(x:a). x = a\u0022\n|\u003E exists_rule_bk \u0022a:a\u0022\n|\u003E refl_conv_bk\n\n|\u003E view\n\nlet a = (parse_term(@\u0022a:\u0027a\u0022))\n\ngen_rule_fd a\n    (select_rule_fd\n      (* |- ?x. x = a      *)\n      (exists_rule_fd (parse_term(@\u0022?(x:\u0027a).x=a\u0022)) a (refl_conv_fd a)) )\n|\u003E zipper\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0032_forall_null.html","title":"0032_forall_null","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nforall_null_thm\n\nlet th = \u0022t:bool\u0022 |\u003E parse_term |\u003E assume_rule\nlet th2 = gen_rule (\u0022x:a\u0022 |\u003E parse_term) th\n\n([],\u0022!t. (!(x:\u0027a). t) \u003C=\u003E t\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E gen_rule_bk\n|\u003E assume_rule_bk\n|\u003E spec_rule_bk (\u0022x:a\u0022,\u0022x:a\u0022) \u0022!(x:a). t\u0022\n|\u003E assume_rule_bk\n//|\u003E view\n|\u003E root\n|\u003E linearizeProof\n"},{"uri":"http://localhost:8901/teoremi/0001_truth.html","title":"Vero\n","content":"(**\nVero\n=============\n\n$\\vdash \\top$\n*)\n\n\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ntruth_thm\n(*** include-fsi-output ***)\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022true\u0022)\n|\u003E start_proof\n(* |- true                        *)\n|\u003E eq_mp_rule_bk [] [] \u0022(\\(p:bool). p) = \\p. p\u0022\n    (* |- (\\p. p) = (\\p. p) \u003C=\u003E true  *)\n    |\u003E sym_rule_bk\n        (* |- true \u003C=\u003E (\\(p:bool). p) = (\\p. p) *)\n        |\u003E by true_def \u0022true_def\u0022\n    (* |- (\\p. p) = (\\p. p)           *)\n    |\u003E refl_conv_bk\n|\u003E view\n|\u003E loc_thm |\u003E Option.get\n\n// val it : thm = |- true\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{\\color{green}{\\dfrac\n\t\t{\\dfrac\n\t\t\t{}\n\t\t\t{\\vdash\\ \\top\\ \\Leftrightarrow\\ (\\lambda\\ (p:bool).\\ p)\\ =\\ (\\lambda\\ p.\\ p)}\n\t\t\t\\textsf{ true_def}}\n\t\t{\\vdash\\ (\\lambda\\ (p:bool).\\ p)\\ =\\ (\\lambda\\ p.\\ p)\\ \\Leftrightarrow\\ \\top}\n\t\t\\textsf{ sym_rule}}\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\lambda\\ (p:bool).\\ p}\n\t\t{\\vdash\\ (\\lambda\\ (p:bool).\\ p)\\ =\\ (\\lambda\\ p.\\ p)}\n\t\t\\textsf{ refl_conv}}}\n\t{\\vdash\\ \\top}\n\t\\textsf{ eq_mp_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\n//(* |- true                        *)\neq_mp_rule_fd\n    (* |- (\\p. p) = (\\p. p) \u003C=\u003E true  *)\n    (sym_rule_fd (true_def |\u003E thm_fd \u0022true\\_def\u0022))\n    (* |- (\\p. p) = (\\p. p)           *)\n    (refl_conv_fd (parse_term(@\u0022\\(p:bool).p\u0022)))\n|\u003E zipper |\u003E view |\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- true\n\n(**\nClassic forward proof without tree\n*)\n\n//(* |- true                        *)\neq_mp_rule\n    (* |- (\\p. p) = (\\p. p) \u003C=\u003E true  *)\n    (sym_rule true_def)\n    (* |- (\\p. p) = (\\p. p)           *)\n    (refl_conv (parse_term(@\u0022\\(p:bool).p\u0022)))\n\n// val it : thm = |- true"},{"uri":"http://localhost:8901/teoremi/0019_disj_assoc.html","title":"0019_disj_assoc","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ndisj_assoc_thm\n\n([],\u0022!p q r. p \\/ (q \\/ r) \u003C=\u003E (p \\/ q) \\/ r\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E disj_cases_rule_bk [0] [] [] \u0022(p \\/ q)\u0022 \u0022r:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p:bool\u0022 \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk \n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk \n|\u003E disj1_rule_bk \n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk \n|\u003E disj2_rule_bk \n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p:bool\u0022 \u0022q \\/ r\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk \n|\u003E disj1_rule_bk \n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022q:bool\u0022 \u0022r:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk \n|\u003E disj2_rule_bk \n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk \n|\u003E assume_rule_bk\n//|\u003E view\n|\u003E loc_thm |\u003E Option.get\n"},{"uri":"http://localhost:8901/teoremi/0007_conj_id.html","title":"vero \u0026egrave; l\u0027identit\u0026agrave; della congiunzione\n","content":"(**\nvero \u0026egrave; l\u0027identit\u0026agrave; della congiunzione\n=============\n\n$\\forall p.\\ p \\wedge \\top \\Leftrightarrow p$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nconj_id_thm\n//   |- !p. p /\\ true \u003C=\u003E p\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p. p /\\ true \u003C=\u003E p\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E conj_rule_bk [0] []\n|\u003E assume_rule_bk\n|\u003E by truth_thm \u0022truth_thm\u0022\n|\u003E conjunct1_rule_bk \u0022true\u0022\n|\u003E assume_rule_bk\n|\u003E view\n|\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- !p. p /\\ true \u003C=\u003E p\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{p:bool\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p:bool}\n\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\\qquad\n\t\t\t\\dfrac\n\t\t\t\t{}\n\t\t\t\t{\\vdash\\ \\top}\n\t\t\t\t\\textsf{ truth_thm}}\n\t\t\t{p\\ \\vdash\\ p\\ \\wedge\\ \\top}\n\t\t\t\\textsf{ conj_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p\\ \\wedge\\ \\top}\n\t\t\t\t{p\\ \\wedge\\ \\top\\ \\vdash\\ p\\ \\wedge\\ \\top}\n\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t{p\\ \\wedge\\ \\top\\ \\vdash\\ p}\n\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t{\\vdash\\ p\\ \\wedge\\ \\top\\ \\Leftrightarrow\\ p}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ p.\\ p\\ \\wedge\\ \\top\\ \\Leftrightarrow\\ p}\n\t\\textsf{ gen_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\ngen_rule_fd p\n    (deduct_antisym_rule_fd\n        (* p |- p /\\ true *)\n        (conj_rule_fd (p |\u003E assume_rule_fd) (truth_thm |\u003E thm_fd \u0022truth_thm\u0022))\n        (* p /\\ true |- p *)\n        (conjunct1_rule_fd (@\u0022p /\\ true\u0022 |\u003E parse_term |\u003E assume_rule_fd))\n    )\n|\u003E zipper\n|\u003E view\n|\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- !p. p /\\ true \u003C=\u003E p\n\n(**\nClassic forward proof without tree\n*)\n\ngen_rule p\n    (deduct_antisym_rule\n      (conj_rule (assume_rule p) truth_thm)\n      (conjunct1_rule (assume_rule (parse_term(@\u0022p /\\ true\u0022)))) )\n\n//val it : thm = |- !p. p /\\ true \u003C=\u003E p"},{"uri":"http://localhost:8901/teoremi/0028_imp_dist_left_disj.html","title":"0028_imp_dist_left_disj","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nimp_dist_left_disj_thm\n\n([],\u0022!p q r. (p \\/ q ==\u003E r) \u003C=\u003E (p ==\u003E r) /\\ (q ==\u003E r)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E disch_rule_bk\n|\u003E disj_cases_rule_bk [1] [0] [0] \u0022p:bool\u0022 \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E mp_rule_bk [0] [1] \u0022p:bool\u0022\n|\u003E conjunct1_rule_bk \u0022q ==\u003E r\u0022\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n|\u003E mp_rule_bk [0] [1] \u0022q:bool\u0022\n|\u003E conjunct2_rule_bk \u0022p ==\u003E r\u0022\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n|\u003E conj_rule_bk [0] [0]\n|\u003E disch_rule_bk\n|\u003E mp_rule_bk [0] [1] \u0022p \\/ q\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E disch_rule_bk\n|\u003E mp_rule_bk [0] [1] \u0022p \\/ q\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E assume_rule_bk\n\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0021_disj_dist_right_conj.html","title":"0021_disj_dist_right_conj","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ndisj_dist_right_conj_thm\n\n([],\u0022!p q r. p \\/ (q /\\ r) \u003C=\u003E (p \\/ q) /\\ (p \\/ r)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E disj_cases_rule_bk [0] [] [0] \u0022p:bool\u0022 \u0022q:bool\u0022\n|\u003E conjunct1_rule_bk \u0022p \\/ r\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [1] \u0022p:bool\u0022 \u0022r:bool\u0022\n|\u003E conjunct2_rule_bk \u0022p \\/ q\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E conj_rule_bk [0] [1]\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p:bool\u0022 \u0022q /\\ r\u0022\n|\u003E assume_rule_bk\n|\u003E conj_rule_bk [0] [0]\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E conj_rule_bk [0] [0]\n|\u003E disj2_rule_bk\n|\u003E conjunct1_rule_bk \u0022r:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E conjunct2_rule_bk \u0022q:bool\u0022\n|\u003E assume_rule_bk\n\n|\u003E view\n"},{"uri":"http://localhost:8901/teoremi/0017_disj_zero.html","title":"Disj Zero\n","content":"(**\nDisj Zero\n=============\n\n$\\vdash \\forall p.\\ p \\vee \\top \\Leftrightarrow \\top$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ndisj_zero_thm\n// |- !p. p \\/ true \u003C=\u003E true\n\nlet p = \u0022p:bool\u0022 |\u003E parse_term\nlet th1 = disj2_rule p truth_thm                        // |- p \\/ true\nlet th2 = eqt_intro_rule th1                            // |- p \\/ true \u003C=\u003E true\nlet th3 = gen_rule p th2                                // |- !p. p \\/ true \u003C=\u003E true\n\n(***hide***)\n//let truth_thm_gr = (truth_thm, mkGraph (Th truth_thm, \u0022truth\\_thm\u0022) [])\n//let th1 = disj2_rule_tr p truth_thm_gr \n//let th2 = eqt_intro_rule_tr th1\n//let th3 = gen_rule_tr p th2\n(***unhide***)\n\n(**\n$\n\\small{ \t\n\\dfrac\n\t{p:bool\n\t\\qquad\n\t\\dfrac\n\t\t{\\dfrac\n\t\t\t{p:bool\n\t\t\t\\qquad\n\t\t\t\\vdash\\ \\top\\; \\mathbf{ truth\\_thm}}\n\t\t\t{\\vdash\\ p\\ \\vee\\ \\top}\n\t\t\t\\textsf{ disj2_rule}}\n\t\t{\\vdash\\ p\\ \\vee\\ \\top\\ \\Leftrightarrow\\ \\top}\n\t\t\\textsf{ eqt_intro_rule}}\n\t{\\vdash\\ \\forall\\ p.\\ p\\ \\vee\\ \\top\\ \\Leftrightarrow\\ \\top}\n\t\\textsf{ gen_rule} }\n$\n*)"},{"uri":"http://localhost:8901/teoremi/0010_conj_comm.html","title":"Propriet\u0026agrave; commutatativa della congiuzione\n","content":"(**\nPropriet\u0026agrave; commutatativa della congiuzione\n=============\n\n$\\forall p\\ q.\\ p \\wedge q \\Leftrightarrow q \\wedge p$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nconj_comm_thm\n//   |- !p q. p /\\ q \u003C=\u003E q /\\ p\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p q. p /\\ q \u003C=\u003E q /\\ p\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E conj_rule_bk [0] [0] \n|\u003E conjunct2_rule_bk \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conj_rule_bk [0] [0] \n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E view\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{[p:bool;q:bool]\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{q\\ \\wedge\\ p}\n\t\t\t\t\t{q\\ \\wedge\\ p\\ \\vdash\\ q\\ \\wedge\\ p}\n\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t{q\\ \\wedge\\ p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ conjunct2_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{q\\ \\wedge\\ p}\n\t\t\t\t\t{q\\ \\wedge\\ p\\ \\vdash\\ q\\ \\wedge\\ p}\n\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t{q\\ \\wedge\\ p\\ \\vdash\\ q}\n\t\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t\t{q\\ \\wedge\\ p\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\\textsf{ conj_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{p\\ \\wedge\\ q}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ q}\n\t\t\t\t\\textsf{ conjunct2_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{p\\ \\wedge\\ q}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ q\\ \\wedge\\ p}\n\t\t\t\\textsf{ conj_rule}}}\n\t\t{\\vdash\\ p\\ \\wedge\\ q\\ \\Leftrightarrow\\ q\\ \\wedge\\ p}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ p\\ q.\\ p\\ \\wedge\\ q\\ \\Leftrightarrow\\ q\\ \\wedge\\ p}\n\t\\textsf{ list_gen_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\nlist_gen_rule_fd [p;q]\n  (deduct_antisym_rule_fd \n    (inst_rule_fd [(p,q);(q,p)] \n        (conj_rule_fd                       (* p /\\ q |- q /\\ p      *)\n            (conjunct2_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ q\u0022))))\n            (conjunct1_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ q\u0022)))))) \n    (conj_rule_fd                           (* p /\\ q |- q /\\ p      *)\n        (conjunct2_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ q\u0022))))\n        (conjunct1_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ q\u0022))))))\n|\u003E zipper\n|\u003E view\n\n(**\nInternal forward proof without tree\n*)\n\nlet th1 = assume_rule (parse_term(@\u0022p /\\ q\u0022)) in\nlet th2 = conj_rule                           (* p /\\ q |- q /\\ p      *)\n            (conjunct2_rule th1)\n            (conjunct1_rule th1) in\nlet th3 = inst_rule [(p,q);(q,p)] th2 in      (* q /\\ p |- p /\\ q      *)\nlist_gen_rule [p;q]\n  (deduct_antisym_rule th3 th2)"},{"uri":"http://localhost:8901/teoremi/0031_forall_one_point.html","title":"0031_forall_one_point","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nforall_one_point_thm\n\n([],\u0022!P a. (!x. x = a ==\u003E P x) \u003C=\u003E P a\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E gen_rule_bk\n|\u003E disch_rule_bk\n|\u003E eq_mp_rule_bk [1] [0] \u0022(P:1 -\u003E bool) a\u0022\n|\u003E sym_rule_bk\n|\u003E mk_comb2_rule_bk\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n|\u003E mp_rule_bk [0] [] \u0022(a:1) = a\u0022\n|\u003E spec_rule_bk (\u0022a:1\u0022,\u0022x:1\u0022) \u0022!(x:1). x = a ==\u003E P x\u0022\n|\u003E assume_rule_bk\n|\u003E refl_conv_bk\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0005_true_not_eq_false.html","title":"Vero non equivale a falso\n","content":"(**\nVero non equivale a falso\n=============\n\n$\\vdash \\neg (\\top \\Leftrightarrow \\bot)$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ntrue_not_eq_false_thm\n//   |- ~ (true \u003C=\u003E false)\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022~ (true \u003C=\u003E false)\u0022)\n|\u003E start_proof\n|\u003E eqf_elim_rule_bk\n    |\u003E deduct_antisym_rule_bk [] []\n        (* false |- true \u003C=\u003E false         *)\n        |\u003E sym_rule_bk\n            |\u003E eqt_intro_rule_bk\n                |\u003E assume_rule_bk\n        (* true \u003C=\u003E false |- false         *)\n        |\u003E eq_mp_rule_bk [0] [] \u0022true\u0022\n            |\u003E assume_rule_bk\n                //|\u003E add_asm_rule_bk 0\n            |\u003E by truth_thm \u0022truth_thm\u0022\n|\u003E view\n|\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- ~ (true \u003C=\u003E false)\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{\\bot}\n\t\t\t\t\t{\\bot\\ \\vdash\\ \\bot}\n\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t{\\bot\\ \\vdash\\ \\bot\\ \\Leftrightarrow\\ \\top}\n\t\t\t\t\\textsf{ eqt_intro_rule}}}\n\t\t\t{\\bot\\ \\vdash\\ \\top\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\\textsf{ sym_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\top\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\t{\\top\\ \\Leftrightarrow\\ \\bot\\ \\vdash\\ \\top\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\\qquad\n\t\t\t\\dfrac\n\t\t\t\t{}\n\t\t\t\t{\\vdash\\ \\top}\n\t\t\t\t\\textsf{ truth_thm}}\n\t\t\t{\\top\\ \\Leftrightarrow\\ \\bot\\ \\vdash\\ \\bot}\n\t\t\t\\textsf{ eq_mp_rule}}}\n\t\t{\\vdash\\ (\\top\\ \\Leftrightarrow\\ \\bot)\\ \\Leftrightarrow\\ \\bot}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\neg\\ (\\top\\ \\Leftrightarrow\\ \\bot)}\n\t\\textsf{ eqf_elim_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\neqf_elim_rule_fd\n    (deduct_antisym_rule_fd\n      (* false |- true \u003C=\u003E false         *)\n      (sym_rule_fd (eqt_intro_rule_fd (assume_rule_fd (parse_term(@\u0022false\u0022)))))\n      (* true \u003C=\u003E false |- false         *)\n      (eq_mp_rule_fd (assume_rule_fd(parse_term(@\u0022true \u003C=\u003E false\u0022))) (truth_thm |\u003E thm_fd \u0022truth_thm\u0022) ) )\n|\u003E zipper \n//|\u003E view //equals backward version\n|\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- ~ (true \u003C=\u003E false)\n\n(**\nClassic forward proof without tree\n*)\neqf_elim_rule\n    (deduct_antisym_rule\n        (* false |- true \u003C=\u003E false         *)\n        (sym_rule (eqt_intro_rule (assume_rule (parse_term(@\u0022false\u0022)))))\n        (* true \u003C=\u003E false |- false         *)\n        (eq_mp_rule (assume_rule (parse_term(@\u0022true \u003C=\u003E false\u0022))) truth_thm) )\n\n//val it : thm = |- ~ (true \u003C=\u003E false)"},{"uri":"http://localhost:8901/teoremi/0027_imp_refl.html","title":"0027_imp_refl","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nimp_refl_thm\n\n([],\u0022!p. p ==\u003E p\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E disch_rule_bk\n|\u003E assume_rule_bk\n\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0008_conj_zero.html","title":"congiunzione zero\n","content":"(**\ncongiunzione zero\n=============\n\n$\\forall p.\\ p \\wedge \\bot \\Leftrightarrow \\bot$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nconj_zero_thm\n//   |- !p. p /\\ false \u003C=\u003E false\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p. p /\\ false \u003C=\u003E false\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E contr_rule_bk\n|\u003E assume_rule_bk\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E view\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{p:bool\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{p\\ \\wedge\\ \\bot\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\bot}\n\t\t\t\t{\\bot\\ \\vdash\\ \\bot}\n\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t{\\bot\\ \\vdash\\ p\\ \\wedge\\ \\bot}\n\t\t\t\\textsf{ contr_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p\\ \\wedge\\ \\bot}\n\t\t\t\t{p\\ \\wedge\\ \\bot\\ \\vdash\\ p\\ \\wedge\\ \\bot}\n\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t{p\\ \\wedge\\ \\bot\\ \\vdash\\ \\bot}\n\t\t\t\\textsf{ conjunct2_rule}}}\n\t\t{\\vdash\\ p\\ \\wedge\\ \\bot\\ \\Leftrightarrow\\ \\bot}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ p.\\ p\\ \\wedge\\ \\bot\\ \\Leftrightarrow\\ \\bot}\n\t\\textsf{ gen_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\ngen_rule_fd p\n    (deduct_antisym_rule_fd\n      (contr_rule_fd (parse_term(@\u0022p /\\ false\u0022)) (assume_rule_fd false_tm))\n      (conjunct2_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ false\u0022)))) )\n|\u003E zipper\n|\u003E view\n\n(**\nClassic forward proof without tree\n*)\n\ngen_rule p\n    (deduct_antisym_rule\n      (contr_rule (parse_term(@\u0022p /\\ false\u0022)) (assume_rule false_tm))\n      (conjunct2_rule (assume_rule (parse_term(@\u0022p /\\ false\u0022)))) )"},{"uri":"http://localhost:8901/teoremi/0014_conj_dist_left_disj.html","title":"distributivit\u0026agrave; a sinistra della congiunzione sulla disgiunzione\n","content":"(**\ndistributivit\u0026agrave; a sinistra della congiunzione sulla disgiunzione\n=============\n\n$\\forall p\\ q\\ r.\\ (p \\vee q) \\wedge r \\Leftrightarrow (p \\wedge r) \\vee (q \\wedge r)$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\nBoolAlg.load\n(***unhide***)\n\nconj_dist_left_disj_thm\n//   |- !p q r. (p \\/ q) /\\ r \u003C=\u003E (p /\\ r) \\/ (q /\\ r)\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p q r. (p \\/ q) /\\ r \u003C=\u003E (p /\\ r) \\/ (q /\\ r)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E trans_rule_bk \u0022(r /\\ p) \\/ (r /\\ q)\u0022\n|\u003E trans_rule_bk \u0022r /\\ (p \\/ q)\u0022\n|\u003E list_spec_rule_bk [(\u0022p \\/ q\u0022,\u0022p:bool\u0022); (\u0022r:bool\u0022,\u0022q:bool\u0022)]\n|\u003E by conj_comm_thm \u0022conj_comm_thm\u0022\n|\u003E list_spec_rule_bk [(\u0022r:bool\u0022,\u0022p:bool\u0022); (\u0022p:bool\u0022,\u0022q:bool\u0022); (\u0022q:bool\u0022,\u0022r:bool\u0022)]\n|\u003E by conj_dist_right_disj_thm \u0022conj_dist_right_disj_thm\u0022\n|\u003E mk_bin_rule_bk [] []\n|\u003E list_spec_rule_bk [(\u0022r:bool\u0022,\u0022p:bool\u0022); (\u0022p:bool\u0022,\u0022q:bool\u0022)]\n|\u003E by conj_comm_thm \u0022conj_comm_thm\u0022\n|\u003E list_spec_rule_bk [(\u0022r:bool\u0022,\u0022p:bool\u0022); (\u0022q:bool\u0022,\u0022q:bool\u0022)]\n|\u003E by conj_comm_thm \u0022conj_comm_thm\u0022\n|\u003E view\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{[p:bool;q:bool;r:bool]\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{[p\\ \\vee\\ q;r:bool]\n\t\t\t\t\\qquad\n\t\t\t\t\\dfrac\n\t\t\t\t\t{}\n\t\t\t\t\t{\\vdash\\ \\forall\\ p\\ q.\\ p\\ \\wedge\\ q\\ \\Leftrightarrow\\ q\\ \\wedge\\ p}\n\t\t\t\t\t\\textsf{ conj_comm_thm}}\n\t\t\t\t{\\vdash\\ (p\\ \\vee\\ q)\\ \\wedge\\ r\\ \\Leftrightarrow\\ r\\ \\wedge\\ (p\\ \\vee\\ q)}\n\t\t\t\t\\textsf{ list_spec_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{[r:bool;p:bool;q:bool]\n\t\t\t\t\\qquad\n\t\t\t\t\\dfrac\n\t\t\t\t\t{}\n\t\t\t\t\t{\\vdash\\ \\forall\\ p\\ q\\ r.\\ p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\Leftrightarrow\\ p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\t\t\t\\textsf{ conj_dist_right_disj_thm}}\n\t\t\t\t{\\vdash\\ r\\ \\wedge\\ (p\\ \\vee\\ q)\\ \\Leftrightarrow\\ r\\ \\wedge\\ p\\ \\vee\\ r\\ \\wedge\\ q}\n\t\t\t\t\\textsf{ list_spec_rule}}}\n\t\t\t{\\vdash\\ (p\\ \\vee\\ q)\\ \\wedge\\ r\\ \\Leftrightarrow\\ r\\ \\wedge\\ p\\ \\vee\\ r\\ \\wedge\\ q}\n\t\t\t\\textsf{ trans_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\$\\vee\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{[r:bool;p:bool]\n\t\t\t\t\\qquad\n\t\t\t\t\\dfrac\n\t\t\t\t\t{}\n\t\t\t\t\t{\\vdash\\ \\forall\\ p\\ q.\\ p\\ \\wedge\\ q\\ \\Leftrightarrow\\ q\\ \\wedge\\ p}\n\t\t\t\t\t\\textsf{ conj_comm_thm}}\n\t\t\t\t{\\vdash\\ r\\ \\wedge\\ p\\ \\Leftrightarrow\\ p\\ \\wedge\\ r}\n\t\t\t\t\\textsf{ list_spec_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{[r:bool;q:bool]\n\t\t\t\t\\qquad\n\t\t\t\t\\dfrac\n\t\t\t\t\t{}\n\t\t\t\t\t{\\vdash\\ \\forall\\ p\\ q.\\ p\\ \\wedge\\ q\\ \\Leftrightarrow\\ q\\ \\wedge\\ p}\n\t\t\t\t\t\\textsf{ conj_comm_thm}}\n\t\t\t\t{\\vdash\\ r\\ \\wedge\\ q\\ \\Leftrightarrow\\ q\\ \\wedge\\ r}\n\t\t\t\t\\textsf{ list_spec_rule}}}\n\t\t\t{\\vdash\\ r\\ \\wedge\\ p\\ \\vee\\ r\\ \\wedge\\ q\\ \\Leftrightarrow\\ p\\ \\wedge\\ r\\ \\vee\\ q\\ \\wedge\\ r}\n\t\t\t\\textsf{ mk_bin_rule}}}\n\t\t{\\vdash\\ (p\\ \\vee\\ q)\\ \\wedge\\ r\\ \\Leftrightarrow\\ p\\ \\wedge\\ r\\ \\vee\\ q\\ \\wedge\\ r}\n\t\t\\textsf{ trans_rule}}}\n\t{\\vdash\\ \\forall\\ p\\ q\\ r.\\ (p\\ \\vee\\ q)\\ \\wedge\\ r\\ \\Leftrightarrow\\ p\\ \\wedge\\ r\\ \\vee\\ q\\ \\wedge\\ r}\n\t\\textsf{ list_gen_rule}} }\n$\n*)\n\nit\n|\u003E root\n|\u003E linearizeProof\n\n// 0    |- !p q. p /\\ q \u003C=\u003E q /\\ p                            conj_comm_thm                       \n// 1    |- (p \\/ q) /\\ r \u003C=\u003E r /\\ (p \\/ q)                    list_spec_rule            0         \n// 2    |- !p q r. p /\\ (q \\/ r) \u003C=\u003E p /\\ q \\/ p /\\ r         conj_dist_right_disj_thm            \n// 3    |- r /\\ (p \\/ q) \u003C=\u003E r /\\ p \\/ r /\\ q                 list_spec_rule            2         \n// 4    |- (p \\/ q) /\\ r \u003C=\u003E r /\\ p \\/ r /\\ q                 trans_rule                1,3       \n// 5    |- !p q. p /\\ q \u003C=\u003E q /\\ p                            conj_comm_thm                       \n// 6    |- r /\\ p \u003C=\u003E p /\\ r                                  list_spec_rule            5         \n// 7    |- !p q. p /\\ q \u003C=\u003E q /\\ p                            conj_comm_thm                       \n// 8    |- r /\\ q \u003C=\u003E q /\\ r                                  list_spec_rule            7         \n// 9    |- r /\\ p \\/ r /\\ q \u003C=\u003E p /\\ r \\/ q /\\ r              mk_bin_rule               6,8       \n// 10   |- (p \\/ q) /\\ r \u003C=\u003E p /\\ r \\/ q /\\ r                 trans_rule                4,9       \n// 11   |- !p q r. (p \\/ q) /\\ r \u003C=\u003E p /\\ r \\/ q /\\ r         list_gen_rule             10        \n\n(**\nForward proof with tree\n*)\n\nlist_gen_rule_fd [p;q;r]\n    (list_trans_rule_fd\n       [ list_spec_rule_fd [(parse_term(@\u0022p\\/q\u0022));r] (conj_comm_thm |\u003E thm_fd \u0022conj_comm_thm\u0022);\n         list_spec_rule_fd [r;p;q] (conj_dist_right_disj_thm |\u003E thm_fd \u0022conj_dist_right_disj_thm\u0022);\n         mk_bin_rule_fd (parse_term(@\u0022$\\/\u0022))\n           (list_spec_rule_fd [r;p] (conj_comm_thm |\u003E thm_fd \u0022conj_comm_thm\u0022))\n           (list_spec_rule_fd [r;q] (conj_comm_thm |\u003E thm_fd \u0022conj_comm_thm\u0022)) ])\n|\u003E zipper\n|\u003E view\n\n(**\nClassic forward proof without tree\n*)\n\nlist_gen_rule [p;q;r]\n  (list_trans_rule\n     [ list_spec_rule [(parse_term(@\u0022p\\/q\u0022));r] conj_comm_thm;\n       list_spec_rule [r;p;q] conj_dist_right_disj_thm;\n       mk_bin_rule (parse_term(@\u0022$\\/\u0022))\n         (list_spec_rule [r;p] conj_comm_thm)\n         (list_spec_rule [r;q] conj_comm_thm) ])"},{"uri":"http://localhost:8901/teoremi/0016_disj_id.html","title":"Disj Id\n","content":"(**\nDisj Id\n=============\n\n$\\vdash \\forall p.\\ p \\vee \\bot \\Leftrightarrow p$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ndisj_id_thm\n// |- !p. p \\/ false \u003C=\u003E p\n\nlet p = \u0022p:bool\u0022 |\u003E parse_term\nlet th1 = assume_rule p                                //          p |- p\nlet th2 = disj1_rule th1 (parse_term(@\u0022false\u0022))        //          p |- p \\/ false    \nlet th3 = assume_rule (parse_term(@\u0022p \\/ false\u0022))      // p \\/ false |- p \\/ false\nlet th4 = assume_rule (parse_term(@\u0022false\u0022))           //      false |- false\nlet th5 = contr_rule p th4                             //      false |- p\nlet th6 = disj_cases_rule th3 th1 th5                  // p \\/ false |- p\nlet th7 = deduct_antisym_rule th2 th6                  //            |- p \\/ false \u003C=\u003E p\nlet th8 = gen_rule p th7                               //            |- !p. p \\/ false \u003C=\u003E p\n\n(***hide***)\n//let th1 = assume_rule_tr p                       \n//let th2 = disj1_rule_tr th1 (parse_term(@\u0022false\u0022))             \n//let th3 = assume_rule_tr (parse_term(@\u0022p \\/ false\u0022))    \n//let th4 = assume_rule_tr (parse_term(@\u0022false\u0022))\n//let th5 = contr_rule_tr p th4\n//let th6 = disj_cases_rule_tr th3 th1 th5\n//let th7 = deduct_antisym_rule_tr th2 th6\n//let th8 = gen_rule_tr p th7\n(***unhide***)\n\n(**\n$\n\\small{     \n\\dfrac\n    {p:bool\n    \\qquad\n    \\dfrac\n        {\\dfrac\n            {\\dfrac\n                {p:bool}\n                {p\\ \\vdash\\ p}\n                \\textsf{ assume_rule}\n            \\qquad\n            \\bot}\n            {p\\ \\vdash\\ p\\ \\vee\\ \\bot}\n            \\textsf{ disj1_rule}\n        \\qquad\n        \\dfrac\n            {\\dfrac\n                {p\\ \\vee\\ \\bot}\n                {p\\ \\vee\\ \\bot\\ \\vdash\\ p\\ \\vee\\ \\bot}\n                \\textsf{ assume_rule}\n            \\qquad\n            \\dfrac\n                {p:bool}\n                {p\\ \\vdash\\ p}\n                \\textsf{ assume_rule}\n            \\qquad\n            \\dfrac\n                {p:bool\n                \\qquad\n                \\dfrac\n                    {\\bot}\n                    {\\bot\\ \\vdash\\ \\bot}\n                    \\textsf{ assume_rule}}\n                {\\bot\\ \\vdash\\ p}\n                \\textsf{ contr_rule}}\n            {p\\ \\vee\\ \\bot\\ \\vdash\\ p}\n            \\textsf{ disj_cases_rule}}\n        {\\vdash\\ p\\ \\vee\\ \\bot\\ \\Leftrightarrow\\ p}\n        \\textsf{ deduct_antisym_rule}}\n    {\\vdash\\ \\forall\\ p.\\ p\\ \\vee\\ \\bot\\ \\Leftrightarrow\\ p}\n    \\textsf{ gen_rule} }\n$\n*)"},{"uri":"http://localhost:8901/teoremi/0015_conj_contr.html","title":"0015_conj_contr","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nconj_contr_thm\n//|- !p. p /\\ ~ p \u003C=\u003E false\n\n([],\u0022!p. p /\\ ~ p \u003C=\u003E false\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E conj_rule_bk [0] [0]\n|\u003E contr_rule_bk\n|\u003E assume_rule_bk\n|\u003E contr_rule_bk\n|\u003E assume_rule_bk\n|\u003E mp_rule_bk [0] [0] \u0022p:bool\u0022\n|\u003E not_elim_rule_bk\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022~ p\u0022\n|\u003E assume_rule_bk\n\n|\u003E view\n"},{"uri":"http://localhost:8901/teoremi/0012_conj_absorb_disj.html","title":"assorbimento della disgiunzione nella congiunzione\n","content":"(**\nassorbimento della disgiunzione nella congiunzione\n=====================\n\n$\\forall p\\ q.\\ p \\wedge (p \\vee q) \\Leftrightarrow p$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nconj_absorb_disj_thm\n// |- !p q. p /\\ (p \\/ q) \u003C=\u003E p\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p q. p /\\ (p \\/ q) \u003C=\u003E p\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E conj_rule_bk [0] [0]\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022p \\/ q\u0022\n|\u003E assume_rule_bk\n|\u003E view\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{[p:bool;q:bool]\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p:bool}\n\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{p:bool}\n\t\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\\qquad\n\t\t\t\tq:bool}\n\t\t\t\t{p\\ \\vdash\\ p\\ \\vee\\ q}\n\t\t\t\t\\textsf{ disj1_rule}}}\n\t\t\t{p\\ \\vdash\\ p\\ \\wedge\\ (p\\ \\vee\\ q)}\n\t\t\t\\textsf{ conj_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p\\ \\wedge\\ (p\\ \\vee\\ q)}\n\t\t\t\t{p\\ \\wedge\\ (p\\ \\vee\\ q)\\ \\vdash\\ p\\ \\wedge\\ (p\\ \\vee\\ q)}\n\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t{p\\ \\wedge\\ (p\\ \\vee\\ q)\\ \\vdash\\ p}\n\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t{\\vdash\\ p\\ \\wedge\\ (p\\ \\vee\\ q)\\ \\Leftrightarrow\\ p}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ p\\ q.\\ p\\ \\wedge\\ (p\\ \\vee\\ q)\\ \\Leftrightarrow\\ p}\n\t\\textsf{ list_gen_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\nlet th1 = assume_rule_fd p\nlist_gen_rule_fd [p;q]\n  (deduct_antisym_rule_fd\n    (conj_rule_fd th1 (disj1_rule_fd th1 q))\n    (conjunct1_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ (p \\/ q)\u0022)))) )\n|\u003E zipper\n|\u003E view\n\n(**\nClassic forward proof without tree\n*)\n\nlet th1\u0027 = assume_rule p in\nlist_gen_rule [p;q]\n  (deduct_antisym_rule\n    (conj_rule th1\u0027 (disj1_rule th1\u0027 q))\n    (conjunct1_rule (assume_rule (parse_term(@\u0022p /\\ (p \\/ q)\u0022)))) )"},{"uri":"http://localhost:8901/teoremi/0009_conj_idem.html","title":"congiunzione della stessa proposizione\n","content":"(**\ncongiunzione della stessa proposizione\n=============\n\n$\\forall p.\\ p \\wedge p \\Leftrightarrow p$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nconj_idem_thm\n//   |- !p. p /\\ p \u003C=\u003E p\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p. p /\\ p \u003C=\u003E p\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E conj_rule_bk [0] [0]\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n\n|\u003E view\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{p:bool\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p:bool}\n\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{p:bool}\n\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t{p\\ \\vdash\\ p\\ \\wedge\\ p}\n\t\t\t\\textsf{ conj_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p\\ \\wedge\\ p}\n\t\t\t\t{p\\ \\wedge\\ p\\ \\vdash\\ p\\ \\wedge\\ p}\n\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t{p\\ \\wedge\\ p\\ \\vdash\\ p}\n\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t{\\vdash\\ p\\ \\wedge\\ p\\ \\Leftrightarrow\\ p}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ p.\\ p\\ \\wedge\\ p\\ \\Leftrightarrow\\ p}\n\t\\textsf{ gen_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\ngen_rule_fd p\n    (deduct_antisym_rule_fd\n      (conj_rule_fd (assume_rule_fd p) (assume_rule_fd p))\n      (conjunct1_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ p\u0022)))) )\n|\u003E zipper\n|\u003E view\n\n(**\nClassic forward proof without tree\n*)\n\ngen_rule p\n(deduct_antisym_rule\n  (conj_rule (assume_rule p) (assume_rule p))\n  (conjunct1_rule (assume_rule (parse_term(@\u0022p /\\ p\u0022)))) )"},{"uri":"http://localhost:8901/teoremi/0030_forall_dist_conj.html","title":"0030_forall_dist_conj","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nforall_dist_conj_thm\n\n([],\u0022!P Q. (!x. P x /\\ Q x) \u003C=\u003E (!x. P x) /\\ (!x. Q x)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E gen_rule_bk\n|\u003E conj_rule_bk [0] [0]\n|\u003E spec_rule_bk (\u0022x:1\u0022,\u0022x:1\u0022)\n|\u003E conjunct1_rule_bk \u0022!(x:1). Q x\u0022\n|\u003E assume_rule_bk\n|\u003E spec_rule_bk (\u0022x:1\u0022,\u0022x:1\u0022)\n|\u003E conjunct2_rule_bk \u0022!(x:1). P x\u0022\n|\u003E assume_rule_bk\n|\u003E conj_rule_bk [0] [0]\n|\u003E gen_rule_bk\n|\u003E conjunct1_rule_bk \u0022(Q:1 -\u003E bool) (x:1)\u0022\n|\u003E spec_rule_bk (\u0022x:1\u0022,\u0022x:1\u0022)\n|\u003E assume_rule_bk\n|\u003E gen_rule_bk\n|\u003E conjunct2_rule_bk \u0022(P:1 -\u003E bool) (x:1)\u0022\n|\u003E spec_rule_bk (\u0022x:1\u0022,\u0022x:1\u0022)\n|\u003E assume_rule_bk\n\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0026_imp_left_zero.html","title":"0026_imp_left_zero","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nimp_left_zero_thm\n\n([],\u0022!p. false ==\u003E p\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E disch_rule_bk\n|\u003E contr_rule_bk\n|\u003E assume_rule_bk\n\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0020_disj_absorb_conj.html","title":"0020_disj_absorb_conj","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ndisj_absorb_conj_thm\n\n([],\u0022!p q. p \\/ (p /\\ q) \u003C=\u003E p\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E disj1_rule_bk \n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p:bool\u0022 \u0022p /\\ q\u0022\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022q:bool\u0022\n|\u003E assume_rule_bk\n\n|\u003E view\n"},{"uri":"http://localhost:8901/teoremi/0036_exists_null.html","title":"0036_exists_null","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nexists_null_thm\n\n([],\u0022!t. (?(x:a). t) \u003C=\u003E t\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E exists_rule_bk \u0022x:a\u0022\n|\u003E assume_rule_bk\n|\u003E choose_rule_bk [0] [] 0 (\u0022x:a\u0022,\u0022x:a\u0022)\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n\n|\u003E view\n\nskolem_thm\n\n([],\u0022!P. (!(x:a). ?(y:b). P x y) \u003C=\u003E (?f. !x. P x (f x))\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E choose_rule_bk [0] [] 0 (\u0022f:a-\u003Eb\u0022,\u0022f:a-\u003Eb\u0022)\n|\u003E assume_rule_bk\n|\u003E gen_rule_bk\n|\u003E exists_rule_bk \u0022(f:a-\u003Eb) x\u0022\n|\u003E spec_rule_bk (\u0022x:a\u0022,\u0022x:a\u0022) \u0022!x. P x ((f:a-\u003Eb) x)\u0022\n|\u003E assume_rule_bk\n|\u003E focus_goal\n//|\u003E exists_rule_bk \u0022(f:a-\u003Eb)\u0022\n//|\u003E gen_rule_bk\n//|\u003E focus_goal\n//|\u003E eq_mp_rule_bk [0] [0] \u0022(f:a-\u003Eb) x = y\u0022\n\n|\u003E view\n\n\n\n\n\n\n\n\n\n\n\n([],\u0022!P a. (?(x:a). x = a /\\ P x) \u003C=\u003E P a\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E exists_rule_bk \u0022a:a\u0022\n|\u003E conj_rule_bk [] [0]\n|\u003E refl_conv_bk\n|\u003E assume_rule_bk\n//|\u003E focus_goal\n|\u003E choose_rule_bk [0] [] 0 (\u0022x:a\u0022,\u0022x:a\u0022)\n|\u003E assume_rule_bk\n|\u003E eq_mp_rule_bk [0] [0] \u0022(P:a-\u003Ebool) x\u0022\n|\u003E mk_comb2_rule_bk\n|\u003E conjunct1_rule_bk \u0022(P:a-\u003Ebool) x\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct2_rule_bk \u0022(x:a) = a\u0022\n|\u003E assume_rule_bk\n\n|\u003E view\n\nlet tm = (parse_term(@\u0022?(x:\u0027a). x = a /\\ P x\u0022))\nlet s1 = assume_rule_fd (parse_term(@\u0022(x:\u0027a)=a /\\ P x\u0022))\n\n(choose_rule_fd (parse_term(@\u0022x:\u0027a\u0022)) (assume_rule_fd tm)\n    (eq_mp_rule_fd (mk_comb2_rule_fd (parse_term(@\u0022P:\u0027a-\u003Ebool\u0022)) (conjunct1_rule_fd s1))\n           (conjunct2_rule_fd s1)) )\n|\u003E zipper\n|\u003E view\n\ngen_rule_fd (parse_term(@\u0022P:\u0027a-\u003Ebool\u0022))\n (gen_rule_fd (parse_term(@\u0022a:\u0027a\u0022))\n   (deduct_antisym_rule_fd\n     (exists_rule_fd tm (parse_term(@\u0022a:\u0027a\u0022))\n       (conj_rule_fd (refl_conv_fd (parse_term(@\u0022a:\u0027a\u0022))) (assume_rule_fd (parse_term(@\u0022(P:\u0027a-\u003Ebool) a\u0022)))))\n     (choose_rule_fd (parse_term(@\u0022x:\u0027a\u0022)) (assume_rule_fd tm)\n       (eq_mp_rule_fd (mk_comb2_rule_fd (parse_term(@\u0022P:\u0027a-\u003Ebool\u0022)) (conjunct1_rule_fd s1))\n              (conjunct2_rule_fd s1)) )))\n|\u003E zipper\n|\u003E view\n"},{"uri":"http://localhost:8901/teoremi/0025_imp_left_id.html","title":"0025_imp_left_id","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nimp_left_id_thm\n\n([],\u0022!p. true ==\u003E p \u003C=\u003E p\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E disch_rule_bk\n|\u003E add_asm_rule_bk 1\n|\u003E assume_rule_bk\n|\u003E mp_rule_bk [0] [] \u0022true\u0022\n|\u003E assume_rule_bk\n|\u003E by truth_thm \u0022truth\\_thm\u0022\n//|\u003E view\n|\u003E root\n|\u003E linearizeProof\n\n([],\u0022!p. true ==\u003E (p \u003C=\u003E p)\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E disch_rule_bk \n|\u003E add_asm_rule_bk 0\n|\u003E refl_conv_bk\n\n|\u003E view\n//|\u003E root\n//|\u003E linearizeProof"},{"uri":"http://localhost:8901/teoremi/0029_imp_dist_right_conj.html","title":"0029_imp_dist_right_conj","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nimp_dist_right_conj_thm\n\n([],\u0022!p q r. (p ==\u003E q /\\ r) \u003C=\u003E (p ==\u003E q) /\\ (p ==\u003E r)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E disch_rule_bk\n|\u003E conj_rule_bk [0;1] [0;1]\n|\u003E undisch_rule_bk 1\n|\u003E conjunct1_rule_bk \u0022p ==\u003E r\u0022\n|\u003E assume_rule_bk\n|\u003E undisch_rule_bk 1\n|\u003E conjunct2_rule_bk \u0022p ==\u003E q\u0022\n|\u003E assume_rule_bk\n|\u003E conj_rule_bk [0] [0]\n|\u003E disch_rule_bk\n|\u003E conjunct1_rule_bk \u0022r:bool\u0022\n|\u003E undisch_rule_bk 1\n|\u003E assume_rule_bk\n|\u003E disch_rule_bk\n|\u003E conjunct2_rule_bk \u0022q:bool\u0022\n|\u003E undisch_rule_bk 1\n|\u003E assume_rule_bk\n\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0004_not_false.html","title":"Non falso equivale a vero\n","content":"(**\nNon falso equivale a vero\n=============\n\n$\\vdash \\neg \\bot \\Leftrightarrow \\top$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nnot_false_thm\n//   |- ~ false \u003C=\u003E true\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022~ false \u003C=\u003E true\u0022)\n|\u003E start_proof\n|\u003E deduct_antisym_rule_bk [] []\n    |\u003E add_asm_rule_bk 0\n        |\u003E not_intro_rule_bk\n            |\u003E disch_rule_bk\n                |\u003E assume_rule_bk\n    |\u003E add_asm_rule_bk 0        \n        |\u003E by truth_thm \u0022truth_thm\u0022\n|\u003E view\n|\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- ~ false \u003C=\u003E true\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{\\color{green}{\\dfrac\n\t\t{\\top\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\bot\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\bot}\n\t\t\t\t\t{\\bot\\ \\vdash\\ \\bot}\n\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t{\\vdash\\ \\bot\\ \\Rightarrow\\ \\bot}\n\t\t\t\t\\textsf{ disch_rule}}}\n\t\t\t{\\vdash\\ \\neg\\ \\bot}\n\t\t\t\\textsf{ not_intro_rule}}}\n\t\t{\\top\\ \\vdash\\ \\neg\\ \\bot}\n\t\t\\textsf{ add_asm_rule}}\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\neg\\ \\bot\n\t\t\\qquad\n\t\t\\dfrac\n\t\t\t{}\n\t\t\t{\\vdash\\ \\top}\n\t\t\t\\textsf{ truth_thm}}\n\t\t{\\neg\\ \\bot\\ \\vdash\\ \\top}\n\t\t\\textsf{ add_asm_rule}}}\n\t{\\vdash\\ \\neg\\ \\bot\\ \\Leftrightarrow\\ \\top}\n\t\\textsf{ deduct_antisym_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n\n(\u0060deduct_antisym_rule_fd\u0060 can be applied without assumptions.)\n*)\n\n//(* |- ~ false \u003C=\u003E true         *)\ndeduct_antisym_rule_fd\n  (* |- ~ false            *)\n  (not_intro_rule_fd (disch_rule_fd (parse_term(@\u0022false\u0022)) (assume_rule_fd (parse_term(@\u0022false\u0022)))))\n  (* |- true               *)\n  (truth_thm |\u003E thm_fd \u0022truth_thm\u0022)\n|\u003E zipper |\u003E view |\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- ~ false \u003C=\u003E true\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\bot\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\bot}\n\t\t\t\t{\\bot\\ \\vdash\\ \\bot}\n\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t{\\vdash\\ \\bot\\ \\Rightarrow\\ \\bot}\n\t\t\t\\textsf{ disch_rule}}}\n\t\t{\\vdash\\ \\neg\\ \\bot}\n\t\t\\textsf{ not_intro_rule}}\n\t\\qquad\n\t\\dfrac\n\t\t{}\n\t\t{\\vdash\\ \\top}\n\t\t\\textsf{ truth_thm}}\n\t{\\vdash\\ \\neg\\ \\bot\\ \\Leftrightarrow\\ \\top}\n\t\\textsf{ deduct_antisym_rule}} }\n$\n*)\n\n(**\nClassic forward proof without tree\n*)\n\n//(* |- ~ false \u003C=\u003E true         *)\ndeduct_antisym_rule\n  (* |- ~ false            *)\n  (not_intro_rule (disch_rule (parse_term(@\u0022false\u0022)) (assume_rule (parse_term(@\u0022false\u0022)))))\n  (* |- true               *)\n  truth_thm\n\n//val it : thm = |- ~ false \u003C=\u003E true"},{"uri":"http://localhost:8901/teoremi/0034_exists_dist_disj.html","title":"0034_exists_dist_disj","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nexists_dist_disj_thm\n\n([],\u0022!P Q. (?(x:a). P x \\/ Q x) \u003C=\u003E (?x. P x) \\/ (?x. Q x)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E disj_cases_rule_bk [0] [] [] \u0022?(x:a). P x\u0022 \u0022?(x:a). Q x\u0022\n|\u003E assume_rule_bk\n|\u003E choose_rule_bk [0] [] 0 (\u0022x:a\u0022,\u0022x:a\u0022)\n|\u003E assume_rule_bk\n|\u003E exists_rule_bk \u0022x:a\u0022\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E choose_rule_bk [0] [] 0 (\u0022x:a\u0022,\u0022x:a\u0022)\n|\u003E assume_rule_bk\n|\u003E exists_rule_bk \u0022x:a\u0022\n|\u003E disj2_rule_bk\n|\u003E assume_rule_bk\n|\u003E choose_rule_bk [0] [] 0 (\u0022x:a\u0022,\u0022x:a\u0022)\n|\u003E assume_rule_bk\n//|\u003E focus_goal\n|\u003E disj_cases_rule_bk [0] [] [] \u0022(P:a-\u003Ebool) x\u0022 \u0022(Q:a-\u003Ebool) x\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E exists_rule_bk \u0022x:a\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E exists_rule_bk \u0022x:a\u0022\n|\u003E assume_rule_bk\n|\u003E view\n|\u003E root\n|\u003E linearizeProof\n\nlet px = (parse_term(@\u0022(P:\u0027a-\u003Ebool) x\u0022)) \nlet qx = (parse_term(@\u0022(Q:\u0027a-\u003Ebool) x\u0022)) \nlet x = (parse_term(@\u0022x:\u0027a\u0022))  in\nlet tm1 = (parse_term(@\u0022?(x:\u0027a). P x\u0022)) \nlet tm2 = (parse_term(@\u0022?(x:\u0027a). Q x\u0022)) in\nlist_gen_rule [(parse_term(@\u0022P:\u0027a-\u003Ebool\u0022));(parse_term(@\u0022Q:\u0027a-\u003Ebool\u0022))]\n\n(disj_cases_rule_fd (assume_rule_fd (parse_term(@\u0022(?(x:\u0027a). P x) \\/ (?(x:\u0027a). Q x)\u0022)))\n  (* ?x. P x |- ?x. P x \\/ Q x                     *)\n  (choose_rule_fd x (assume_rule_fd tm1)\n    (exists_rule_fd (parse_term(@\u0022?(x:\u0027a). P x \\/ Q x\u0022)) x\n      (disj1_rule_fd (assume_rule_fd px) qx) ))\n  (* ?x. Q x |- ?x. P x \\/ Q x                     *)\n  (choose_rule_fd x (assume_rule_fd tm2)\n    (exists_rule_fd (parse_term(@\u0022?(x:\u0027a). P x \\/ Q x\u0022)) x\n      (disj2_rule_fd px (assume_rule_fd qx)) )))\n|\u003E zipper\n|\u003E view\n\n(deduct_antisym_rule_fd\n  (* (?x. P x) \\/ (?x. Q x) |- ?x. P x \\/ Q x      *)\n  (disj_cases_rule_fd (assume_rule_fd (parse_term(@\u0022(?(x:\u0027a). P x) \\/ (?(x:\u0027a). Q x)\u0022)))\n    (* ?x. P x |- ?x. P x \\/ Q x                     *)\n    (choose_rule_fd x (assume_rule_fd tm1)\n      (exists_rule_fd (parse_term(@\u0022?(x:\u0027a). P x \\/ Q x\u0022)) x\n        (disj1_rule_fd (assume_rule_fd px) qx) ))\n    (* ?x. Q x |- ?x. P x \\/ Q x                     *)\n    (choose_rule_fd x (assume_rule_fd tm2)\n      (exists_rule_fd (parse_term(@\u0022?(x:\u0027a). P x \\/ Q x\u0022)) x\n        (disj2_rule_fd px (assume_rule_fd qx)) )))\n  (* ?x. P x \\/ Q x |- (?x. P x) \\/ (?x. Q x)      *)\n  (choose_rule_fd x (assume_rule_fd (parse_term(@\u0022?(x:\u0027a). P x \\/ Q x\u0022)))\n    (* P x \\/ Q x |- (?x. P x) \\/ (?x. Q x)          *)\n    (disj_cases_rule_fd (assume_rule_fd (parse_term(@\u0022P (x:\u0027a) \\/ Q x\u0022)))\n      (* P x |- (?x. P x) \\/ (?x. Q x)                 *)\n      (disj1_rule_fd (exists_rule_fd tm1 x (assume_rule_fd px)) tm2)\n      (* Q x |- (?x. P x) \\/ (?x. Q x)                 *)\n      (disj2_rule_fd tm1 (exists_rule_fd tm2 x  (assume_rule_fd qx))) )))\n|\u003E zipper\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0024_disj_comm.html","title":"commutabilit\u0026agrave; della disgiunzione\n","content":"(**\ncommutabilit\u0026agrave; della disgiunzione\n=============\n\n$\\forall p\\ q.\\ p \\vee q \\Leftrightarrow q \\vee p$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ndisj_comm_thm\n//   |- !p q. p \\/ q \u003C=\u003E q \\/ p\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p q. p \\/ q \u003C=\u003E q \\/ p\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E disj_cases_rule_bk [0] [] [] \u0022q:bool\u0022 \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p:bool\u0022 \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n\n|\u003E view\n\nlet th = \n    disj_cases_rule_fd                     (* p \\/ q |- q \\/ p      *)\n        (assume_rule_fd (parse_term(@\u0022p \\/ q\u0022)))\n        (disj2_rule_fd q (assume_rule_fd p))\n        (disj1_rule_fd (assume_rule_fd q) p)\n    |\u003E zipper\n    |\u003E view\n    |\u003E loc_thm \n    |\u003E Option.get\n\n([],\u0022!p q. p \\/ q \u003C=\u003E q \\/ p\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E inst_rule_bk [(p,q);(q,p)]\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p:bool\u0022 \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p:bool\u0022 \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E assume_rule_bk\n|\u003E view\n\nlet th1 = disj_cases_rule_fd                     (* p \\/ q |- q \\/ p      *)\n            (assume_rule_fd (parse_term(@\u0022p \\/ q\u0022)))\n            (disj2_rule_fd q (assume_rule_fd p))\n            (disj1_rule_fd (assume_rule_fd q) p) in\nlet th2 = inst_rule_fd [(p,q);(q,p)] th1 in      (* q \\/ p |- p \\/ q      *)\nlist_gen_rule_fd [p;q]\n  (deduct_antisym_rule_fd th2 th1)\n|\u003E zipper\n|\u003E view"},{"uri":"http://localhost:8901/teoremi/0006_not_dist_disj.html","title":"distribuzione della negazione sulla disgiunzione\n","content":"(**\ndistribuzione della negazione sulla disgiunzione\n=============\n\n$\\forall p\\ q.\\ \\neg (p \\vee q) \\Leftrightarrow \\neg p \\wedge \\neg q$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nnot_dist_disj_thm\n//   |- !p q. ~ (p \\/ q) \u003C=\u003E ~ p /\\ ~ q\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p q. ~ (p \\/ q) \u003C=\u003E ~ p /\\ ~ q\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n    |\u003E deduct_antisym_rule_bk [] []\n        (* ~ p /\\ ~ q |- ~ (p \\/ q)        *)\n        |\u003E not_intro_rule_bk\n            |\u003E disch_rule_bk\n                (* ~ p /\\ ~ q, p \\/ q |- false   *)\n                |\u003E disj_cases_rule_bk [1] [0] [0] \u0022p:bool\u0022 \u0022q:bool\u0022\n                    |\u003E assume_rule_bk\n                    (* ~ p /\\ ~ q, p |- false        *)\n                    |\u003E undisch_rule_bk 1\n                        |\u003E not_elim_rule_bk\n                            |\u003E conjunct1_rule_bk \u0022~ q\u0022\n                                |\u003E assume_rule_bk\n                    (* ~ p /\\ ~ q, q |- false        *)\n                    |\u003E undisch_rule_bk 1\n                        |\u003E not_elim_rule_bk\n                            |\u003E conjunct2_rule_bk \u0022~ p\u0022\n                                |\u003E assume_rule_bk\n        (* ~ (p \\/ q) |- ~ p /\\ ~ q        *)\n        |\u003E conj_rule_bk [0] [0]\n            (* ~ (p \\/ q) |- ~ p               *)\n            |\u003E deduct_contrapos_rule_bk 0\n                (* p |- p \\/ q                      *)\n                |\u003E disj1_rule_bk\n                    |\u003E assume_rule_bk\n            (* ~ (p \\/ q) |- ~ q               *)\n            |\u003E deduct_contrapos_rule_bk 0\n                (* q |- p \\/ q                      *)\n                |\u003E disj2_rule_bk\n                    |\u003E assume_rule_bk\n\n|\u003E view\n\n//val it : thm = |- !p q. ~ (p \\/ q) \u003C=\u003E ~ p /\\ ~ q\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{[p:bool;q:bool]\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p\\ \\vee\\ q\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{p\\ \\vee\\ q}\n\t\t\t\t\t\t{p\\ \\vee\\ q\\ \\vdash\\ p\\ \\vee\\ q}\n\t\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q}\n\t\t\t\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ \\neg\\ p\\ \\wedge\\ \\neg\\ q}\n\t\t\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ \\neg\\ p}\n\t\t\t\t\t\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ p\\ \\Rightarrow\\ \\bot}\n\t\t\t\t\t\t\t\\textsf{ not_elim_rule}}}\n\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q,\\ p\\ \\vdash\\ \\bot}\n\t\t\t\t\t\t\\textsf{ undisch_rule}}\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q}\n\t\t\t\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ \\neg\\ p\\ \\wedge\\ \\neg\\ q}\n\t\t\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ \\neg\\ q}\n\t\t\t\t\t\t\t\t\\textsf{ conjunct2_rule}}}\n\t\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ q\\ \\Rightarrow\\ \\bot}\n\t\t\t\t\t\t\t\\textsf{ not_elim_rule}}}\n\t\t\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q,\\ q\\ \\vdash\\ \\bot}\n\t\t\t\t\t\t\\textsf{ undisch_rule}}}\n\t\t\t\t\t{p\\ \\vee\\ q,\\ \\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ \\bot}\n\t\t\t\t\t\\textsf{ disj_cases_rule}}}\n\t\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ p\\ \\vee\\ q\\ \\Rightarrow\\ \\bot}\n\t\t\t\t\\textsf{ disch_rule}}}\n\t\t\t{\\neg\\ p\\ \\wedge\\ \\neg\\ q\\ \\vdash\\ \\neg\\ (p\\ \\vee\\ q)}\n\t\t\t\\textsf{ not_intro_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{p:bool\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{p:bool}\n\t\t\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\t\\qquad\n\t\t\t\t\tq:bool}\n\t\t\t\t\t{p\\ \\vdash\\ p\\ \\vee\\ q}\n\t\t\t\t\t\\textsf{ disj1_rule}}}\n\t\t\t\t{\\neg\\ (p\\ \\vee\\ q)\\ \\vdash\\ \\neg\\ p}\n\t\t\t\t\\textsf{ deduct_contrapos_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{q:bool\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{p:bool\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{q:bool}\n\t\t\t\t\t\t{q\\ \\vdash\\ q}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{q\\ \\vdash\\ p\\ \\vee\\ q}\n\t\t\t\t\t\\textsf{ disj2_rule}}}\n\t\t\t\t{\\neg\\ (p\\ \\vee\\ q)\\ \\vdash\\ \\neg\\ q}\n\t\t\t\t\\textsf{ deduct_contrapos_rule}}}\n\t\t\t{\\neg\\ (p\\ \\vee\\ q)\\ \\vdash\\ \\neg\\ p\\ \\wedge\\ \\neg\\ q}\n\t\t\t\\textsf{ conj_rule}}}\n\t\t{\\vdash\\ \\neg\\ (p\\ \\vee\\ q)\\ \\Leftrightarrow\\ \\neg\\ p\\ \\wedge\\ \\neg\\ q}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ p\\ q.\\ \\neg\\ (p\\ \\vee\\ q)\\ \\Leftrightarrow\\ \\neg\\ p\\ \\wedge\\ \\neg\\ q}\n\t\\textsf{ list_gen_rule}} }\n$\n*)\n\nit\n|\u003E root\n|\u003E linearizeProof\n\n// 0                             p \\/ q |- p \\/ q                                             assume_rule                         \n// 1                         ~ p /\\ ~ q |- ~ p /\\ ~ q                                         assume_rule                         \n// 2                         ~ p /\\ ~ q |- ~ p                                                conjunct1_rule            1         \n// 3                         ~ p /\\ ~ q |- p ==\u003E false                                        not_elim_rule             2         \n// 4                 ~ p /\\ ~ q, p:bool |- false                                              undisch_rule              3         \n// 5                         ~ p /\\ ~ q |- ~ p /\\ ~ q                                         assume_rule                         \n// 6                         ~ p /\\ ~ q |- ~ q                                                conjunct2_rule            5         \n// 7                         ~ p /\\ ~ q |- q ==\u003E false                                        not_elim_rule             6         \n// 8                 ~ p /\\ ~ q, q:bool |- false                                              undisch_rule              7         \n// 9                 p \\/ q, ~ p /\\ ~ q |- false                                              disj_cases_rule           0,4,8     \n// 10                        ~ p /\\ ~ q |- p \\/ q ==\u003E false                                   disch_rule                9         \n// 11                        ~ p /\\ ~ q |- ~ (p \\/ q)                                         not_intro_rule            10        \n// 12                            p:bool |- p:bool                                             assume_rule                         \n// 13                            p:bool |- p \\/ q                                             disj1_rule                12        \n// 14                        ~ (p \\/ q) |- ~ p                                                deduct_contrapos_rule     13        \n// 15                            q:bool |- q:bool                                             assume_rule                         \n// 16                            q:bool |- p \\/ q                                             disj2_rule                15        \n// 17                        ~ (p \\/ q) |- ~ q                                                deduct_contrapos_rule     16        \n// 18                        ~ (p \\/ q) |- ~ p /\\ ~ q                                         conj_rule                 14,17     \n// 19                                   |- ~ (p \\/ q) \u003C=\u003E ~ p /\\ ~ q                          deduct_antisym_rule       11,18     \n// 20                                   |- !p q. ~ (p \\/ q) \u003C=\u003E ~ p /\\ ~ q                    list_gen_rule             19        \n\n(**\nForward proof with tree\n*)\n\nlet p = parse_term(@\u0022p:bool\u0022)\nlet q = parse_term(@\u0022q:bool\u0022)\n\nlist_gen_rule_fd [p;q]\n  (deduct_antisym_rule_fd\n    (* ~ p /\\ ~ q |- ~ (p \\/ q)        *)\n    (not_intro_rule_fd\n      (disch_rule_fd (parse_term(@\u0022p \\/ q\u0022))\n        (* ~ p /\\ ~ q, p \\/ q |- false   *)\n        (disj_cases_rule_fd (assume_rule_fd (parse_term(@\u0022p \\/ q\u0022)))\n          (* ~ p /\\ ~ q, p |- false        *)\n          (undisch_rule_fd (not_elim_rule_fd (conjunct1_rule_fd (assume_rule_fd (parse_term(@\u0022~ p /\\ ~ q\u0022))))))\n          (* ~ p /\\ ~ q, q |- false        *)\n          (undisch_rule_fd (not_elim_rule_fd (conjunct2_rule_fd (assume_rule_fd (parse_term(@\u0022~ p /\\ ~ q\u0022)))))) )))\n    (* ~ (p \\/ q) |- ~ p /\\ ~ q        *)\n    (conj_rule_fd\n      (* ~ (p \\/ q) |- ~ p               *)\n      (deduct_contrapos_rule_fd p\n        (* p |- p \\/ q                      *)\n        (disj1_rule_fd (assume_rule_fd p) q) )\n      (* ~ (p \\/ q) |- ~ q               *)\n      (deduct_contrapos_rule_fd q\n        (* q |- p \\/ q                      *)\n        (disj2_rule_fd p (assume_rule_fd q)) )))\n|\u003E zipper\n//|\u003E view //equals backward version\n|\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- !p q. ~ (p \\/ q) \u003C=\u003E ~ p /\\ ~ q\n\n(**\nClassic forward proof without tree\n*)\n\nlet th1 = assume_rule (parse_term(@\u0022~ p /\\ ~ q\u0022)) in\nlist_gen_rule [p;q]\n    (deduct_antisym_rule\n      (* ~ p /\\ ~ q |- ~ (p \\/ q)        *)\n      (not_intro_rule\n        (disch_rule (parse_term(@\u0022p \\/ q\u0022))\n          (* ~ p /\\ ~ q, p \\/ q |- false   *)\n          (disj_cases_rule (assume_rule (parse_term(@\u0022p \\/ q\u0022)))\n            (* ~ p /\\ ~ q, p |- false        *)\n            (undisch_rule (not_elim_rule (conjunct1_rule th1)))\n            (* ~ p /\\ ~ q, q |- false        *)\n            (undisch_rule (not_elim_rule (conjunct2_rule th1))) )))\n      (* ~ (p \\/ q) |- ~ p /\\ ~ q        *)\n      (conj_rule\n        (* ~ (p \\/ q) |- ~ p               *)\n        (deduct_contrapos_rule p\n          (* p |- p \\/ q                      *)\n          (disj1_rule (assume_rule p) q) )\n        (* ~ (p \\/ q) |- ~ q               *)\n        (deduct_contrapos_rule q\n          (* q |- p \\/ q                      *)\n          (disj2_rule p (assume_rule q)) )))\n\n//val it : thm = |- !p q. ~ (p \\/ q) \u003C=\u003E ~ p /\\ ~ q"},{"uri":"http://localhost:8901/teoremi/0011_conj_assoc.html","title":"Propriet\u0026agrave; associativa della congiuzione\n","content":"(**\nPropriet\u0026agrave; associativa della congiuzione\n=============================================\n\n$\\forall p\\ q.\\ p \\wedge (q \\wedge r) \\Leftrightarrow (p \\wedge q) \\wedge r$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nconj_assoc_thm\n//   |- !p q r. p /\\ (q /\\ r) \u003C=\u003E (p /\\ q) /\\ r\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p q r. p /\\ (q /\\ r) \u003C=\u003E (p /\\ q) /\\ r\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E conj_rule_bk [0] [0]\n|\u003E conjunct1_rule_bk \u0022q:bool\u0022\n|\u003E conjunct1_rule_bk \u0022r:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conj_rule_bk [0] [0]\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E conjunct1_rule_bk \u0022r:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct2_rule_bk @\u0022p /\\ q\u0022\n|\u003E assume_rule_bk\n|\u003E conj_rule_bk [0] [0]\n|\u003E conj_rule_bk [0] [0]\n|\u003E conjunct1_rule_bk @\u0022q /\\ r\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk @\u0022r:bool\u0022\n|\u003E conjunct2_rule_bk @\u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct2_rule_bk @\u0022q:bool\u0022\n|\u003E conjunct2_rule_bk @\u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E view\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{[p:bool;q:bool;r:bool]\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ (p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ conjunct1_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\t\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ (p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ q}\n\t\t\t\t\t\\textsf{ conjunct2_rule}}\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ (p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ r}\n\t\t\t\t\t\\textsf{ conjunct2_rule}}}\n\t\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ q\\ \\wedge\\ r}\n\t\t\t\t\\textsf{ conj_rule}}}\n\t\t\t{(p\\ \\wedge\\ q)\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q\\ \\wedge\\ r}\n\t\t\t\\textsf{ conj_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r}\n\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q\\ \\wedge\\ r}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ p}\n\t\t\t\t\t\\textsf{ conjunct1_rule}}\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r}\n\t\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q\\ \\wedge\\ r}\n\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ q\\ \\wedge\\ r}\n\t\t\t\t\t\t\\textsf{ conjunct2_rule}}}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ q}\n\t\t\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\t\\textsf{ conj_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r}\n\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q\\ \\wedge\\ r}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ q\\ \\wedge\\ r}\n\t\t\t\t\t\\textsf{ conjunct2_rule}}}\n\t\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ r}\n\t\t\t\t\\textsf{ conjunct2_rule}}}\n\t\t\t{p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\vdash\\ (p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\t\t\\textsf{ conj_rule}}}\n\t\t{\\vdash\\ p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\Leftrightarrow\\ (p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ p\\ q\\ r.\\ p\\ \\wedge\\ q\\ \\wedge\\ r\\ \\Leftrightarrow\\ (p\\ \\wedge\\ q)\\ \\wedge\\ r}\n\t\\textsf{ list_gen_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\nlet th1 = assume_rule_fd (parse_term(@\u0022p /\\ (q /\\ r)\u0022)) in\nlet th2 = assume_rule_fd (parse_term(@\u0022(p /\\ q) /\\ r\u0022)) in\nlist_gen_rule_fd [p;q;r]\n  (deduct_antisym_rule_fd\n    (* (p /\\ q) /\\ r |- p /\\ (q /\\ r)           *)\n    (conj_rule_fd\n      (conjunct1_rule_fd (conjunct1_rule_fd th2))\n      (conj_rule_fd\n        (conjunct2_rule_fd (conjunct1_rule_fd th2))\n        (conjunct2_rule_fd th2) ))\n    (* (p /\\ q) /\\ r |- (p /\\ q) /\\ r           *)\n    (conj_rule_fd\n      (conj_rule_fd\n        (conjunct1_rule_fd th1)\n        (conjunct1_rule_fd (conjunct2_rule_fd th1)) )\n      (conjunct2_rule_fd (conjunct2_rule_fd th1)) ))\n|\u003E zipper\n|\u003E view\n\n(**\nClassic forward proof without tree\n*)\n\nlet th1\u0027 = assume_rule (parse_term(@\u0022p /\\ (q /\\ r)\u0022)) in\nlet th2\u0027 = assume_rule (parse_term(@\u0022(p /\\ q) /\\ r\u0022)) in\nlist_gen_rule [p;q;r]\n  (deduct_antisym_rule\n    (* (p /\\ q) /\\ r |- p /\\ (q /\\ r)           *)\n    (conj_rule\n      (conjunct1_rule (conjunct1_rule th2\u0027))\n      (conj_rule\n        (conjunct2_rule (conjunct1_rule th2\u0027))\n        (conjunct2_rule th2\u0027) ))\n    (* (p /\\ q) /\\ r |- (p /\\ q) /\\ r           *)\n    (conj_rule\n      (conj_rule\n        (conjunct1_rule th1\u0027)\n        (conjunct1_rule (conjunct2_rule th1\u0027)) )\n      (conjunct2_rule (conjunct2_rule th1\u0027)) ))"},{"uri":"http://localhost:8901/teoremi/0022_disj_dist_left_conj.html","title":"0022_disj_dist_left_conj","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\ndisj_dist_left_conj_thm\n\n\n([],\u0022!p q r. (p /\\ q) \\/ r \u003C=\u003E (p \\/ r) /\\ (q \\/ r)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n    |\u003E disj_cases_rule_bk [0] [0] [] \u0022p:bool\u0022 \u0022r:bool\u0022\n    |\u003E conjunct1_rule_bk \u0022q \\/ r\u0022\n    |\u003E assume_rule_bk\n    |\u003E disj_cases_rule_bk [0] [1] [] \u0022q:bool\u0022 \u0022r:bool\u0022\n    |\u003E conjunct2_rule_bk \u0022p \\/ r\u0022\n    |\u003E assume_rule_bk\n    |\u003E disj1_rule_bk\n    |\u003E conj_rule_bk [0] [1]\n    |\u003E assume_rule_bk\n    |\u003E assume_rule_bk\n    |\u003E disj2_rule_bk\n    |\u003E assume_rule_bk\n    |\u003E disj2_rule_bk\n    |\u003E assume_rule_bk\n\n|\u003E conj_rule_bk [0] [0]\n\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p /\\ q\u0022 \u0022r:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E conjunct1_rule_bk \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022p /\\ q\u0022 \u0022r:bool\u0022\n\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E assume_rule_bk\n\n|\u003E view\n|\u003E root\n|\u003E linearizeProof"},{"uri":"http://localhost:8901/teoremi/0003_not_true.html","title":"Non vero equivale a falso\n","content":"(**\nNon vero equivale a falso\n=============\n\n$\\vdash \\neg \\top \\Leftrightarrow \\bot$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nnot_true_thm\n//   |- ~ true \u003C=\u003E false\n\n(**\nBackward proof with tree\n*)\n\n([],@\u0022~ true \u003C=\u003E false\u0022)\n|\u003E start_proof\n(* |- ~ true \u003C=\u003E false         *)\n|\u003E deduct_antisym_rule_bk [] []\n    (* false |- ~ true             *)\n    |\u003E contr_rule_bk\n        |\u003E assume_rule_bk\n    (* ~ true |- false             *)\n    |\u003E eq_mp_rule_bk [0] [] \u0022true\u0022\n            (* ~ true |- true \u003C=\u003E false    *)\n            |\u003E eqf_intro_rule_bk\n                |\u003E assume_rule_bk\n            (* |- true  *)\n            |\u003E by truth_thm \u0022truth_thm\u0022\n|\u003E view\n|\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- ~ true \u003C=\u003E false\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{\\color{green}{\\dfrac\n\t\t{\\neg\\ \\top\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\bot}\n\t\t\t{\\bot\\ \\vdash\\ \\bot}\n\t\t\t\\textsf{ assume_rule}}}\n\t\t{\\bot\\ \\vdash\\ \\neg\\ \\top}\n\t\t\\textsf{ contr_rule}}\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\neg\\ \\top}\n\t\t\t\t{\\neg\\ \\top\\ \\vdash\\ \\neg\\ \\top}\n\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t{\\neg\\ \\top\\ \\vdash\\ \\top\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\\textsf{ eqf_intro_rule}}\n\t\t\\qquad\n\t\t\\dfrac\n\t\t\t{}\n\t\t\t{\\vdash\\ \\top}\n\t\t\t\\textsf{ truth_thm}}\n\t\t{\\neg\\ \\top\\ \\vdash\\ \\bot}\n\t\t\\textsf{ eq_mp_rule}}}\n\t{\\vdash\\ \\neg\\ \\top\\ \\Leftrightarrow\\ \\bot}\n\t\\textsf{ deduct_antisym_rule}} }\n$\n*)\n\n(**\nForward proof with tree\n*)\n\n//(* |- ~ true \u003C=\u003E false         *)\ndeduct_antisym_rule_fd\n    (* false |- ~ true             *)\n    (contr_rule_fd (parse_term(@\u0022~ true\u0022)) (assume_rule_fd (parse_term(@\u0022false\u0022))))\n    (* ~ true |- false             *)\n    (eq_mp_rule_fd\n        (* ~ true |- true \u003C=\u003E false    *)\n        (eqf_intro_rule_fd (assume_rule_fd (parse_term(@\u0022~ true\u0022))))\n        (truth_thm |\u003E thm_fd \u0022truth\\_thm\u0022) )\n|\u003E zipper |\u003E view |\u003E loc_thm |\u003E Option.get\n\n(**\nClassic forward proof without tree\n*)\n\n//(* |- ~ true \u003C=\u003E false         *)\ndeduct_antisym_rule\n  (* false |- ~ true             *)\n  (contr_rule (parse_term(@\u0022~ true\u0022)) (assume_rule (parse_term(@\u0022false\u0022))))\n  (* ~ true |- false             *)\n  (eq_mp_rule\n    (* ~ true |- true \u003C=\u003E false    *)\n    (eqf_intro_rule (assume_rule (parse_term(@\u0022~ true\u0022))))\n    truth_thm )\n\n//val it : thm = |- ~ true \u003C=\u003E false"},{"uri":"http://localhost:8901/teoremi/0023_imp_right_zero.html","title":"0023_imp_right_zero","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nimp_right_zero_thm\n\n([],\u0022!p. p ==\u003E true\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E disch_rule_bk\n|\u003E add_asm_rule_bk 0\n|\u003E by truth_thm \u0022truth_thm\u0022\n\n|\u003E view\n"},{"uri":"http://localhost:8901/teoremi/0013_conj_dist_right_disj.html","title":"distributivit\u0026agrave; a destra della congiunzione sulla disgiunzione\n","content":"(**\ndistributivit\u0026agrave; a destra della congiunzione sulla disgiunzione\n=============\n\n$\\forall p\\ q\\ r.\\ p \\wedge (q \\vee r) \\Leftrightarrow (p \\wedge q) \\vee (p \\wedge r)$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nconj_dist_right_disj_thm\n//   |- !p q r. p /\\ (q \\/ r) \u003C=\u003E (p /\\ q) \\/ (p /\\ r)\n\n(**\nBackward proof with tree\n*)\n\n([],\u0022!p q r. p /\\ (q \\/ r) \u003C=\u003E (p /\\ q) \\/ (p /\\ r)\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E conj_rule_bk [0] [0]\n|\u003E disj_cases_rule_bk [0] [] [] \u0022(p /\\ q)\u0022 \u0022(p /\\ r)\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022q:bool\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct1_rule_bk \u0022r:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [] [] \u0022(p /\\ q)\u0022 \u0022(p /\\ r)\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj_cases_rule_bk [0] [0] [0] \u0022q:bool\u0022 \u0022r:bool\u0022\n|\u003E conjunct2_rule_bk \u0022p:bool\u0022\n|\u003E assume_rule_bk\n|\u003E disj1_rule_bk\n|\u003E conj_rule_bk [0] [1]\n|\u003E conjunct1_rule_bk \u0022q \\/ r\u0022\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n|\u003E disj2_rule_bk\n|\u003E conj_rule_bk [0] [1]\n|\u003E conjunct1_rule_bk \u0022q \\/ r\u0022\n|\u003E assume_rule_bk\n|\u003E assume_rule_bk\n|\u003E view\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{[p:bool;q:bool;r:bool]\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{p\\ \\wedge\\ q}\n\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ p}\n\t\t\t\t\t\\textsf{ conjunct1_rule}}\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{p\\ \\wedge\\ r}\n\t\t\t\t\t\t{p\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ r}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{p\\ \\wedge\\ r\\ \\vdash\\ p}\n\t\t\t\t\t\\textsf{ conjunct1_rule}}}\n\t\t\t\t{p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ disj_cases_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{p\\ \\wedge\\ q}\n\t\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ q}\n\t\t\t\t\t\t\\textsf{ conjunct2_rule}}\n\t\t\t\t\t\\qquad\n\t\t\t\t\tr:bool}\n\t\t\t\t\t{p\\ \\wedge\\ q\\ \\vdash\\ q\\ \\vee\\ r}\n\t\t\t\t\t\\textsf{ disj1_rule}}\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{q:bool\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{p\\ \\wedge\\ r}\n\t\t\t\t\t\t\t{p\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ r}\n\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t{p\\ \\wedge\\ r\\ \\vdash\\ r}\n\t\t\t\t\t\t\\textsf{ conjunct2_rule}}}\n\t\t\t\t\t{p\\ \\wedge\\ r\\ \\vdash\\ q\\ \\vee\\ r}\n\t\t\t\t\t\\textsf{ disj2_rule}}}\n\t\t\t\t{p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r\\ \\vdash\\ q\\ \\vee\\ r}\n\t\t\t\t\\textsf{ disj_cases_rule}}}\n\t\t\t{p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r\\ \\vdash\\ p\\ \\wedge\\ (q\\ \\vee\\ r)}\n\t\t\t\\textsf{ conj_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)}\n\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\vdash\\ p\\ \\wedge\\ (q\\ \\vee\\ r)}\n\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\vdash\\ q\\ \\vee\\ r}\n\t\t\t\t\\textsf{ conjunct2_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)}\n\t\t\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\vdash\\ p\\ \\wedge\\ (q\\ \\vee\\ r)}\n\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\vdash\\ p}\n\t\t\t\t\t\t\\textsf{ conjunct1_rule}}\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{q:bool}\n\t\t\t\t\t\t{q\\ \\vdash\\ q}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r),\\ q\\ \\vdash\\ p\\ \\wedge\\ q}\n\t\t\t\t\t\\textsf{ conj_rule}}\n\t\t\t\t\\qquad\n\t\t\t\tp\\ \\wedge\\ r}\n\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r),\\ q\\ \\vdash\\ p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\t\t\\textsf{ disj1_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{p\\ \\wedge\\ q\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)}\n\t\t\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\vdash\\ p\\ \\wedge\\ (q\\ \\vee\\ r)}\n\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\vdash\\ p}\n\t\t\t\t\t\t\\textsf{ conjunct1_rule}}\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{r:bool}\n\t\t\t\t\t\t{r\\ \\vdash\\ r}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r),\\ r\\ \\vdash\\ p\\ \\wedge\\ r}\n\t\t\t\t\t\\textsf{ conj_rule}}}\n\t\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r),\\ r\\ \\vdash\\ p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\t\t\\textsf{ disj2_rule}}}\n\t\t\t{p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\vdash\\ p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\t\\textsf{ disj_cases_rule}}}\n\t\t{\\vdash\\ p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\Leftrightarrow\\ p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ p\\ q\\ r.\\ p\\ \\wedge\\ (q\\ \\vee\\ r)\\ \\Leftrightarrow\\ p\\ \\wedge\\ q\\ \\vee\\ p\\ \\wedge\\ r}\n\t\\textsf{ list_gen_rule}} }\n$\n*)\n\nit\n|\u003E root\n|\u003E linearizeProof\n\n// 0                   p /\\ q \\/ p /\\ r |- p /\\ q \\/ p /\\ r                                   assume_rule                         \n// 1                             p /\\ q |- p /\\ q                                             assume_rule                         \n// 2                             p /\\ q |- p:bool                                             conjunct1_rule            1         \n// 3                             p /\\ r |- p /\\ r                                             assume_rule                         \n// 4                             p /\\ r |- p:bool                                             conjunct1_rule            3         \n// 5                   p /\\ q \\/ p /\\ r |- p:bool                                             disj_cases_rule           0,2,4     \n// 6                   p /\\ q \\/ p /\\ r |- p /\\ q \\/ p /\\ r                                   assume_rule                         \n// 7                             p /\\ q |- p /\\ q                                             assume_rule                         \n// 8                             p /\\ q |- q:bool                                             conjunct2_rule            7         \n// 9                             p /\\ q |- q \\/ r                                             disj1_rule                8         \n// 10                            p /\\ r |- p /\\ r                                             assume_rule                         \n// 11                            p /\\ r |- r:bool                                             conjunct2_rule            10        \n// 12                            p /\\ r |- q \\/ r                                             disj2_rule                11        \n// 13                  p /\\ q \\/ p /\\ r |- q \\/ r                                             disj_cases_rule           6,9,12    \n// 14                  p /\\ q \\/ p /\\ r |- p /\\ (q \\/ r)                                      conj_rule                 5,13      \n// 15                     p /\\ (q \\/ r) |- p /\\ (q \\/ r)                                      assume_rule                         \n// 16                     p /\\ (q \\/ r) |- q \\/ r                                             conjunct2_rule            15        \n// 17                     p /\\ (q \\/ r) |- p /\\ (q \\/ r)                                      assume_rule                         \n// 18                     p /\\ (q \\/ r) |- p:bool                                             conjunct1_rule            17        \n// 19                            q:bool |- q:bool                                             assume_rule                         \n// 20             p /\\ (q \\/ r), q:bool |- p /\\ q                                             conj_rule                 18,19     \n// 21             p /\\ (q \\/ r), q:bool |- p /\\ q \\/ p /\\ r                                   disj1_rule                20        \n// 22                     p /\\ (q \\/ r) |- p /\\ (q \\/ r)                                      assume_rule                         \n// 23                     p /\\ (q \\/ r) |- p:bool                                             conjunct1_rule            22        \n// 24                            r:bool |- r:bool                                             assume_rule                         \n// 25             p /\\ (q \\/ r), r:bool |- p /\\ r                                             conj_rule                 23,24     \n// 26             p /\\ (q \\/ r), r:bool |- p /\\ q \\/ p /\\ r                                   disj2_rule                25        \n// 27                     p /\\ (q \\/ r) |- p /\\ q \\/ p /\\ r                                   disj_cases_rule           16,21,26  \n// 28                                   |- p /\\ (q \\/ r) \u003C=\u003E p /\\ q \\/ p /\\ r                 deduct_antisym_rule       14,27     \n// 29                                   |- !p q r. p /\\ (q \\/ r) \u003C=\u003E p /\\ q \\/ p /\\ r         list_gen_rule             28        \n\n(**\nForward proof with tree\n*)\n\nlet th1 = assume_rule_fd (parse_term(@\u0022(p /\\ q) \\/ (p /\\ r)\u0022))\nlet th2 = assume_rule_fd (parse_term(@\u0022p /\\ (q \\/ r)\u0022)) \nlist_gen_rule [p;q;r]\n(deduct_antisym_rule_fd\n  (* (p /\\ q) \\/ (p /\\ r) |- p /\\ (q \\/ r)  *)\n  (conj_rule_fd\n    (* (p /\\ q) \\/ (p /\\ r) |- p              *)\n    (disj_cases_rule_fd th1\n      (conjunct1_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ q\u0022))))\n      (conjunct1_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ r\u0022)))) )\n    (* (p /\\ q) \\/ (p /\\ r) |- q \\/ r         *)\n    (disj_cases_rule_fd th1\n      (disj1_rule_fd (conjunct2_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ q\u0022)))) r)\n      (disj2_rule_fd q (conjunct2_rule_fd (assume_rule_fd (parse_term(@\u0022p /\\ r\u0022))))) ))\n  (* p /\\ (q \\/ r) |- (p /\\ q) \\/ (p /\\ r)  *)\n  (disj_cases_rule_fd (conjunct2_rule_fd th2)\n    (disj1_rule_fd\n      (* p /\\ (q \\/ r), q |- p /\\ q             *)\n      (conj_rule_fd (conjunct1_rule_fd th2) (assume_rule_fd q)) (parse_term(@\u0022p /\\ r\u0022)))\n    (disj2_rule_fd (parse_term(@\u0022p /\\ q\u0022))\n      (* p /\\ (q \\/ r), r |- p /\\ r             *)\n      (conj_rule_fd (conjunct1_rule_fd th2) (assume_rule_fd r)) )))\n|\u003E linearizeProof\n\n// 0                   p /\\ q \\/ p /\\ r |- p /\\ q \\/ p /\\ r                                   assume_rule                         \n// 1                             p /\\ q |- p /\\ q                                             assume_rule                         \n// 2                             p /\\ q |- p:bool                                             conjunct1_rule            1         \n// 3                             p /\\ r |- p /\\ r                                             assume_rule                         \n// 4                             p /\\ r |- p:bool                                             conjunct1_rule            3         \n// 5                   p /\\ q \\/ p /\\ r |- p:bool                                             disj_cases_rule           0,2,4     \n// 6                   p /\\ q \\/ p /\\ r |- p /\\ q \\/ p /\\ r                                   assume_rule                         \n// 7                             p /\\ q |- p /\\ q                                             assume_rule                         \n// 8                             p /\\ q |- q:bool                                             conjunct2_rule            7         \n// 9                             p /\\ q |- q \\/ r                                             disj1_rule                8         \n// 10                            p /\\ r |- p /\\ r                                             assume_rule                         \n// 11                            p /\\ r |- r:bool                                             conjunct2_rule            10        \n// 12                            p /\\ r |- q \\/ r                                             disj2_rule                11        \n// 13                  p /\\ q \\/ p /\\ r |- q \\/ r                                             disj_cases_rule           6,9,12    \n// 14                  p /\\ q \\/ p /\\ r |- p /\\ (q \\/ r)                                      conj_rule                 5,13      \n// 15                     p /\\ (q \\/ r) |- p /\\ (q \\/ r)                                      assume_rule                         \n// 16                     p /\\ (q \\/ r) |- q \\/ r                                             conjunct2_rule            15        \n// 17                     p /\\ (q \\/ r) |- p /\\ (q \\/ r)                                      assume_rule                         \n// 18                     p /\\ (q \\/ r) |- p:bool                                             conjunct1_rule            17        \n// 19                            q:bool |- q:bool                                             assume_rule                         \n// 20             p /\\ (q \\/ r), q:bool |- p /\\ q                                             conj_rule                 18,19     \n// 21             p /\\ (q \\/ r), q:bool |- p /\\ q \\/ p /\\ r                                   disj1_rule                20        \n// 22                     p /\\ (q \\/ r) |- p /\\ (q \\/ r)                                      assume_rule                         \n// 23                     p /\\ (q \\/ r) |- p:bool                                             conjunct1_rule            22        \n// 24                            r:bool |- r:bool                                             assume_rule                         \n// 25             p /\\ (q \\/ r), r:bool |- p /\\ r                                             conj_rule                 23,24     \n// 26             p /\\ (q \\/ r), r:bool |- p /\\ q \\/ p /\\ r                                   disj2_rule                25        \n// 27                     p /\\ (q \\/ r) |- p /\\ q \\/ p /\\ r                                   disj_cases_rule           16,21,26  \n// 28                                   |- p /\\ (q \\/ r) \u003C=\u003E p /\\ q \\/ p /\\ r                 deduct_antisym_rule       14,27     \n\n(**\nClassic forward proof without tree\n*)\n\nlet th1\u0027 = assume_rule (parse_term(@\u0022(p /\\ q) \\/ (p /\\ r)\u0022)) in\nlet th2\u0027 = assume_rule (parse_term(@\u0022p /\\ (q \\/ r)\u0022)) in\nlist_gen_rule [p;q;r]\n  (deduct_antisym_rule\n    (* (p /\\ q) \\/ (p /\\ r) |- p /\\ (q \\/ r)  *)\n    (conj_rule\n      (* (p /\\ q) \\/ (p /\\ r) |- p              *)\n      (disj_cases_rule th1\u0027\n        (conjunct1_rule (assume_rule (parse_term(@\u0022p /\\ q\u0022))))\n        (conjunct1_rule (assume_rule (parse_term(@\u0022p /\\ r\u0022)))) )\n      (* (p /\\ q) \\/ (p /\\ r) |- q \\/ r         *)\n      (disj_cases_rule th1\u0027\n        (disj1_rule (conjunct2_rule (assume_rule (parse_term(@\u0022p /\\ q\u0022)))) r)\n        (disj2_rule q (conjunct2_rule (assume_rule (parse_term(@\u0022p /\\ r\u0022))))) ))\n    (* p /\\ (q \\/ r) |- (p /\\ q) \\/ (p /\\ r)  *)\n    (disj_cases_rule (conjunct2_rule th2\u0027)\n      (disj1_rule\n        (* p /\\ (q \\/ r), q |- p /\\ q             *)\n        (conj_rule (conjunct1_rule th2\u0027) (assume_rule q)) (parse_term(@\u0022p /\\ r\u0022)))\n      (disj2_rule (parse_term(@\u0022p /\\ q\u0022))\n        (* p /\\ (q \\/ r), r |- p /\\ r             *)\n        (conj_rule (conjunct1_rule th2\u0027) (assume_rule r)) )))"},{"uri":"http://localhost:8901/teoremi/0044_excluded_midle.html","title":"Terzo escluso\n","content":"(**\nTerzo escluso\n=====================\n\n$\\vdash \\forall p.\\ p \\vee \\neg p$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\nBoolAlg.load\nBoolClass.load\n(***unhide***)\n\nexcluded_middle_thm\n// |- !p. p \\/ ~ p\n\nlet emt1 = assume_rule p                           //                                  p |- p\nlet emt2 = disj1_rule emt1 (mk_not p)              //                                  p |- p \\/ ~ p\nlet emt3 = \u0022false\u0022 |\u003E parse_term |\u003E refl_conv      //                                    |- false \u003C=\u003E false\nlet emt4 = disj1_rule emt3 p                       //                                    |- (false \u003C=\u003E false) \\/ p\nlet emt5 =                                                                            \n    exists_rule                                                                       \n        ((parse_term(@\u0022?x. (x \u003C=\u003E false) \\/ p\u0022)),                                     \n            (parse_term(@\u0022false\u0022))) emt4           //                                    |- ?x. (x \u003C=\u003E false) \\/ p\nlet emt6 = select_rule emt5                        //                                    |- ((@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false) \\/ p\nlet emt7 = refl_conv (parse_term(@\u0022true\u0022))         //                                    |- true \u003C=\u003E true\nlet emt8 = disj1_rule emt7 p                       //                                    |- (true \u003C=\u003E true) \\/ p\nlet emt9 =                                                                            \n    exists_rule                                                                       \n        ((parse_term(@\u0022?x. (x \u003C=\u003E true) \\/ p\u0022)),                                      \n            (parse_term(@\u0022true\u0022))) emt8            //                                    |- ?x. (x \u003C=\u003E true) \\/ p\nlet emt10 = select_rule emt9                       //                                    |- ((@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true) \\/ p\nlet emt11 = \n    assume_rule \n        (parse_term(@\u0022(@x. (x \u003C=\u003E true) \\/ p) \n            \u003C=\u003E true\u0022))                            //   (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true |- (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true\nlet emt12 = \n    assume_rule \n        (parse_term(@\u0022(@x. (x \u003C=\u003E false) \\/ p) \n            \u003C=\u003E false\u0022))                           // (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false |- (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false\nlet emt13 = mk_eq_rule emt11 emt12                 // (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true, \n                                                   // (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false \n                                                   //                                    |- ((@x. (x \u003C=\u003E true) \\/ p) \n                                                   //                                         \u003C=\u003E (@x. (x \u003C=\u003E false) \\/ p)) \n                                                   //                                       \u003C=\u003E (true \u003C=\u003E false)\nlet emt14 = \n    disj2_rule (parse_term(@\u0022x \u003C=\u003E true\u0022)) emt1    //                                  p |- (x \u003C=\u003E true) \\/ p\nlet emt15 = \n    disj2_rule (parse_term(@\u0022x \u003C=\u003E false\u0022)) emt1   //                                  p |- (x \u003C=\u003E false) \\/ p\nlet emt16 = deduct_antisym_rule emt14 emt15        //                                  p |- (x \u003C=\u003E true) \\/ p \u003C=\u003E (x \u003C=\u003E false) \\/ p\nlet emt17 = \n    mk_select_rule \n        (parse_term(@\u0022x:bool\u0022)) emt16              //                                  p |- (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E (@x. (x \u003C=\u003E false) \\/ p)\nlet emt18 = eq_mp_rule emt13 emt17                 // (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true, \n                                                   // (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false,\n                                                   // p\n                                                   //                                    |- true \u003C=\u003E false\nlet emt19 = eq_mp_rule emt18 truth_thm             // (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true, \n                                                   // (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false,\n                                                   // p\n                                                   //                                    |- false\nlet emt20 = disch_rule p emt19                     // (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true, \n                                                   // (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false\n                                                   //                                    |- p ==\u003E false\nlet emt21 = not_intro_rule emt20                   // (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true, \n                                                   // (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false\n                                                   //                                    |- ~ p\nlet emt22 = disj2_rule p emt21                     // (@x. (x \u003C=\u003E true) \\/ p) \u003C=\u003E true, \n                                                   // (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false\n                                                   //                                    |- p \\/ ~ p\nlet emt23 = disj_cases_rule emt10 emt22 emt2       // (@x. (x \u003C=\u003E false) \\/ p) \u003C=\u003E false |- p \\/ ~ p\nlet emt24 = disj_cases_rule emt6 emt23 emt2        //                                    |- p \\/ ~ p\nlet excluded_middle = gen_rule p emt24             //                                    |- !p. p \\/ ~ p\n\n(***hide***)\nlet th1 = assume_rule_tr p\nlet th2 = disj1_rule_tr th1 (mk_not p)\nlet th3 = \u0022false\u0022 |\u003E parse_term |\u003E refl_conv_tr\nlet th4 = disj1_rule_tr th3 p \nlet th5 =                                                                            \n    exists_rule_tr                                                                      \n        ((parse_term(@\u0022?x. (x \u003C=\u003E false) \\/ p\u0022)),                                     \n            (parse_term(@\u0022false\u0022))) th4  \nlet th6 = select_rule_tr th5\nlet th7 = refl_conv_tr (parse_term(@\u0022true\u0022)) \nlet th8 = disj1_rule_tr th7 p\nlet th9 =                                                                            \n    exists_rule_tr                                                                       \n        ((parse_term(@\u0022?x. (x \u003C=\u003E true) \\/ p\u0022)),                                      \n            (parse_term(@\u0022true\u0022))) th8  \nlet th10 = select_rule_tr th9\nlet th11 = \n    assume_rule_tr\n        (parse_term(@\u0022(@x. (x \u003C=\u003E true) \\/ p) \n            \u003C=\u003E true\u0022))    \nlet th12 = \n    assume_rule_tr\n        (parse_term(@\u0022(@x. (x \u003C=\u003E false) \\/ p) \n            \u003C=\u003E false\u0022))  \nlet th13 = mk_eq_rule_tr th11 th12\nlet th14 = \n    disj2_rule_tr (parse_term(@\u0022x \u003C=\u003E true\u0022)) th1\nlet th15 = \n    disj2_rule_tr (parse_term(@\u0022x \u003C=\u003E false\u0022)) th1\nlet th16 = deduct_antisym_rule_tr th14 th15\nlet th17 = \n    mk_select_rule_tr \n        (parse_term(@\u0022x:bool\u0022)) th16 \nlet th18 = eq_mp_rule_tr th13 th17\nlet truth_thm_gr = (truth_thm, mkGraph (Th truth_thm, \u0022truth\\_thm\u0022) [])\nlet th19 = eq_mp_rule_tr th18 truth_thm_gr\nlet th20 = disch_rule_tr p th19\nlet th21 = not_intro_rule_tr th20\nlet th22 = disj2_rule_tr p th21\nlet th23 = disj_cases_rule_tr th10 th22 th2\nlet th24 = disj_cases_rule_tr th6 th23 th2\nlet th25 = gen_rule_tr p th24\n\n(***unhide***)\n\n(**\n$\n\\small{ \t\n\\dfrac\n\t{p:bool\n\t\\qquad\n\t\\dfrac\n\t\t{\\dfrac\n\t\t\t{\\dfrac\n\t\t\t\t{\\exists x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p\n\t\t\t\t\\qquad\n\t\t\t\t\\bot\n\t\t\t\t\\qquad\n\t\t\t\t\\dfrac\n\t\t\t\t\t{\\dfrac\n\t\t\t\t\t\t{\\bot}\n\t\t\t\t\t\t{\\vdash\\ \\bot\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\t\t\t\\textsf{ refl_conv}\n\t\t\t\t\t\\qquad\n\t\t\t\t\tp:bool}\n\t\t\t\t\t{\\vdash\\ (\\bot\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p}\n\t\t\t\t\t\\textsf{ disj1_rule}}\n\t\t\t\t{\\vdash\\ \\exists x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p}\n\t\t\t\t\\textsf{ exists_rule}}\n\t\t\t{\\vdash\\ ((\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p}\n\t\t\t\\textsf{ select_rule}\n\t\t\\qquad\n\t\t\\dfrac\n\t\t\t{\\dfrac\n\t\t\t\t{\\dfrac\n\t\t\t\t\t{\\exists x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\top\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\dfrac\n\t\t\t\t\t\t{\\dfrac\n\t\t\t\t\t\t\t{\\top}\n\t\t\t\t\t\t\t{\\vdash\\ \\top\\ \\Leftrightarrow\\ \\top}\n\t\t\t\t\t\t\t\\textsf{ refl_conv}\n\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\tp:bool}\n\t\t\t\t\t\t{\\vdash\\ (\\top\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p}\n\t\t\t\t\t\t\\textsf{ disj1_rule}}\n\t\t\t\t\t{\\vdash\\ \\exists x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p}\n\t\t\t\t\t\\textsf{ exists_rule}}\n\t\t\t\t{\\vdash\\ ((\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p}\n\t\t\t\t\\textsf{ select_rule}\n\t\t\t\\qquad\n\t\t\t\\dfrac\n\t\t\t\t{p:bool\n\t\t\t\t\\qquad\n\t\t\t\t\\dfrac\n\t\t\t\t\t{\\dfrac\n\t\t\t\t\t\t{p:bool\n\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\\dfrac\n\t\t\t\t\t\t\t{\\dfrac\n\t\t\t\t\t\t\t\t{\\dfrac\n\t\t\t\t\t\t\t\t\t{\\dfrac\n\t\t\t\t\t\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top}\n\t\t\t\t\t\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top\\ \\vdash\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top}\n\t\t\t\t\t\t\t\t\t\t\\textsf{ assume_rule}\n\t\t\t\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\t\t\t\\dfrac\n\t\t\t\t\t\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\t\t\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot\\ \\vdash\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\t\t\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top,\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot\\ \\vdash\\ ((\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p))\\ \\Leftrightarrow\\ (\\top\\ \\Leftrightarrow\\ \\bot)}\n\t\t\t\t\t\t\t\t\t\\textsf{ mk_eq_rule}\n\t\t\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\t\t\\dfrac\n\t\t\t\t\t\t\t\t\t{x:bool\n\t\t\t\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\t\t\t\\dfrac\n\t\t\t\t\t\t\t\t\t\t{\\dfrac\n\t\t\t\t\t\t\t\t\t\t\t{x\\ \\Leftrightarrow\\ \\top\n\t\t\t\t\t\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\t\t\t\t\t\\dfrac\n\t\t\t\t\t\t\t\t\t\t\t\t{p:bool}\n\t\t\t\t\t\t\t\t\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\t\t\t\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\t\t\t\t\t\t\t{p\\ \\vdash\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p}\n\t\t\t\t\t\t\t\t\t\t\t\\textsf{ disj2_rule}\n\t\t\t\t\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\t\t\t\t\\dfrac\n\t\t\t\t\t\t\t\t\t\t\t{x\\ \\Leftrightarrow\\ \\bot\n\t\t\t\t\t\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\t\t\t\t\t\\dfrac\n\t\t\t\t\t\t\t\t\t\t\t\t{p:bool}\n\t\t\t\t\t\t\t\t\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\t\t\t\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\t\t\t\t\t\t\t{p\\ \\vdash\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p}\n\t\t\t\t\t\t\t\t\t\t\t\\textsf{ disj2_rule}}\n\t\t\t\t\t\t\t\t\t\t{p\\ \\vdash\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p\\ \\Leftrightarrow\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p}\n\t\t\t\t\t\t\t\t\t\t\\textsf{ deduct_antisym_rule}}\n\t\t\t\t\t\t\t\t\t{p\\ \\vdash\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)}\n\t\t\t\t\t\t\t\t\t\\textsf{ mk_select_rule}}\n\t\t\t\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top,\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot,\\ p\\ \\vdash\\ \\top\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\t\t\t\t\t\\textsf{ eq_mp_rule}\n\t\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\t\\vdash\\ \\top}\n\t\t\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top,\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot,\\ p\\ \\vdash\\ \\bot}\n\t\t\t\t\t\t\t\\textsf{ eq_mp_rule}}\n\t\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top,\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot\\ \\vdash\\ p\\ \\Rightarrow\\ \\bot}\n\t\t\t\t\t\t\\textsf{ disch_rule}}\n\t\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top,\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot\\ \\vdash\\ \\neg\\ p}\n\t\t\t\t\t\\textsf{ not_intro_rule}}\n\t\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\top,\\ (\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot\\ \\vdash\\ p\\ \\vee\\ \\neg\\ p}\n\t\t\t\t\\textsf{ disj2_rule}\n\t\t\t\\qquad\n\t\t\t\\dfrac\n\t\t\t\t{\\dfrac\n\t\t\t\t\t{p:bool}\n\t\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\t\\textsf{ assume_rule}\n\t\t\t\t\\qquad\n\t\t\t\t\\neg\\ p}\n\t\t\t\t{p\\ \\vdash\\ p\\ \\vee\\ \\neg\\ p}\n\t\t\t\t\\textsf{ disj1_rule}}\n\t\t\t{(\\epsilon x.\\ (x\\ \\Leftrightarrow\\ \\bot)\\ \\vee\\ p)\\ \\Leftrightarrow\\ \\bot\\ \\vdash\\ p\\ \\vee\\ \\neg\\ p}\n\t\t\t\\textsf{ disj_cases_rule}\n\t\t\\qquad\n\t\t\\dfrac\n\t\t\t{\\dfrac\n\t\t\t\t{p:bool}\n\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\\textsf{ assume_rule}\n\t\t\t\\qquad\n\t\t\t\\neg\\ p}\n\t\t\t{p\\ \\vdash\\ p\\ \\vee\\ \\neg\\ p}\n\t\t\t\\textsf{ disj1_rule}}\n\t\t{\\vdash\\ p\\ \\vee\\ \\neg\\ p}\n\t\t\\textsf{ disj_cases_rule}}\n\t{\\vdash\\ \\forall\\ p.\\ p\\ \\vee\\ \\neg\\ p}\n\t\\textsf{ gen_rule} }\n$\n*)"},{"uri":"http://localhost:8901/teoremi/0035_exists_one_point.html","title":"0035_exists_one_point","content":"(**\n\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nexists_one_point_thm\n\n([],\u0022!P a. (?(x:a). x = a /\\ P x) \u003C=\u003E P a\u0022)\n|\u003E start_proof\n|\u003E list_gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E exists_rule_bk \u0022a:a\u0022\n|\u003E conj_rule_bk [] [0]\n|\u003E refl_conv_bk\n|\u003E assume_rule_bk\n|\u003E choose_rule_bk [0] [] 0 (\u0022x:a\u0022,\u0022x:a\u0022)\n|\u003E assume_rule_bk\n|\u003E eq_mp_rule_bk [0] [0] \u0022(P:a-\u003Ebool) x\u0022\n|\u003E mk_comb2_rule_bk\n|\u003E conjunct1_rule_bk \u0022(P:a-\u003Ebool) x\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct2_rule_bk \u0022(x:a) = a\u0022\n|\u003E assume_rule_bk\n\n|\u003E view\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n([],\u0022!P a. (?(x:a). x = a /\\ P x) \u003C=\u003E P a\u0022)\n|\u003E start_proof\n|\u003E gen_rule_bk\n|\u003E gen_rule_bk\n|\u003E deduct_antisym_rule_bk [] []\n|\u003E exists_rule_bk \u0022a:a\u0022\n|\u003E conj_rule_bk [] [0]\n|\u003E refl_conv_bk\n|\u003E assume_rule_bk\n//|\u003E focus_goal\n|\u003E choose_rule_bk [0] [] 0 (\u0022x:a\u0022,\u0022x:a\u0022)\n|\u003E assume_rule_bk\n|\u003E eq_mp_rule_bk [0] [0] \u0022(P:a-\u003Ebool) x\u0022\n|\u003E mk_comb2_rule_bk\n|\u003E conjunct1_rule_bk \u0022(P:a-\u003Ebool) x\u0022\n|\u003E assume_rule_bk\n|\u003E conjunct2_rule_bk \u0022(x:a) = a\u0022\n|\u003E assume_rule_bk\n\n|\u003E view\n\nlet tm = (parse_term(@\u0022?(x:\u0027a). x = a /\\ P x\u0022))\nlet s1 = assume_rule_fd (parse_term(@\u0022(x:\u0027a)=a /\\ P x\u0022))\n\n(choose_rule_fd (parse_term(@\u0022x:\u0027a\u0022)) (assume_rule_fd tm)\n    (eq_mp_rule_fd (mk_comb2_rule_fd (parse_term(@\u0022P:\u0027a-\u003Ebool\u0022)) (conjunct1_rule_fd s1))\n           (conjunct2_rule_fd s1)) )\n|\u003E zipper\n|\u003E view\n\ngen_rule_fd (parse_term(@\u0022P:\u0027a-\u003Ebool\u0022))\n (gen_rule_fd (parse_term(@\u0022a:\u0027a\u0022))\n   (deduct_antisym_rule_fd\n     (exists_rule_fd tm (parse_term(@\u0022a:\u0027a\u0022))\n       (conj_rule_fd (refl_conv_fd (parse_term(@\u0022a:\u0027a\u0022))) (assume_rule_fd (parse_term(@\u0022(P:\u0027a-\u003Ebool) a\u0022)))))\n     (choose_rule_fd (parse_term(@\u0022x:\u0027a\u0022)) (assume_rule_fd tm)\n       (eq_mp_rule_fd (mk_comb2_rule_fd (parse_term(@\u0022P:\u0027a-\u003Ebool\u0022)) (conjunct1_rule_fd s1))\n              (conjunct2_rule_fd s1)) )))\n|\u003E zipper\n|\u003E view\n"},{"uri":"http://localhost:8901/teoremi/0045_bool_cases.html","title":"Bool Cases\n","content":"(**\nBool Cases\n=============\n\n$\\vdash \\forall p.\\ (p \\Leftrightarrow \\top) \\vee (p \\Leftrightarrow \\bot)$\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\nBoolAlg.load\nBoolClass.load\n(***unhide***)\n\nbool_cases_thm\n// |- !p. (p \u003C=\u003E true) \\/ (p \u003C=\u003E false)\n\nlet p = mk_var (\u0022p\u0022,bool_ty)\nlet tm1 = spec_rule p excluded_middle_thm                   //     |- p \\/ ~ p\nlet tm2 = eqt_intro_rule (assume_rule p)                    //   p |- p \u003C=\u003E true\nlet tm3 = disj1_rule tm2 (parse_term(@\u0022p \u003C=\u003E false\u0022))       //   p |- (p \u003C=\u003E true) \\/ (p \u003C=\u003E false)\nlet tm4 = eqf_intro_rule (assume_rule (parse_term(@\u0022~ p\u0022))) // ~ p |- p \u003C=\u003E false\nlet tm5 = disj2_rule (parse_term(@\u0022p \u003C=\u003E true\u0022)) tm4        // ~ p |- (p \u003C=\u003E true) \\/ (p \u003C=\u003E false)\nlet tm6 = disj_cases_rule tm1 tm3 tm5                       //     |- (p \u003C=\u003E true) \\/ (p \u003C=\u003E false)\nlet tm7 = gen_rule p tm6\n\n(***hide***)\nlet excluded_middle_thm_gr = (excluded_middle_thm, mkGraph (Th excluded_middle_thm, \u0022excluded\\_middle\\_thm\u0022) [])\nlet th1 = spec_rule_tr p excluded_middle_thm_gr\n\n//let eqt_intro_rule_tr (th1,g1) = \n//    let th = th1 |\u003E eqt_intro_rule\n//    (th, mkGraph (Th th,\u0022eqt_intro_rule\u0022) [g1])\n\nlet th2 = eqt_intro_rule_tr (assume_rule_tr p)\nlet th3 = disj1_rule_tr th2 (parse_term(@\u0022p \u003C=\u003E false\u0022))\n\n//let eqf_intro_rule_tr (th1,g1) = \n//    let th = th1 |\u003E eqf_intro_rule\n//    (th, mkGraph (Th th,\u0022eqf_intro_rule\u0022) [g1])\n\nlet th4 = eqf_intro_rule_tr (assume_rule_tr (parse_term(@\u0022~ p\u0022)))\nlet th5 = disj2_rule_tr (parse_term(@\u0022p \u003C=\u003E true\u0022)) th4 \nlet th6 = disj_cases_rule_tr th1 th3 th5\nlet th7 = gen_rule_tr p th6\n\n(***unhide***)\n\n(**\n\n$\n\\small{ \t\\dfrac\n\t{p:bool\n\t\\qquad\n\t\\dfrac\n\t\t{\\dfrac\n\t\t\t{p:bool\n\t\t\t\\qquad\n\t\t\t\\vdash\\ \\forall\\ p.\\ p\\ \\vee\\ \\neg\\ p\\; \\mathbf{ excluded\\_middle\\_thm}}\n\t\t\t{\\vdash\\ p\\ \\vee\\ \\neg\\ p}\n\t\t\t\\textsf{ spec_rule}\n\t\t\\qquad\n\t\t\\dfrac\n\t\t\t{\\dfrac\n\t\t\t\t{\\dfrac\n\t\t\t\t\t{p:bool}\n\t\t\t\t\t{p\\ \\vdash\\ p}\n\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t{p\\ \\vdash\\ p\\ \\Leftrightarrow\\ \\top}\n\t\t\t\t\\textsf{ eqt_intro_rule}\n\t\t\t\\qquad\n\t\t\tp\\ \\Leftrightarrow\\ \\bot}\n\t\t\t{p\\ \\vdash\\ (p\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ (p\\ \\Leftrightarrow\\ \\bot)}\n\t\t\t\\textsf{ disj1_rule}\n\t\t\\qquad\n\t\t\\dfrac\n\t\t\t{p\\ \\Leftrightarrow\\ \\top\n\t\t\t\\qquad\n\t\t\t\\dfrac\n\t\t\t\t{\\dfrac\n\t\t\t\t\t{\\neg\\ p}\n\t\t\t\t\t{\\neg\\ p\\ \\vdash\\ \\neg\\ p}\n\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t{\\neg\\ p\\ \\vdash\\ p\\ \\Leftrightarrow\\ \\bot}\n\t\t\t\t\\textsf{ eqf_intro_rule}}\n\t\t\t{\\neg\\ p\\ \\vdash\\ (p\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ (p\\ \\Leftrightarrow\\ \\bot)}\n\t\t\t\\textsf{ disj2_rule}}\n\t\t{\\vdash\\ (p\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ (p\\ \\Leftrightarrow\\ \\bot)}\n\t\t\\textsf{ disj_cases_rule}}\n\t{\\vdash\\ \\forall\\ p.\\ (p\\ \\Leftrightarrow\\ \\top)\\ \\vee\\ (p\\ \\Leftrightarrow\\ \\bot)}\n\t\\textsf{ gen_rule} }\n$\n*)"},{"uri":"http://localhost:8901/teoremi/0002_fun_eq.html","title":"Equivalenza tra funzioni\n","content":"(**\nEquivalenza tra funzioni\n=============\n\n$\\vdash \\forall (f:\\alpha \\rightarrow \\beta)\\ g.\\ f = g\\ \\Leftrightarrow\\ (\\forall x.\\ f\\ x = g\\ x)$\n\nL\u0027euivalenza tra funzioni corrisponde all\u0027equivalenza dei loro valori a parit\u0026agrave; di argomento.\n*)\n\n(***hide***)\n#load \u0022../avvio.fsx\u0022\nopen HOL\nCoreThry.load\nEqual.load\nBool.load\n(***unhide***)\n\nfun_eq_thm\n// |- !(f:\u0027a-\u003E\u0027b) g. f = g \u003C=\u003E (!x. f x = g x)\n\n(**\nBackward proof with tree\n*)\n\n([],@\u0022!(f:\u0027a-\u003E\u0027b) g. f = g \u003C=\u003E (!x. f x = g x)\u0022) \n|\u003E start_proof\n|\u003E list_gen_rule_bk\n    |\u003E deduct_antisym_rule_bk [] []\n        |\u003E trans_rule_bk \u0022(\\x. (g:\u0027a-\u003E\u0027b) x)\u0022\n            |\u003E trans_rule_bk \u0022(\\x. (f:\u0027a-\u003E\u0027b) x)\u0022\n                |\u003E add_asm_rule_bk 0\n                    |\u003E sym_rule_bk\n                    |\u003E eta_conv_bk\n                |\u003E mk_abs_rule_bk\n                    |\u003E spec_rule_bk (\u0022x:\u0027a\u0022,\u0022x:\u0027a\u0022) \u0022!(x:a). (f:a-\u003Eb) x = g x\u0022\n                        |\u003E assume_rule_bk\n            |\u003E add_asm_rule_bk 0\n                |\u003E eta_conv_bk\n        |\u003E gen_rule_bk\n            |\u003E mk_comb1_rule_bk\n                |\u003E assume_rule_bk\n|\u003E view\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{[f:\\alpha\\ \\rightarrow\\ \\beta;g:\\alpha\\ \\rightarrow\\ \\beta]\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{\\lambda\\ x.\\ (f:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t\t\t{\\vdash\\ (\\lambda\\ x.\\ (f:\\alpha\\ \\rightarrow\\ \\beta)\\ x)\\ =\\ f}\n\t\t\t\t\t\t\t\\textsf{ eta_conv}}}\n\t\t\t\t\t\t{\\vdash\\ (f:\\alpha\\ \\rightarrow\\ \\beta)\\ =\\ (\\lambda\\ x.\\ f\\ x)}\n\t\t\t\t\t\t\\textsf{ sym_rule}}}\n\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x\\ \\vdash\\ f\\ =\\ (\\lambda\\ x.\\ f\\ x)}\n\t\t\t\t\t\\textsf{ add_asm_rule}}\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{x:\\alpha\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{x:\\alpha\n\t\t\t\t\t\t\\qquad\n\t\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ \\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t\t\\textsf{ spec_rule}}}\n\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ (\\lambda\\ x.\\ f\\ x)\\ =\\ (\\lambda\\ x.\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x)}\n\t\t\t\t\t\\textsf{ mk_abs_rule}}}\n\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ f\\ =\\ (\\lambda\\ x.\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x)}\n\t\t\t\t\\textsf{ trans_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{\\lambda\\ x.\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t{\\vdash\\ (\\lambda\\ x.\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x)\\ =\\ g}\n\t\t\t\t\t\\textsf{ eta_conv}}}\n\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ (\\lambda\\ x.\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x)\\ =\\ g}\n\t\t\t\t\\textsf{ add_asm_rule}}}\n\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ f\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)}\n\t\t\t\\textsf{ trans_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{x:\\alpha\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{f\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)}\n\t\t\t\t\t{f\\ =\\ g\\ \\vdash\\ f\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)}\n\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\\qquad\n\t\t\t\tx:\\alpha}\n\t\t\t\t{f\\ =\\ g\\ \\vdash\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\\textsf{ mk_comb1_rule}}}\n\t\t\t{f\\ =\\ g\\ \\vdash\\ \\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\\textsf{ gen_rule}}}\n\t\t{\\vdash\\ f\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ \\Leftrightarrow\\ (\\forall\\ x.\\ f\\ x\\ =\\ g\\ x)}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ (f:\\alpha\\ \\rightarrow\\ \\beta)\\ g.\\ f\\ =\\ g\\ \\Leftrightarrow\\ (\\forall\\ x.\\ f\\ x\\ =\\ g\\ x)}\n\t\\textsf{ list_gen_rule}} }\n$\n*)\n\nit\n|\u003E root\n|\u003E linearizeProof\n\n// 0                                    |- (\\x. (f:\u0027a-\u003E\u0027b) x) = f                             eta_conv                            \n// 1                                    |- (f:\u0027a-\u003E\u0027b) = (\\x. f x)                             sym_rule                  0         \n// 2             !x. f x = (g:\u0027a-\u003E\u0027b) x |- (f:\u0027a-\u003E\u0027b) = (\\x. f x)                             add_asm_rule              1         \n// 3             !x. f x = (g:\u0027a-\u003E\u0027b) x |- !x. f x = (g:\u0027a-\u003E\u0027b) x                             assume_rule                         \n// 4             !x. f x = (g:\u0027a-\u003E\u0027b) x |- f x = (g:\u0027a-\u003E\u0027b) x                                 spec_rule                 3         \n// 5             !x. f x = (g:\u0027a-\u003E\u0027b) x |- (\\x. f x) = (\\x. (g:\u0027a-\u003E\u0027b) x)                     mk_abs_rule               4         \n// 6             !x. f x = (g:\u0027a-\u003E\u0027b) x |- f = (\\x. (g:\u0027a-\u003E\u0027b) x)                             trans_rule                2,5       \n// 7                                    |- (\\x. (g:\u0027a-\u003E\u0027b) x) = g                             eta_conv                            \n// 8             !x. f x = (g:\u0027a-\u003E\u0027b) x |- (\\x. (g:\u0027a-\u003E\u0027b) x) = g                             add_asm_rule              7         \n// 9             !x. f x = (g:\u0027a-\u003E\u0027b) x |- f = (g:\u0027a-\u003E\u0027b)                                     trans_rule                6,8       \n// 10                    f = (g:\u0027a-\u003E\u0027b) |- f = (g:\u0027a-\u003E\u0027b)                                     assume_rule                         \n// 11                    f = (g:\u0027a-\u003E\u0027b) |- f x = (g:\u0027a-\u003E\u0027b) x                                 mk_comb1_rule             10        \n// 12                    f = (g:\u0027a-\u003E\u0027b) |- !x. f x = (g:\u0027a-\u003E\u0027b) x                             gen_rule                  11        \n// 13                                   |- f = (g:\u0027a-\u003E\u0027b) \u003C=\u003E (!x. f x = g x)                 deduct_antisym_rule       9,12      \n// 14                                   |- !(f:\u0027a-\u003E\u0027b) g. f = g \u003C=\u003E (!x. f x = g x)           list_gen_rule             13        \n\n(**\nForward proof with tree\n*)\n\nlet x = parse_term(@\u0022x:\u0027a\u0022) \nlet f = parse_term(@\u0022f:\u0027a-\u003E\u0027b\u0022)\nlet g = parse_term(@\u0022g:\u0027a-\u003E\u0027b\u0022)\n\n(* |- !f g. f = g \u003C=\u003E (!x. f x = g x) *)\n(list_gen_rule_fd [f;g]\n  (deduct_antisym_rule_fd\n    (* !x. f x = g x |- f = g                 *)\n    (list_trans_rule_fd\n       [ (*               |- f = (\\x. f x)      *)\n         sym_rule_fd (eta_conv_fd (parse_term(@\u0022\\x. (f:\u0027a-\u003E\u0027b) x\u0022)));\n         (* !x. f x = g x |- ... = (\\x. g x)    *)\n         mk_abs_rule_fd x\n           (spec_rule_fd x (assume_rule_fd (parse_term(@\u0022!x. (f:\u0027a-\u003E\u0027b) x = g x\u0022))));\n         (*               |- ... = g            *)\n         eta_conv_fd (parse_term(@\u0022\\x. (g:\u0027a-\u003E\u0027b) x\u0022)) \n         ])\n    (* f = g |- !x. f x = g x                 *)\n    (gen_rule_fd x\n      (mk_comb1_rule_fd (assume_rule_fd (parse_term(@\u0022(f:\u0027a-\u003E\u0027b)=g\u0022))) x) )))\n|\u003E zipper\n|\u003E view\n|\u003E loc_thm |\u003E Option.get\n\n//val it : thm = |- !(f:\u0027a-\u003E\u0027b) g. f = g \u003C=\u003E (!x. f x = g x)\n\n(**\n$\n\\small{ \t\\color{green}{\\dfrac\n\t{[f:\\alpha\\ \\rightarrow\\ \\beta;g:\\alpha\\ \\rightarrow\\ \\beta]\n\t\\qquad\n\t\\color{green}{\\dfrac\n\t\t{\\color{green}{\\dfrac\n\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{\\lambda\\ x.\\ (f:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t{\\vdash\\ (\\lambda\\ x.\\ (f:\\alpha\\ \\rightarrow\\ \\beta)\\ x)\\ =\\ f}\n\t\t\t\t\t\\textsf{ eta_conv}}}\n\t\t\t\t{\\vdash\\ (f:\\alpha\\ \\rightarrow\\ \\beta)\\ =\\ (\\lambda\\ x.\\ f\\ x)}\n\t\t\t\t\\textsf{ sym_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{x:\\alpha\n\t\t\t\t\\qquad\n\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t{x:\\alpha\n\t\t\t\t\t\\qquad\n\t\t\t\t\t\\color{green}{\\dfrac\n\t\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ \\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t\t\\textsf{ assume_rule}}}\n\t\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\t\\textsf{ spec_rule}}}\n\t\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ (\\lambda\\ x.\\ f\\ x)\\ =\\ (\\lambda\\ x.\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x)}\n\t\t\t\t\\textsf{ mk_abs_rule}}\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\lambda\\ x.\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t{\\vdash\\ (\\lambda\\ x.\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x)\\ =\\ g}\n\t\t\t\t\\textsf{ eta_conv}}}\n\t\t\t{\\forall\\ x.\\ f\\ x\\ =\\ g\\ x\\ \\vdash\\ f\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)}\n\t\t\t\\textsf{ list_trans_rule}}\n\t\t\\qquad\n\t\t\\color{green}{\\dfrac\n\t\t\t{x:\\alpha\n\t\t\t\\qquad\n\t\t\t\\color{green}{\\dfrac\n\t\t\t\t{\\color{green}{\\dfrac\n\t\t\t\t\t{f\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)}\n\t\t\t\t\t{f\\ =\\ g\\ \\vdash\\ f\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)}\n\t\t\t\t\t\\textsf{ assume_rule}}\n\t\t\t\t\\qquad\n\t\t\t\tx:\\alpha}\n\t\t\t\t{f\\ =\\ g\\ \\vdash\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\t\\textsf{ mk_comb1_rule}}}\n\t\t\t{f\\ =\\ g\\ \\vdash\\ \\forall\\ x.\\ f\\ x\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ x}\n\t\t\t\\textsf{ gen_rule}}}\n\t\t{\\vdash\\ f\\ =\\ (g:\\alpha\\ \\rightarrow\\ \\beta)\\ \\Leftrightarrow\\ (\\forall\\ x.\\ f\\ x\\ =\\ g\\ x)}\n\t\t\\textsf{ deduct_antisym_rule}}}\n\t{\\vdash\\ \\forall\\ (f:\\alpha\\ \\rightarrow\\ \\beta)\\ g.\\ f\\ =\\ g\\ \\Leftrightarrow\\ (\\forall\\ x.\\ f\\ x\\ =\\ g\\ x)}\n\t\\textsf{ list_gen_rule}} }\n$\n*)\n\n(**\nClassic forward proof without tree\n*)\n\n//(* |- !f g. f = g \u003C=\u003E (!x. f x = g x) *)\n(list_gen_rule [f;g]\n  (deduct_antisym_rule\n    (* !x. f x = g x |- f = g                 *)\n    (list_trans_rule\n       [ (*               |- f = (\\x. f x)      *)\n         sym_rule (eta_conv (parse_term(@\u0022\\x. (f:\u0027a-\u003E\u0027b) x\u0022)));\n         (* !x. f x = g x |- ... = (\\x. g x)    *)\n         mk_abs_rule x\n           (spec_rule x (assume_rule (parse_term(@\u0022!x. (f:\u0027a-\u003E\u0027b) x = g x\u0022))));\n         (*               |- ... = g            *)\n         eta_conv (parse_term(@\u0022\\x. (g:\u0027a-\u003E\u0027b) x\u0022)) ])\n    (* f = g |- !x. f x = g x                 *)\n    (gen_rule x\n      (mk_comb1_rule (assume_rule (parse_term(@\u0022(f:\u0027a-\u003E\u0027b)=g\u0022))) x) )))\n\n//val it : thm = |- !(f:\u0027a-\u003E\u0027b) g. f = g \u003C=\u003E (!x. f x = g x)"}]